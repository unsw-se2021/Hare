{"version":3,"sources":["components/Home.js","components/Help.js","components/Upload.js","Routes.js","components/Navbar.js","components/View.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Box","alignSelf","border","color","size","pad","StatusInfo","Paragraph","margin","Link","to","Component","UploadPage","Login","User","Account","Highlights","Product","Navbar","tag","background","align","elevation","justify","direction","flex","Heading","level","Menu","id","items","label","icon","icons_Help","onClick","console","log","Apps","View","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","frame","_React$createElement","BrowserRouter","fill","width","defineProperty","Route","exact","path","component","Help","Footer","alignContent","App","Grommet","theme","grommet","full","components_Navbar","components_View","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sXA6BeA,mLApBb,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,UAAU,SAASC,OAAQ,CAAEC,MAAM,SAAUC,KAAM,SAAUC,IAAI,UACrER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAkBL,UAAU,SAASG,KAAK,UAC1CP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAWC,OAAO,SAAlB,6GAKAX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,GAAG,WAAT,yBAhBcC,aCSJf,mLANb,OACCC,EAAAC,EAAAC,cAAA,yBAJgBY,iFCWJC,mLARb,OACCf,EAAAC,EAAAC,cAAA,mBAJsBY,uCCOKE,IACDC,IACGC,IACKC,IACLC,uCCwBjBC,mLAlCb,OACCrB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACAmB,IAAI,SACJC,WAAW,QACXC,MAAM,SACNhB,IAAI,QACJiB,UAAU,SACVC,QAAQ,UACRC,UAAU,MACVC,MAAM,GAEN5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAASC,MAAO,EAAGnB,OAAO,QACzBX,EAAAC,EAAAC,cAAA,mCAIDF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKwB,UAAU,OACd3B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAMC,GAAG,cACRC,MAAO,CACN,CAAEC,MAAO,KACT,CAAEA,MAAO,KACT,CAAEA,MAAO,MAEVC,KAAMnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAY9B,MAAM,UACxBF,UAAU,QACXJ,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAMC,GAAG,cACRC,MACC,CAAC,CAACC,MAAO,SAAUG,QAAS,WAAOC,QAAQC,IAAI,uBAChDJ,KAAMnC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAYlC,MAAM,qBA/BRQ,uCC6BN2B,cAxBd,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACZC,MAAO,WAHSR,wEAOT,IAAAS,EACR,OACCpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,KACCrD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKyB,MAAM,EAAM0B,MAAM,EAAM3B,UAAU,OACtC3B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKK,IAAI,QAAQoB,MAAM,EAAML,WAAW,WACxCvB,EAAAC,EAAAC,cAACC,EAAA,GAADiD,EAAA,CAAK5C,IAAI,QAAQ+C,MAAM,QAAQ3B,MAAM,GAArCgB,OAAAY,EAAA,EAAAZ,CAAAQ,EAAA,MAA+C,UAA/CR,OAAAY,EAAA,EAAAZ,CAAAQ,EAAA,aAAmE,WAAnEA,GACCpD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7D,IACjCC,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAW7D,IAC/BC,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWC,KAEhC7D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKK,IAAI,QAAQoB,MAAM,EAAML,WAAW,oBAnB1BT,aCeJgD,mLAfb,OACC9D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACCmB,IAAI,SACJK,UAAU,MACVC,MAAM,EACNL,WAAW,QACXf,IAAI,QACJkB,QAAQ,UACRqC,aAAa,OACb/D,EAAAC,EAAAC,cAAA,uBAAqBF,EAAAC,EAAAC,cAAA,gCAXJY,aC2BNkD,mLAbb,OACDhE,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CAASC,MAAOC,IAASC,MAAM,GAC9BpE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK4D,aAAa,UAAUT,MAAM,GACjCtD,EAAAC,EAAAC,cAACmE,EAAD,MACCrE,EAAAC,EAAAC,cAACoE,EAAD,MAEDtE,EAAAC,EAAAC,cAACqE,EAAD,eARezD,aCLE0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.63af443f.chunk.js","sourcesContent":["import React, { Component } from 'react'; \nimport { Grommet, grommet, Box, Heading, Menu, Paragraph } from 'grommet';\nimport * as Icons from 'grommet-icons';\nimport { Route, Link, Router, BrowserRouter } from 'react-router-dom';\n\n\nclass Home extends Component { \n\n\trender() { \n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<h1>Homepage</h1>\n\t\t\t\t<br />\n\t\t\t\t<Box alignSelf=\"center\" border={{ color:\"dark-3\", size: \"large\"}} pad=\"medium\">\n\t\t\t\t\t<Icons.StatusInfo alignSelf=\"center\" size=\"large\"/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<Paragraph margin=\"small\">\n\t\t\t\t\t\tThis page is currently under construction\n\t\t\t\t\t\tIf you are here to test the \"Upload\" feature,\n\t\t\t\t\t\tfollow this link: \n\t\t\t\t\t</Paragraph>\n\t\t\t\t\t<br />\n\t\t\t\t\t<Link to=\"/upload\">Upload Image</Link>\n\t\t\t\t</Box>\n\t\t\t</div>\n\t\t);\t\n\t}\n} \n\nexport default Home; \n","import React, { Component } from 'react'; \nimport { Grommet, grommet, Box, Heading, Menu } from 'grommet';\nimport * as Icons from 'grommet-icons';\nimport { Route, Link, Router, BrowserRouter } from 'react-router-dom';\n\n\nclass Home extends Component { \n\t\n\trender() { \n\t\treturn(\n\t\t\t<h1>Help</h1>\n\t\t);\t\n\t}\n} \n\nexport default Home; \n","import React, { Component } from 'react'; \nimport { Grommet, grommet, Box, Heading, Menu, Paragraph } from 'grommet';\nimport * as Icons from 'grommet-icons';\nimport { Route, Link, Router, BrowserRouter } from 'react-router-dom';\n\n\nclass UploadPage extends Component { \n\n\trender() { \n\t\treturn(\n\t\t\t<div> \n\n\t\t\t</div> \n\t\t);\t\n\t}\n} \n\nexport default UploadPage; \n","import Home from './components/Home.js';\nimport Help from './components/Help.js';\nimport Login from './components/Login.js';\nimport User from './components/User.js';\nimport Account from './components/Account.js';\nimport Highlights from './components/Highlights.js';\nimport UploadPage from './components/Upload.js';\nimport Product from './components/Product.js';\nimport { Ingredient, IngredientDetailed } from './components/Ingredient.js';\n\nlet routes = [ \n\t{ path: '/', component: Home },\n\t{ path: '/help', component: Help }, \n\t{ path: '/login', component: Login }, \n\t{ path: '/user', component: User }, \n\t{ path: '/account', component: Account }, \n\t{ path: '/highlighting', component: Highlights },\n\t{ path: '/product', component: Product },\n\t{ path: '/upload', component: UploadPage }\n]; \n\nexport default routes; \n","import React, { Component } from 'react'; \nimport { Grommet, grommet, Box, Heading, Menu } from 'grommet';\nimport * as Icons from 'grommet-icons';\n\nclass Navbar extends Component { \n\t\n\trender() { \n\t\treturn(\n\t\t\t<Box\n\t\t\ttag='header' // Tag that appears in rendered HTML\n\t\t\tbackground='white' // Colour of fill \n\t\t\talign='center'\n\t\t\tpad='small' // Internal padding | --> contents <-- |\n\t\t\televation='xsmall' // Drop shadow \"distance\" above ground\n\t\t\tjustify='between' // Pushes items inside of box to both sides\n\t\t\tdirection='row' // Stretch sideways instead of upwards \n\t\t\tflex={false}>\n\n\t\t\t<Heading level={3} margin='none'>\n\t\t\t\t<strong>TemporaryAppName</strong>\n\t\t\t</Heading>\n\t\t\t{\n\t\t\t}\n\t\t\t<Box direction=\"row\">\n\t\t\t\t<Menu id='help_button'\n\t\t\t\t\titems={[\n\t\t\t\t\t\t{ label: '1' },\n\t\t\t\t\t\t{ label: '2' },\n\t\t\t\t\t\t{ label: '3' }\n\t\t\t\t\t]}\n\t\t\t\t\ticon={<Icons.Help color='black'/>}\t \n\t\t\t\t\talignSelf='end'/>\n\t\t\t\t<Menu id='user_button'\n\t\t\t\t\titems={\n\t\t\t\t\t\t[{label: 'Log in', onClick: () => {console.log(\"LOG IN REQUESTED\")}}]}\n\t\t\t\t\ticon={<Icons.Apps color='black'/>}/>\n\t\t\t</Box>\n\t\t</Box>\n\t\t);\n\t}\n} \nexport default Navbar; \n","import React, { Component } from 'react'; \nimport { Grommet, grommet, Box, Heading, Menu } from 'grommet';\nimport * as Icons from 'grommet-icons';\nimport { Route, BrowserRouter as Router, Link } from 'react-router-dom'; \nimport Home from './Home'; \nimport Help from './Help';\n\nclass View extends Component { \n\n\tconstructor(props){ \n\t\tsuper(props);\n\t\tthis.state = { \n\t\t\tframe: \"default\",\n\t\t};\n\t}\n\n\trender() { \n\t\treturn(\n\t\t\t<Router>\n\t\t\t\t<Box flex={true} fill={true} direction=\"row\">\n\t\t\t\t\t<Box pad='small' flex={true} background=\"dark-3\"/>\n\t\t\t\t\t<Box pad='small' width='large' flex={true} pad=\"xlarge\" background=\"light-3\"> \n\t\t\t\t\t\t<Route exact path=\"/\" component={Home} />\t\n\t\t\t\t\t\t<Route path='/home' component={Home} /> \n\t\t\t\t\t\t<Route path='/help' component={Help} />\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Box pad='small' flex={true} background=\"dark-3\"/> \n\t\t\t\t</Box>\n\t\t\t</Router> \n\t\t);\t\n\t}\n} \n\nexport default View; \n","import React, { Component } from 'react'; \nimport { Grommet, grommet, Box, Heading, Menu } from 'grommet';\nimport * as Icons from 'grommet-icons';\n  \n\nclass Footer extends Component { \n\trender() { \n\t\treturn(\n\t\t\t<Box \n\t\t\t\ttag='footer'\n\t\t\t\tdirection='row'\n\t\t\t\tflex={false}\n\t\t\t\tbackground='white'\n\t\t\t\tpad='small'\n\t\t\t\tjustify='between'\n\t\t\t\talignContent='end'>\n\t\t\t\t<small>FOOTER</small><small>CONTENT</small>\n\t\t\t</Box>\n\t\t);\n\t}\n}; \n\nexport default Footer; \n","/* FILENAME: App.js\n * DESCRIPTION: This file is where the application is actually \n *\t\t\tput together for the browser. All component calls \n *\t\t\twill be made from here, and the final product \n *\t\t\t(a Component called \"App\") is exported to index.js\n *\t\t\tto be rendered with ReactDOM under 'root'\n*/\nimport React, { Component } from 'react'; \nimport { Grommet, grommet, Box, Heading, Menu } from 'grommet';\nimport * as Icons from 'grommet-icons';\nimport { Router, browserHistory as History } from 'react-router';\nimport routes from './Routes';\nimport Navbar from './components/Navbar.js';\nimport View from './components/View.js';\nimport Footer from './components/Footer.js';\n\n//<!--<Router routes={routes} /> -->\nclass App extends Component { \n\trender() { \n\t\treturn ( \n\t<Grommet theme={grommet} full={true}>\n\t\t<Box alignContent='between' fill={true}>\n\t\t\t<Navbar />\n\t\t\t\t<View>\n\t\t\t\t</View>\t\t\n\t\t\t<Footer />\n\t\t</Box>\n\t</Grommet>\n\t\t);\n\t}\n};\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}