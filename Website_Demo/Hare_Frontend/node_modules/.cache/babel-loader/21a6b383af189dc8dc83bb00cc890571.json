{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { Bar } from './Bar';\nimport { Circle } from './Circle';\n\nvar deriveMax = function deriveMax(values) {\n  var max = 100;\n\n  if (values && values.length > 1) {\n    max = 0;\n    values.forEach(function (v) {\n      max += v.value;\n    });\n  }\n\n  return max;\n};\n\nvar Meter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Meter, _Component);\n\n  function Meter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {});\n\n    return _this;\n  }\n\n  Meter.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var max = prevState.max;\n    var nextMax = deriveMax(nextProps.values);\n\n    if (!max || nextMax !== max) {\n      return {\n        max: nextMax\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = Meter.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        type = _this$props.type,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"type\"]);\n\n    var max = this.state.max;\n    var content;\n\n    if (type === 'bar') {\n      content = React.createElement(Bar, _extends({\n        max: max\n      }, rest));\n    } else if (type === 'circle') {\n      content = React.createElement(Circle, _extends({\n        max: max\n      }, rest));\n    }\n\n    return content;\n  };\n\n  return Meter;\n}(Component);\n\n_defineProperty(Meter, \"defaultProps\", {\n  background: {\n    color: 'light-2',\n    opacity: 'medium'\n  },\n  size: 'medium',\n  thickness: 'medium',\n  type: 'bar'\n});\n\nvar MeterDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  MeterDoc = require('./doc').doc(Meter); // eslint-disable-line global-require\n}\n\nvar MeterWrapper = MeterDoc || Meter;\nexport { MeterWrapper as Meter };","map":null,"metadata":{},"sourceType":"module"}