{"ast":null,"code":"function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { createRef, Component } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { normalizeColor, parseMetricToNum } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { StyledChart } from './StyledChart';\nimport { normalizeValues, normalizeBounds } from './utils';\n\nvar renderBars = function renderBars(values, bounds, scale, height) {\n  return (values || []).map(function (valueArg, index) {\n    var label = valueArg.label,\n        onHover = valueArg.onHover,\n        value = valueArg.value,\n        rest = _objectWithoutPropertiesLoose(valueArg, [\"label\", \"onHover\", \"value\"]);\n\n    var key = \"p-\" + index;\n    var bottom = value.length === 2 ? bounds[1][0] : value[1];\n    var top = value.length === 2 ? value[1] : value[2];\n\n    if (top !== 0) {\n      var d = \"M \" + (value[0] - bounds[0][0]) * scale[0] + \",\" + (\"\" + (height - (bottom - bounds[1][0]) * scale[1])) + (\" L \" + (value[0] - bounds[0][0]) * scale[0] + \",\") + (\"\" + (height - (top - bounds[1][0]) * scale[1]));\n      var hoverProps;\n\n      if (onHover) {\n        hoverProps = {\n          onMouseOver: function onMouseOver() {\n            return onHover(true);\n          },\n          onMouseLeave: function onMouseLeave() {\n            return onHover(false);\n          }\n        };\n      }\n\n      return React.createElement(\"g\", {\n        key: key,\n        fill: \"none\"\n      }, React.createElement(\"title\", null, label), React.createElement(\"path\", _extends({\n        d: d\n      }, hoverProps, rest)));\n    }\n\n    return undefined;\n  });\n};\n\nvar renderLine = function renderLine(values, bounds, scale, height, _ref) {\n  var onClick = _ref.onClick,\n      onHover = _ref.onHover;\n  var d = '';\n  (values || []).forEach(function (_ref2, index) {\n    var value = _ref2.value;\n    d += (index ? ' L' : 'M') + \" \" + (value[0] - bounds[0][0]) * scale[0] + \",\" + (\"\" + (height - (value[1] - bounds[1][0]) * scale[1]));\n  });\n  var hoverProps;\n\n  if (onHover) {\n    hoverProps = {\n      onMouseOver: function onMouseOver() {\n        return onHover(true);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return onHover(false);\n      }\n    };\n  }\n\n  var clickProps;\n\n  if (onClick) {\n    clickProps = {\n      onClick: onClick\n    };\n  }\n\n  return React.createElement(\"g\", {\n    fill: \"none\"\n  }, React.createElement(\"path\", _extends({\n    d: d\n  }, hoverProps, clickProps)));\n};\n\nvar renderArea = function renderArea(values, bounds, scale, height, _ref3) {\n  var color = _ref3.color,\n      onClick = _ref3.onClick,\n      onHover = _ref3.onHover,\n      theme = _ref3.theme;\n  var d = '';\n  (values || []).forEach(function (_ref4, index) {\n    var value = _ref4.value;\n    var top = value.length === 2 ? value[1] : value[2];\n    d += (!index ? 'M' : ' L') + \" \" + (value[0] - bounds[0][0]) * scale[0] + \",\" + (\"\" + (height - (top - bounds[1][0]) * scale[1]));\n  });\n  (values || []).reverse().forEach(function (_ref5) {\n    var value = _ref5.value;\n    var bottom = value.length === 2 ? bounds[1][0] : value[1];\n    d += \" L \" + (value[0] - bounds[0][0]) * scale[0] + \",\" + (\"\" + (height - (bottom - bounds[1][0]) * scale[1]));\n  });\n\n  if (d.length > 0) {\n    d += ' Z';\n  }\n\n  var hoverProps;\n\n  if (onHover) {\n    hoverProps = {\n      onMouseOver: function onMouseOver() {\n        return onHover(true);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return onHover(false);\n      }\n    };\n  }\n\n  var clickProps;\n\n  if (onClick) {\n    clickProps = {\n      onClick: onClick\n    };\n  }\n\n  return React.createElement(\"g\", {\n    fill: normalizeColor(color.color || color, theme)\n  }, React.createElement(\"path\", _extends({\n    d: d\n  }, hoverProps, clickProps)));\n};\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Chart, _Component);\n\n  function Chart() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"containerRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      containerWidth: 0,\n      containerHeight: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onResize\", function () {\n      var containerNode = _this.containerRef.current;\n\n      if (containerNode) {\n        var parentNode = containerNode.parentNode;\n\n        if (parentNode) {\n          var rect = parentNode.getBoundingClientRect();\n\n          _this.setState({\n            containerWidth: rect.width,\n            containerHeight: rect.height\n          });\n        }\n      }\n    });\n\n    return _this;\n  }\n\n  Chart.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var bounds = nextProps.bounds,\n        values = nextProps.values;\n    var stateBounds = prevState.bounds,\n        stateValues = prevState.values;\n\n    if (!stateValues || values !== stateValues || bounds !== stateBounds) {\n      var nextValues = normalizeValues(values);\n      var nextBounds = normalizeBounds(bounds, nextValues);\n      return {\n        bounds: nextBounds,\n        values: nextValues\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = Chart.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    window.addEventListener('resize', this.onResize);\n    this.onResize();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize);\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        color = _this$props.color,\n        onClick = _this$props.onClick,\n        onHover = _this$props.onHover,\n        overflow = _this$props.overflow,\n        round = _this$props.round,\n        size = _this$props.size,\n        theme = _this$props.theme,\n        thickness = _this$props.thickness,\n        type = _this$props.type,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"color\", \"onClick\", \"onHover\", \"overflow\", \"round\", \"size\", \"theme\", \"thickness\", \"type\"]);\n\n    delete rest.values;\n    var _this$state = this.state,\n        bounds = _this$state.bounds,\n        containerWidth = _this$state.containerWidth,\n        containerHeight = _this$state.containerHeight,\n        values = _this$state.values;\n    var sizeWidth = typeof size === 'string' ? size : size.width || 'medium';\n    var sizeHeight = typeof size === 'string' ? size : size.height || 'medium';\n    var width = sizeWidth === 'full' ? containerWidth : parseMetricToNum(theme.global.size[sizeWidth] || sizeWidth);\n    var height = sizeHeight === 'full' ? containerHeight : parseMetricToNum(theme.global.size[sizeHeight] || sizeHeight);\n    var strokeWidth = parseMetricToNum(theme.global.edgeSize[thickness]);\n    var scale = [width / (bounds[0][1] - bounds[0][0]), height / (bounds[1][1] - bounds[1][0])];\n    var viewBox = overflow ? \"0 0 \" + width + \" \" + height : \"-\" + strokeWidth / 2 + \" -\" + strokeWidth / 2 + \" \" + (width + strokeWidth) + \" \" + (height + strokeWidth);\n    var colorName = typeof color === 'object' ? color.color : color;\n    var opacity = color.opacity ? theme.global.opacity[color.opacity] : undefined;\n    var contents;\n\n    if (type === 'bar') {\n      contents = renderBars(values, bounds, scale, height);\n    } else if (type === 'line') {\n      contents = renderLine(values, bounds, scale, height, this.props);\n    } else if (type === 'area') {\n      contents = renderArea(values, bounds, scale, height, this.props);\n    }\n\n    return React.createElement(StyledChart, _extends({\n      ref: this.containerRef,\n      viewBox: viewBox,\n      preserveAspectRatio: \"none\",\n      width: size === 'full' ? '100%' : width,\n      height: size === 'full' ? '100%' : height\n    }, rest), React.createElement(\"g\", {\n      stroke: normalizeColor(colorName, theme),\n      strokeWidth: strokeWidth,\n      strokeLinecap: round ? 'round' : 'butt',\n      strokeLinejoin: round ? 'round' : 'miter',\n      opacity: opacity\n    }, contents));\n  };\n\n  return Chart;\n}(Component);\n\n_defineProperty(Chart, \"defaultProps\", {\n  color: 'accent-1',\n  overflow: false,\n  size: {\n    width: 'medium',\n    height: 'small'\n  },\n  thickness: 'medium',\n  type: 'bar'\n});\n\nObject.setPrototypeOf(Chart.defaultProps, defaultProps);\nvar ChartDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  ChartDoc = require('./doc').doc(Chart); // eslint-disable-line global-require\n}\n\nvar ChartWrapper = compose(withTheme)(ChartDoc || Chart);\nexport { ChartWrapper as Chart };","map":null,"metadata":{},"sourceType":"module"}