{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component, isValidElement } from 'react';\nimport { compose } from 'recompose';\nimport styled, { withTheme } from 'styled-components';\nimport { sizeStyle } from 'grommet-styles';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Drop } from '../Drop';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { withAnnounce, withFocus, withForwardRef } from '../hocs';\nimport { StyledTextInput, StyledTextInputContainer, StyledPlaceholder, StyledSuggestions } from './StyledTextInput';\n\nfunction renderLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    return suggestion.label || suggestion.value;\n  }\n\n  return suggestion;\n}\n\nfunction stringLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    if (suggestion.label && typeof suggestion.label === 'string') {\n      return suggestion.label;\n    }\n\n    return suggestion.value;\n  }\n\n  return suggestion;\n}\n\nvar ContainerBox = styled(Box).withConfig({\n  displayName: \"TextInput__ContainerBox\",\n  componentId: \"sc-1ai0c08-0\"\n})([\"\", \";@media screen and (-ms-high-contrast:active),(-ms-high-contrast:none){width:100%;}\"], function (props) {\n  return props.dropHeight ? sizeStyle('max-height', props.dropHeight, props.theme) : 'max-height: inherit;';\n});\n\nvar TextInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TextInput, _Component);\n\n  function TextInput() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      activeSuggestionIndex: -1,\n      showDrop: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"inputRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"announce\", function (message, mode) {\n      var _this$props = _this.props,\n          announce = _this$props.announce,\n          suggestions = _this$props.suggestions;\n\n      if (suggestions && suggestions.length > 0) {\n        announce(message, mode);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"announceSuggestionsCount\", function () {\n      var _this$props2 = _this.props,\n          suggestions = _this$props2.suggestions,\n          suggestionsCount = _this$props2.messages.suggestionsCount;\n\n      _this.announce(suggestions.length + \" \" + suggestionsCount);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"announceSuggestionsExist\", function () {\n      var suggestionsExist = _this.props.messages.suggestionsExist;\n\n      _this.announce(suggestionsExist);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"announceSuggestionsIsOpen\", function () {\n      var suggestionIsOpen = _this.props.messages.suggestionIsOpen;\n\n      _this.announce(suggestionIsOpen);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"announceSuggestion\", function (index) {\n      var _this$props3 = _this.props,\n          suggestions = _this$props3.suggestions,\n          enterSelect = _this$props3.messages.enterSelect;\n\n      if (suggestions && suggestions.length > 0) {\n        var labelMessage = stringLabel(suggestions[index]);\n\n        _this.announce(labelMessage + \" \" + enterSelect);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"resetSuggestions\", function () {\n      // delay this to avoid re-render interupting event delivery\n      // https://github.com/grommet/grommet/issues/2154\n      // 10ms was chosen empirically based on ie11 using TextInput\n      // with and without a FormField.\n      clearTimeout(_this.resetTimer);\n      _this.resetTimer = setTimeout(function () {\n        var suggestions = _this.props.suggestions;\n\n        if (suggestions && suggestions.length) {\n          _this.setState({\n            activeSuggestionIndex: -1,\n            showDrop: true,\n            selectedSuggestionIndex: -1\n          }, _this.announceSuggestionsCount);\n        }\n      }, 10);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getSelectedSuggestionIndex\", function () {\n      var _this$props4 = _this.props,\n          suggestions = _this$props4.suggestions,\n          value = _this$props4.value;\n      var suggestionValues = suggestions.map(function (suggestion) {\n        if (typeof suggestion === 'object') {\n          return suggestion.value;\n        }\n\n        return suggestion;\n      });\n      return suggestionValues.indexOf(value);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onShowSuggestions\", function () {\n      // Get values of suggestions, so we can highlight selected suggestion\n      var selectedSuggestionIndex = _this.getSelectedSuggestionIndex();\n\n      _this.setState({\n        showDrop: true,\n        activeSuggestionIndex: -1,\n        selectedSuggestionIndex: selectedSuggestionIndex\n      }, _this.announceSuggestionsIsOpen);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onNextSuggestion\", function (event) {\n      var suggestions = _this.props.suggestions;\n      var _this$state = _this.state,\n          activeSuggestionIndex = _this$state.activeSuggestionIndex,\n          showDrop = _this$state.showDrop;\n\n      if (suggestions && suggestions.length > 0) {\n        if (!showDrop) {\n          _this.onShowSuggestions();\n        } else {\n          event.preventDefault();\n          var index = Math.min(activeSuggestionIndex + 1, suggestions.length - 1);\n\n          _this.setState({\n            activeSuggestionIndex: index\n          }, function () {\n            return _this.announceSuggestion(index);\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPreviousSuggestion\", function (event) {\n      var suggestions = _this.props.suggestions;\n      var _this$state2 = _this.state,\n          activeSuggestionIndex = _this$state2.activeSuggestionIndex,\n          showDrop = _this$state2.showDrop;\n\n      if (suggestions && suggestions.length > 0 && showDrop) {\n        event.preventDefault();\n        var index = Math.max(activeSuggestionIndex - 1, 0);\n\n        _this.setState({\n          activeSuggestionIndex: index\n        }, function () {\n          return _this.announceSuggestion(index);\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onClickSuggestion\", function (suggestion) {\n      var _this$props5 = _this.props,\n          forwardRef = _this$props5.forwardRef,\n          onSelect = _this$props5.onSelect;\n\n      _this.setState({\n        showDrop: false\n      });\n\n      if (onSelect) {\n        onSelect({\n          target: (forwardRef || _this.inputRef).current,\n          suggestion: suggestion\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSuggestionSelect\", function (event) {\n      var _this$props6 = _this.props,\n          forwardRef = _this$props6.forwardRef,\n          onSelect = _this$props6.onSelect,\n          suggestions = _this$props6.suggestions;\n      var activeSuggestionIndex = _this.state.activeSuggestionIndex;\n\n      _this.setState({\n        showDrop: false\n      });\n\n      if (activeSuggestionIndex >= 0) {\n        event.preventDefault(); // prevent submitting forms\n\n        var suggestion = suggestions[activeSuggestionIndex];\n\n        if (onSelect) {\n          onSelect({\n            target: (forwardRef || _this.inputRef).current,\n            suggestion: suggestion\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onFocus\", function (event) {\n      var _this$props7 = _this.props,\n          onFocus = _this$props7.onFocus,\n          suggestions = _this$props7.suggestions;\n\n      if (suggestions && suggestions.length > 0) {\n        _this.announceSuggestionsExist();\n      }\n\n      _this.resetSuggestions();\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n      clearTimeout(_this.resetTimer);\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onChange\", function (event) {\n      var onChange = _this.props.onChange;\n\n      _this.resetSuggestions();\n\n      if (onChange) {\n        onChange(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onEsc\", function (event) {\n      // we have to stop both synthetic events and native events\n      // drop and layer should not close by pressing esc on this input\n      event.stopPropagation();\n      event.nativeEvent.stopImmediatePropagation();\n\n      _this.setState({\n        showDrop: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onTab\", function () {\n      _this.setState({\n        showDrop: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderSuggestions\", function () {\n      var _this$props8 = _this.props,\n          suggestions = _this$props8.suggestions,\n          theme = _this$props8.theme;\n      var _this$state3 = _this.state,\n          activeSuggestionIndex = _this$state3.activeSuggestionIndex,\n          selectedSuggestionIndex = _this$state3.selectedSuggestionIndex;\n      return React.createElement(StyledSuggestions, null, React.createElement(InfiniteScroll, {\n        items: suggestions,\n        step: theme.select.step\n      }, function (suggestion, index) {\n        var plain = typeof suggestion === 'object' && typeof isValidElement(suggestion.label);\n        return React.createElement(\"li\", {\n          key: stringLabel(suggestion) + \"-\" + index\n        }, React.createElement(Button, {\n          active: activeSuggestionIndex === index || selectedSuggestionIndex === index,\n          fill: true,\n          hoverIndicator: \"background\",\n          onClick: function onClick() {\n            return _this.onClickSuggestion(suggestion);\n          }\n        }, plain ? renderLabel(suggestion) : React.createElement(Box, {\n          align: \"start\",\n          pad: \"small\"\n        }, renderLabel(suggestion))));\n      }));\n    });\n\n    return _this;\n  }\n\n  TextInput.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var suggestions = nextProps.suggestions;\n    var showDrop = prevState.showDrop;\n\n    if (showDrop && (!suggestions || !suggestions.length)) {\n      return {\n        showDrop: false\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = TextInput.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var _this$props9 = this.props,\n        onSuggestionsOpen = _this$props9.onSuggestionsOpen,\n        onSuggestionsClose = _this$props9.onSuggestionsClose,\n        suggestions = _this$props9.suggestions;\n    var showDrop = this.state.showDrop;\n\n    if (showDrop !== prevState.showDrop) {\n      if (showDrop && onSuggestionsOpen) {\n        onSuggestionsOpen();\n      } else if (onSuggestionsClose) {\n        onSuggestionsClose();\n      }\n    }\n\n    if (!showDrop && suggestions && (!prevProps.suggestions || !prevProps.suggestions.length)) {\n      this.resetSuggestions();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this.resetTimer);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props10 = this.props,\n        defaultValue = _this$props10.defaultValue,\n        dropAlign = _this$props10.dropAlign,\n        dropHeight = _this$props10.dropHeight,\n        dropTarget = _this$props10.dropTarget,\n        forwardRef = _this$props10.forwardRef,\n        id = _this$props10.id,\n        placeholder = _this$props10.placeholder,\n        plain = _this$props10.plain,\n        theme = _this$props10.theme,\n        value = _this$props10.value,\n        onKeyDown = _this$props10.onKeyDown,\n        rest = _objectWithoutPropertiesLoose(_this$props10, [\"defaultValue\", \"dropAlign\", \"dropHeight\", \"dropTarget\", \"forwardRef\", \"id\", \"placeholder\", \"plain\", \"theme\", \"value\", \"onKeyDown\"]);\n\n    delete rest.onChange; // se we can manage in this.onChange()\n\n    delete rest.onSuggestionsOpen;\n    delete rest.onSuggestionsClose;\n    var showDrop = this.state.showDrop; // needed so that styled components does not invoke\n    // onSelect when text input is clicked\n\n    delete rest.onSelect;\n    var drop;\n\n    if (showDrop) {\n      drop = React.createElement(Drop, {\n        id: id ? \"text-input-drop__\" + id : undefined,\n        align: dropAlign,\n        responsive: false,\n        target: dropTarget || (forwardRef || this.inputRef).current,\n        onClickOutside: function onClickOutside() {\n          return _this2.setState({\n            showDrop: false\n          });\n        },\n        onEsc: function onEsc() {\n          return _this2.setState({\n            showDrop: false\n          });\n        }\n      }, React.createElement(ContainerBox, {\n        overflow: \"auto\",\n        dropHeight: dropHeight\n      }, this.renderSuggestions()));\n    }\n\n    return React.createElement(StyledTextInputContainer, {\n      plain: plain\n    }, placeholder && typeof placeholder !== 'string' && !value ? React.createElement(StyledPlaceholder, null, placeholder) : null, React.createElement(Keyboard, {\n      onEnter: this.onSuggestionSelect,\n      onEsc: this.onEsc,\n      onTab: this.onTab,\n      onUp: this.onPreviousSuggestion,\n      onDown: this.onNextSuggestion,\n      onKeyDown: onKeyDown\n    }, React.createElement(StyledTextInput, _extends({\n      id: id,\n      ref: forwardRef || this.inputRef,\n      autoComplete: \"off\",\n      plain: plain,\n      placeholder: typeof placeholder === 'string' ? placeholder : undefined\n    }, rest, {\n      defaultValue: renderLabel(defaultValue),\n      value: renderLabel(value),\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onChange: this.onChange\n    }))), drop);\n  };\n\n  return TextInput;\n}(Component);\n\n_defineProperty(TextInput, \"defaultProps\", {\n  dropAlign: {\n    top: 'bottom',\n    left: 'left'\n  },\n  messages: {\n    enterSelect: '(Press Enter to Select)',\n    suggestionsCount: 'suggestions available',\n    suggestionsExist: 'This input has suggestions use arrow keys to navigate',\n    suggestionIsOpen: 'Suggestions drop is open, continue to use arrow keys to navigate'\n  }\n});\n\nObject.setPrototypeOf(TextInput.defaultProps, defaultProps);\nvar TextInputDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  TextInputDoc = require('./doc').doc(TextInput); // eslint-disable-line global-require\n}\n\nvar TextInputWrapper = compose(withFocus({\n  focusWithMouse: true\n}), withTheme, withAnnounce, withForwardRef)(TextInputDoc || TextInput);\nexport { TextInputWrapper as TextInput };","map":null,"metadata":{},"sourceType":"module"}