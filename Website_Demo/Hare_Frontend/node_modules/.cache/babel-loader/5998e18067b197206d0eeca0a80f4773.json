{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { createRef, Component } from 'react';\nimport { compose } from 'recompose';\nimport { Button } from '../Button';\nimport { Drop } from '../Drop';\nimport { withForwardRef } from '../hocs';\nimport { setFocusWithoutScroll } from '../../utils';\n\nvar DropButton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(DropButton, _Component);\n\n  function DropButton(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"buttonRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDropClose\", function () {\n      var onClose = _this.props.onClose;\n\n      _this.setState({\n        show: false\n      }, function () {\n        if (onClose) {\n          onClose();\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onToggle\", function () {\n      var _this$props = _this.props,\n          onClose = _this$props.onClose,\n          onOpen = _this$props.onOpen;\n      var show = _this.state.show;\n\n      _this.setState({\n        show: !show\n      }, function () {\n        return show ? onClose && onClose() : onOpen && onOpen();\n      });\n    });\n\n    _this.state = {\n      show: props.open || false\n    };\n    return _this;\n  }\n\n  DropButton.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var show = prevState.show;\n    var open = nextProps.open;\n\n    if (open !== undefined && open !== show) {\n      return {\n        show: open\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = DropButton.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var open = this.props.open;\n\n    if (open) {\n      this.forceUpdate();\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var forwardRef = this.props.forwardRef;\n    var show = this.state.show;\n\n    if (!show && prevState.show) {\n      // focus on the button if the drop is closed\n      setFocusWithoutScroll((forwardRef || this.buttonRef).current);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        disabled = _this$props2.disabled,\n        dropAlign = _this$props2.dropAlign,\n        forwardRef = _this$props2.forwardRef,\n        dropContent = _this$props2.dropContent,\n        dropTarget = _this$props2.dropTarget,\n        id = _this$props2.id,\n        open = _this$props2.open,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"disabled\", \"dropAlign\", \"forwardRef\", \"dropContent\", \"dropTarget\", \"id\", \"open\"]);\n\n    var show = this.state.show;\n    delete rest.onClose;\n    delete rest.onOpen;\n    var drop;\n\n    if (show && (forwardRef || this.buttonRef).current) {\n      drop = React.createElement(Drop, {\n        id: id ? id + \"__drop\" : undefined,\n        restrictFocus: true,\n        align: dropAlign,\n        target: dropTarget || (forwardRef || this.buttonRef).current,\n        onClickOutside: this.onDropClose,\n        onEsc: this.onDropClose\n      }, dropContent);\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Button, _extends({\n      id: id,\n      ref: forwardRef || this.buttonRef,\n      disabled: disabled,\n      onClick: this.onToggle\n    }, rest)), drop);\n  };\n\n  return DropButton;\n}(Component);\n\n_defineProperty(DropButton, \"defaultProps\", {\n  a11yTitle: 'Open Drop',\n  dropAlign: {\n    top: 'top',\n    left: 'left'\n  }\n});\n\nvar DropButtonDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  DropButtonDoc = require('./doc').doc(DropButton); // eslint-disable-line global-require\n}\n\nvar DropButtonWrapper = compose(withForwardRef)(DropButtonDoc || DropButton);\nexport { DropButtonWrapper as DropButton };","map":null,"metadata":{},"sourceType":"module"}