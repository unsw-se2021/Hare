{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Keyboard } from '../Keyboard';\nimport { RadioButton } from '../RadioButton';\nimport { withForwardRef } from '../hocs';\n\nvar RadioButtonGroup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(RadioButtonGroup, _Component);\n\n  function RadioButtonGroup() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"optionRefs\", []);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"valueIndex\", function () {\n      var _this$state = _this.state,\n          options = _this$state.options,\n          value = _this$state.value;\n      var result;\n      options.some(function (option, index) {\n        if (option.value === value) {\n          result = index;\n          return true;\n        }\n\n        return false;\n      });\n      return result;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onNext\", function () {\n      var onChange = _this.props.onChange;\n      var options = _this.state.options;\n\n      var valueIndex = _this.valueIndex();\n\n      if (valueIndex !== undefined && valueIndex < options.length - 1) {\n        var nextIndex = valueIndex + 1;\n        var nextValue = options[nextIndex].value;\n\n        _this.setState({\n          value: nextValue\n        }, function () {\n          _this.optionRefs[nextIndex].focus();\n        });\n\n        if (onChange) {\n          onChange({\n            target: {\n              value: nextValue\n            }\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPrevious\", function () {\n      var onChange = _this.props.onChange;\n      var options = _this.state.options;\n\n      var valueIndex = _this.valueIndex();\n\n      if (valueIndex > 0) {\n        var nextIndex = valueIndex - 1;\n        var nextValue = options[nextIndex].value;\n\n        _this.setState({\n          value: nextValue\n        }, function () {\n          _this.optionRefs[nextIndex].focus();\n        });\n\n        if (onChange) {\n          onChange({\n            target: {\n              value: nextValue\n            }\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onFocus\", function () {\n      // Delay just a wee bit so Chrome doesn't missing turning the button on.\n      // Chrome behaves differently in that focus is given to radio buttons\n      // when the user selects one, unlike Safari and Firefox.\n      setTimeout(function () {\n        var focus = _this.state.focus;\n\n        if (!focus) {\n          _this.setState({\n            focus: true\n          });\n        }\n      }, 1);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onBlur\", function () {\n      var focus = _this.state.focus;\n\n      if (focus) {\n        _this.setState({\n          focus: false\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  RadioButtonGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {\n    var options = nextProps.options,\n        value = nextProps.value;\n    return {\n      options: options.map(function (o) {\n        return typeof o === 'string' ? {\n          id: o,\n          label: o,\n          value: o\n        } : o;\n      }),\n      value: value\n    };\n  };\n\n  var _proto = RadioButtonGroup.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        forwardRef = _this$props.forwardRef,\n        name = _this$props.name,\n        onChange = _this$props.onChange,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"forwardRef\", \"name\", \"onChange\"]);\n\n    var _this$state2 = this.state,\n        focus = _this$state2.focus,\n        options = _this$state2.options,\n        selectedValue = _this$state2.value;\n    return React.createElement(Keyboard, {\n      target: \"document\",\n      onUp: focus ? this.onPrevious : undefined,\n      onDown: focus ? this.onNext : undefined,\n      onLeft: focus ? this.onPrevious : undefined,\n      onRight: focus ? this.onNext : undefined\n    }, React.createElement(Box, _extends({\n      ref: forwardRef,\n      gap: \"small\"\n    }, rest), options.map(function (_ref, index) {\n      var disabled = _ref.disabled,\n          id = _ref.id,\n          label = _ref.label,\n          value = _ref.value;\n      return React.createElement(RadioButton, {\n        ref: function ref(_ref2) {\n          _this2.optionRefs[index] = _ref2;\n        },\n        key: value,\n        name: name,\n        label: label,\n        disabled: disabled,\n        checked: value === selectedValue,\n        focus: focus && (value === selectedValue || selectedValue === undefined && !index),\n        id: id,\n        value: value,\n        onChange: onChange,\n        onFocus: _this2.onFocus,\n        onBlur: _this2.onBlur\n      });\n    })));\n  };\n\n  return RadioButtonGroup;\n}(Component);\n\nRadioButtonGroup.defaultProps = {};\nObject.setPrototypeOf(RadioButtonGroup.defaultProps, defaultProps);\nvar RadioButtonGroupDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  RadioButtonGroupDoc = require('./doc').doc(RadioButtonGroup); // eslint-disable-line global-require\n}\n\nvar RadioButtonGroupWrapper = compose(withForwardRef)(RadioButtonGroupDoc || RadioButtonGroup);\nexport { RadioButtonGroupWrapper as RadioButtonGroup };","map":null,"metadata":{},"sourceType":"module"}