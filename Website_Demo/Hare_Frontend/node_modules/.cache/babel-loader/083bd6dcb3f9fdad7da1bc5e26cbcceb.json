{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Children, cloneElement, Component } from 'react';\nimport { compose } from 'recompose';\nimport styled, { withTheme } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { parseMetricToNum } from '../../utils';\nimport { Box } from '../Box';\nimport { CheckBox } from '../CheckBox';\nimport { Text } from '../Text';\nimport { TextInput } from '../TextInput';\nimport { withFocus } from '../hocs';\nimport { FormContext } from '../Form/FormContext';\n\nvar validateField = function validateField(required, validate, messages) {\n  return function (value, data) {\n    var error;\n\n    if (required && (value === undefined || value === '')) {\n      error = messages.required;\n    } else if (validate) {\n      if (typeof validate === 'function') {\n        error = validate(value, data);\n      } else if (validate.regexp) {\n        if (!validate.regexp.test(value)) {\n          error = validate.message || messages.invalid;\n        }\n      }\n    }\n\n    return error;\n  };\n};\n\nvar FormFieldBox = styled(Box).withConfig({\n  displayName: \"FormField__FormFieldBox\",\n  componentId: \"m9hood-0\"\n})([\"\", \"\"], function (props) {\n  return props.theme.formField.extend;\n});\n\nvar FormField =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(FormField, _Component);\n\n  function FormField() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderChildren\", function (value, update) {\n      var _this$props = _this.props,\n          name = _this$props.name,\n          component = _this$props.component,\n          required = _this$props.required,\n          rest = _objectWithoutPropertiesLoose(_this$props, [\"name\", \"component\", \"required\"]);\n\n      delete rest.className;\n      var Input = component || TextInput;\n\n      if (Input === CheckBox) {\n        return React.createElement(Input, _extends({\n          name: name,\n          checked: value[name] || false,\n          onChange: function onChange(event) {\n            return update(name, event.target.checked);\n          }\n        }, rest));\n      }\n\n      return React.createElement(Input, _extends({\n        name: name,\n        value: value[name] || '',\n        onChange: function onChange(event) {\n          return update(name, event.value || event.target.value);\n        },\n        plain: true,\n        focusIndicator: false\n      }, rest));\n    });\n\n    return _this;\n  }\n\n  var _proto = FormField.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        className = _this$props2.className,\n        component = _this$props2.component,\n        error = _this$props2.error,\n        focus = _this$props2.focus,\n        help = _this$props2.help,\n        htmlFor = _this$props2.htmlFor,\n        label = _this$props2.label,\n        name = _this$props2.name,\n        pad = _this$props2.pad,\n        required = _this$props2.required,\n        style = _this$props2.style,\n        theme = _this$props2.theme,\n        validate = _this$props2.validate,\n        onBlur = _this$props2.onBlur,\n        onFocus = _this$props2.onFocus;\n    var formField = theme.formField;\n    var border = formField.border;\n    return React.createElement(FormContext.Consumer, null, function (context) {\n      var normalizedError = error;\n      var contents = children;\n\n      if (context) {\n        var addValidation = context.addValidation,\n            errors = context.errors,\n            value = context.value,\n            update = context.update,\n            messages = context.messages;\n        addValidation(name, validateField(required, validate, messages));\n        normalizedError = error || errors[name];\n        contents = children || _this2.renderChildren(value, update);\n      }\n\n      if (pad) {\n        contents = React.createElement(Box, formField.content, contents);\n      }\n\n      var borderColor;\n\n      if (focus && !normalizedError) {\n        borderColor = 'focus';\n      } else if (normalizedError) {\n        borderColor = border && border.error.color || 'status-critical';\n      } else {\n        borderColor = border && border.color || 'border';\n      }\n\n      var abut;\n      var outerStyle = style;\n\n      if (border) {\n        var normalizedChildren = children ? Children.map(children, function (child) {\n          if (child) {\n            return cloneElement(child, {\n              plain: true,\n              focusIndicator: false,\n              onBlur: onBlur,\n              onFocus: onFocus\n            });\n          }\n\n          return child;\n        }) : contents;\n        contents = React.createElement(Box, {\n          ref: function ref(_ref) {\n            _this2.childContainerRef = _ref;\n          },\n          border: border.position === 'inner' ? _extends({}, border, {\n            side: border.side || 'bottom',\n            color: borderColor\n          }) : undefined\n        }, normalizedChildren);\n        abut = border.position === 'outer' && (border.side === 'all' || border.side === 'horizontal' || !border.side);\n\n        if (abut) {\n          // marginBottom is set to overlap adjacent fields\n          var marginBottom = '-1px';\n\n          if (border.size) {\n            marginBottom = \"-\" + parseMetricToNum(theme.global.borderSize[border.size]) + \"px\";\n          }\n\n          outerStyle = _extends({\n            position: focus ? 'relative' : undefined,\n            marginBottom: marginBottom,\n            zIndex: focus ? 10 : undefined\n          }, style);\n        }\n      }\n\n      return React.createElement(FormFieldBox, {\n        className: className,\n        border: border && border.position === 'outer' ? _extends({}, border, {\n          color: borderColor\n        }) : undefined,\n        margin: abut ? undefined : _extends({}, formField.margin),\n        style: outerStyle\n      }, label && component !== CheckBox || help ? React.createElement(React.Fragment, null, label && component !== CheckBox && React.createElement(Text, _extends({\n        as: \"label\",\n        htmlFor: htmlFor\n      }, formField.label), label), help && React.createElement(Text, _extends({}, formField.help, {\n        color: formField.help.color[theme.dark ? 'dark' : 'light']\n      }), help)) : undefined, contents, normalizedError && React.createElement(Text, _extends({}, formField.error, {\n        color: formField.error.color[theme.dark ? 'dark' : 'light']\n      }), normalizedError));\n    });\n  };\n\n  return FormField;\n}(Component);\n\nFormField.defaultProps = {};\nObject.setPrototypeOf(FormField.defaultProps, defaultProps);\nvar FormFieldDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  FormFieldDoc = require('./doc').doc(FormField); // eslint-disable-line global-require\n}\n\nvar FormFieldWrapper = compose(withFocus({\n  focusWithMouse: true\n}), withTheme)(FormFieldDoc || FormField);\nexport { FormFieldWrapper as FormField };","map":null,"metadata":{},"sourceType":"module"}