{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component, Children } from 'react';\nimport { Box } from '../Box';\nimport { AccordionContext } from './AccordionContext';\n\nvar activeAsArray = function activeAsArray(active) {\n  return typeof active === 'number' ? [active] : active;\n};\n\nvar Accordion =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Accordion, _Component);\n\n  function Accordion() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      activeIndexes: []\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPanelChange\", function (index) {\n      var activeIndexes = _this.state.activeIndexes;\n      var nextActiveIndexes = [].concat(activeIndexes || []);\n      var _this$props = _this.props,\n          onActive = _this$props.onActive,\n          multiple = _this$props.multiple;\n      var activeIndex = nextActiveIndexes.indexOf(index);\n\n      if (activeIndex > -1) {\n        nextActiveIndexes.splice(activeIndex, 1);\n      } else if (multiple) {\n        nextActiveIndexes.push(index);\n      } else {\n        nextActiveIndexes = [index];\n      }\n\n      _this.setState({\n        activeIndexes: nextActiveIndexes\n      }, function () {\n        if (onActive) {\n          onActive(nextActiveIndexes);\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  Accordion.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var activeIndex = nextProps.activeIndex;\n    var stateActiveIndexes = prevState.activeIndexes,\n        stateActiveIndex = prevState.activeIndex;\n    var activeIndexes = activeAsArray(activeIndex) || [];\n\n    if ((typeof activeIndex !== 'undefined' || activeIndex !== stateActiveIndex) && activeIndexes.join() !== stateActiveIndexes.join()) {\n      return {\n        activeIndexes: activeIndexes,\n        activeIndex: activeIndex\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = Accordion.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        animate = _this$props2.animate,\n        children = _this$props2.children,\n        messages = _this$props2.messages,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"animate\", \"children\", \"messages\"]);\n\n    var activeIndexes = this.state.activeIndexes;\n    delete rest.onActive;\n    return React.createElement(Box, _extends({\n      role: \"tablist\"\n    }, rest), Children.toArray(children).map(function (panel, index) {\n      return React.createElement(AccordionContext.Provider, {\n        key: \"accordion-panel_\" + (index + 0),\n        value: {\n          active: activeIndexes.indexOf(index) > -1,\n          animate: animate,\n          messages: messages,\n          onPanelChange: function onPanelChange() {\n            return _this2.onPanelChange(index);\n          }\n        }\n      }, panel);\n    }));\n  };\n\n  return Accordion;\n}(Component);\n\n_defineProperty(Accordion, \"defaultProps\", {\n  animate: true,\n  messages: {\n    tabContents: 'Tab Contents'\n  }\n});\n\nvar AccordionDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  AccordionDoc = require('./doc').doc(Accordion); // eslint-disable-line global-require\n}\n\nvar AccordionWrapper = AccordionDoc || Accordion;\nexport { AccordionWrapper as Accordion };","map":null,"metadata":{},"sourceType":"module"}