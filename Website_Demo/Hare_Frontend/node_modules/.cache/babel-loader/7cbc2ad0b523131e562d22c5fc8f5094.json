{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React, { cloneElement, Component } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { normalizeColor } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { withFocus, withForwardRef } from '../hocs';\nimport { StyledAnchor } from './StyledAnchor';\n\nvar Anchor =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Anchor, _Component);\n\n  function Anchor(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    var children = props.children,\n        icon = props.icon,\n        label = props.label;\n\n    if ((icon || label) && children) {\n      console.warn('Anchor should not have children if icon or label is provided');\n    }\n\n    return _this;\n  }\n\n  var _proto = Anchor.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        a11yTitle = _this$props.a11yTitle,\n        children = _this$props.children,\n        color = _this$props.color,\n        disabled = _this$props.disabled,\n        forwardRef = _this$props.forwardRef,\n        href = _this$props.href,\n        icon = _this$props.icon,\n        focus = _this$props.focus,\n        label = _this$props.label,\n        onClick = _this$props.onClick,\n        reverse = _this$props.reverse,\n        theme = _this$props.theme,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"a11yTitle\", \"children\", \"color\", \"disabled\", \"forwardRef\", \"href\", \"icon\", \"focus\", \"label\", \"onClick\", \"reverse\", \"theme\"]);\n\n    var coloredIcon = icon;\n\n    if (icon && !icon.props.color) {\n      coloredIcon = cloneElement(icon, {\n        color: normalizeColor(color || theme.anchor.color, theme)\n      });\n    }\n\n    var first = reverse ? label : coloredIcon;\n    var second = reverse ? coloredIcon : label;\n    return React.createElement(StyledAnchor, _extends({}, rest, {\n      ref: forwardRef,\n      \"aria-label\": a11yTitle,\n      colorProp: color,\n      disabled: disabled,\n      hasIcon: !!icon,\n      focus: focus,\n      hasLabel: label,\n      reverse: reverse,\n      href: !disabled ? href : undefined,\n      onClick: !disabled ? onClick : undefined\n    }), first && second ? React.createElement(Box, {\n      as: \"span\",\n      direction: \"row\",\n      align: \"center\",\n      gap: \"small\",\n      style: {\n        display: 'inline-flex'\n      }\n    }, first, second) : first || second || children);\n  };\n\n  return Anchor;\n}(Component);\n\nAnchor.defaultProps = {};\nObject.setPrototypeOf(Anchor.defaultProps, defaultProps);\nvar AnchorDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  AnchorDoc = require('./doc').doc(Anchor); // eslint-disable-line global-require\n}\n\nvar AnchorWrapper = compose(withFocus(), withTheme, withForwardRef)(AnchorDoc || Anchor);\nexport { AnchorWrapper as Anchor };","map":null,"metadata":{},"sourceType":"module"}