{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { createRef, Component } from 'react';\nimport styled from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { ThemeContext } from '../../contexts';\nimport { FocusedContainer } from '../FocusedContainer';\nimport { Keyboard } from '../Keyboard';\nimport { backgroundIsDark } from '../../utils';\nimport { StyledLayer, StyledContainer, StyledOverlay } from './StyledLayer';\nvar HiddenAnchor = styled.a.withConfig({\n  displayName: \"LayerContainer__HiddenAnchor\",\n  componentId: \"sc-1srj14c-0\"\n})([\"width:0;height:0;overflow:hidden;position:absolute;\"]);\n\nvar LayerContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(LayerContainer, _Component);\n\n  function LayerContainer() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"anchorRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"containerRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"layerRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"makeLayerVisible\", function () {\n      var node = _this.layerRef.current || _this.containerRef.current;\n\n      if (node && node.scrollIntoView) {\n        node.scrollIntoView();\n      }\n    });\n\n    return _this;\n  }\n\n  var _proto = LayerContainer.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var position = this.props.position;\n\n    if (position !== 'hidden') {\n      this.makeLayerVisible(); // once layer is open we set the focus in the hidden\n      // anchor so that you can start tabbing inside the layer\n\n      if (this.anchorRef.current) {\n        this.anchorRef.current.focus();\n      }\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var position = this.props.position;\n\n    if (prevProps.position !== position && position !== 'hidden') {\n      this.makeLayerVisible();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        id = _this$props.id,\n        modal = _this$props.modal,\n        onClickOutside = _this$props.onClickOutside,\n        onEsc = _this$props.onEsc,\n        plain = _this$props.plain,\n        position = _this$props.position,\n        responsive = _this$props.responsive,\n        propsTheme = _this$props.theme,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"id\", \"modal\", \"onClickOutside\", \"onEsc\", \"plain\", \"position\", \"responsive\", \"theme\"]);\n\n    var theme = this.context || propsTheme;\n    var content = React.createElement(StyledContainer, _extends({\n      id: id\n    }, rest, {\n      position: position,\n      plain: plain,\n      responsive: responsive,\n      ref: this.containerRef\n    }), React.createElement(HiddenAnchor, {\n      ref: this.anchorRef,\n      tabIndex: \"-1\",\n      \"aria-hidden\": \"true\"\n    }), children);\n\n    if (modal) {\n      content = React.createElement(StyledLayer, {\n        id: id,\n        plain: plain,\n        position: position,\n        responsive: responsive,\n        tabIndex: \"-1\",\n        ref: this.layerRef\n      }, React.createElement(StyledOverlay, {\n        plain: plain,\n        onMouseDown: onClickOutside,\n        responsive: responsive\n      }), content);\n      /* eslint-enable jsx-a11y/anchor-is-valid, jsx-a11y/anchor-has-content */\n    }\n\n    if (onEsc) {\n      content = React.createElement(Keyboard, {\n        onEsc: onEsc\n      }, content);\n    }\n\n    if (theme.layer.background) {\n      var dark = backgroundIsDark(theme.layer.background, theme);\n\n      if (dark !== theme.dark) {\n        content = React.createElement(ThemeContext.Provider, {\n          value: _extends({}, theme, {\n            dark: dark\n          })\n        }, content);\n      }\n    }\n\n    if (modal) {\n      content = React.createElement(FocusedContainer, {\n        hidden: position === 'hidden',\n        restrictScroll: true\n      }, content);\n    }\n\n    return content;\n  };\n\n  return LayerContainer;\n}(Component);\n\n_defineProperty(LayerContainer, \"contextType\", ThemeContext);\n\n_defineProperty(LayerContainer, \"defaultProps\", {\n  full: false,\n  margin: 'none',\n  modal: true,\n  position: 'center'\n});\n\nObject.setPrototypeOf(LayerContainer.defaultProps, defaultProps);\nexport { LayerContainer };","map":null,"metadata":{},"sourceType":"module"}