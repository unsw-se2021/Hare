{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Clock) {\n  var DocumentedClock = describe(Clock).availableAt(getAvailableAtBadge('Clock')).description('A clock with timezone awareness.').usage(\"import { Clock } from 'grommet';\\n<Clock />\").intrinsicElement(['div', 'svg']);\n  DocumentedClock.propTypes = _extends({}, genericProps, {\n    hourLimit: PropTypes.oneOf([12, 24, '12', '24']).description('Whether to roll over the hours after 12 or after 24.').defaultValue(24),\n    onChange: PropTypes.func.description(\"If the clock is running, this function will be called with the\\n      current time value each time it changes.\"),\n    precision: PropTypes.oneOf(['hours', 'minutes', 'seconds']).description('How precise a time to represent.').defaultValue('seconds'),\n    run: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['backward', 'forward'])]).description(\"Whether the clock should actively adjust time or be fixed to the\\n      time specified. 'backward' could be used as a countdown timer.\").defaultValue('forward'),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('Clock size').defaultValue('medium'),\n    time: PropTypes.string.description(\"ISO8601 time or duration. For example: 'PT8H12M23S',\\n      'T08:12:23', or '2015-02-22T08:12:23'. Any included date\\n      portion will be ignored for an analog clock. If not provided, the\\n      current browser time will be used.\"),\n    type: PropTypes.oneOf(['analog', 'digital']).description('What type of visualization to show.').defaultValue('analog')\n  });\n  return DocumentedClock;\n};","map":null,"metadata":{},"sourceType":"module"}