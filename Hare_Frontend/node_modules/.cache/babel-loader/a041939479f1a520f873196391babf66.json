{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport { withFocus, withForwardRef } from '../hocs';\nimport { StyledRangeInput } from './StyledRangeInput';\n\nvar RangeInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(RangeInput, _Component);\n\n  function RangeInput() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = RangeInput.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        forwardRef = _this$props.forwardRef,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"forwardRef\"]);\n\n    return React.createElement(StyledRangeInput, _extends({}, rest, {\n      ref: forwardRef,\n      type: \"range\"\n    }));\n  };\n\n  return RangeInput;\n}(Component);\n\nvar RangeInputDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  RangeInputDoc = require('./doc').doc(RangeInput); // eslint-disable-line global-require\n}\n\nvar RangeInputWrapper = compose(withFocus(), withForwardRef)(RangeInputDoc || RangeInput);\nexport { RangeInputWrapper as RangeInput };","map":null,"metadata":{},"sourceType":"module"}