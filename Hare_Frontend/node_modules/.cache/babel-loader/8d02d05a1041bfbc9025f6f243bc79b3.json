{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { colorPropType, genericProps, getAvailableAtBadge, themeDocUtils } from '../../utils';\nexport var doc = function doc(Button) {\n  var DocumentedButton = describe(Button).availableAt(getAvailableAtBadge('Button')).description('A button.').details(\"You can provide a single function child that will be called with\\n      'hover' and 'focus' keys. This allows you to customize the rendering\\n      of the Button in those cases.\").usage(\"import { Button } from 'grommet';\\n<Button primary={true} label='Label' />\").intrinsicElement('button');\n  DocumentedButton.propTypes = _extends({}, genericProps, {\n    active: PropTypes.bool.description('Whether the button is active.').defaultValue(false),\n    color: colorPropType.description('Fill color for primary, border color otherwise.'),\n    disabled: PropTypes.bool.description('Whether the button is disabled.').defaultValue(false),\n    fill: PropTypes.bool.description('Whether the button expands to fill all of the available width and height.').defaultValue(false),\n    focusIndicator: PropTypes.bool.description(\"Whether when 'plain' it should receive a focus outline.\").defaultValue(true),\n    hoverIndicator: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.oneOf(['background']), PropTypes.shape({\n      background: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\n    })]).description(\"The hover indicator to apply when the user is mousing over the\\nbutton. An object can be also be specified for color index support:\\n{background: 'neutral-2'}. This prop is meant to be used only\\nwith plain Buttons.\").defaultValue(false),\n    href: PropTypes.string.description('If specified, the button will behave like an anchor tag.'),\n    icon: PropTypes.element.description('Icon element to place in the button.'),\n    label: PropTypes.node.description('Label text to place in the button.'),\n    onClick: PropTypes.func.description(\"Click handler. Not setting this property and not specifying a href\\ncauses the Button to be disabled.\"),\n    plain: PropTypes.bool.description('Whether this is a plain button with no border or padding.').defaultValue(false),\n    primary: PropTypes.bool.description('Whether this is a primary button. There should be at most one per page or screen.').defaultValue(false),\n    reverse: PropTypes.bool.description(\"Whether an icon and label should be reversed so that the icon is at the\\nend of the anchor.\").defaultValue(false),\n    type: PropTypes.oneOf(['button', 'reset', 'submit']).description('The type of button. Set the type to submit for the default button on forms.').defaultValue('button'),\n    as: PropTypes.string.description(\"The DOM tag to use for the element.\")\n  });\n  return DocumentedButton;\n};\nexport var themeDoc = _extends({\n  'global.hover.color': {\n    description: 'The background color when hovering.',\n    type: 'string',\n    defaultValue: \"{ dark: 'white', light: 'black' }\"\n  },\n  'global.edgeSize.small': {\n    description: 'The padding around an icon-only button.',\n    type: 'string',\n    defaultValue: '12px'\n  },\n  'text.medium.size': {\n    description: 'The font size of the text label.',\n    type: 'string',\n    defaultValue: '18px'\n  },\n  'text.medium.height': {\n    description: 'The line height of the text label.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'button.border.color': {\n    description: \"The color of the border.\",\n    type: 'string | { dark: string, light: string }'\n  },\n  'button.border.radius': {\n    description: 'The corner radius.',\n    type: 'string',\n    defaultValue: '18px'\n  },\n  'button.border.width': {\n    description: 'The border width.',\n    type: 'string',\n    defaultValue: '2px'\n  },\n  'button.color': {\n    description: \"The color of the text label.\",\n    type: 'string | { dark: string, light: string }'\n  },\n  'button.primary.color': {\n    description: \"The color of the background for primary buttons.\",\n    type: 'string | { dark: string, light: string }'\n  },\n  'button.disabled.opacity': {\n    description: 'The opacity when the button is disabled.',\n    type: 'number',\n    defaultValue: 0.3\n  },\n  'button.minWidth': {\n    description: \"The minimum width.\",\n    type: 'string',\n    defaultValue: '96px'\n  },\n  'button.maxWidth': {\n    description: \"The maximum width.\",\n    type: 'string',\n    defaultValue: '384px'\n  },\n  'button.padding.horizontal': {\n    description: 'The horizontal padding.',\n    type: 'string',\n    defaultValue: '22px'\n  },\n  'button.padding.vertical': {\n    description: 'The vertical padding.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'button.extend': {\n    description: 'Any additional style for the Button.',\n    type: 'string | (props) => {}'\n  }\n}, themeDocUtils.focusStyle);","map":null,"metadata":{},"sourceType":"module"}