{"ast":null,"code":"import _classCallCheck from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/src/components/Product.js\";\nimport React, { Component } from 'react';\nimport { Grommet, DataTable, grommet, Meter, TextInput, DropButton, Button, Box, Heading, Menu, Paragraph, Carousel, Accordion, AccordionPanel, Text, Image, Distribution, Layer } from 'grommet';\nimport * as Icons from 'grommet-icons';\nimport { withRouter, Redirect, Route, Link, Router, BrowserRouter } from 'react-router-dom';\nimport Style from './styles/Style';\nimport Colors from './styles/Color';\nimport AuthService from './actions/AuthService';\nimport UserService from './actions/UserService';\nimport ScanService from './actions/ScanService';\n/* \n\nclass TextInputBar extends Component {\n\tstate = { value: \"\" };\n\n\tref = React.createRef();\n\tonChange = event => { \n\t\tthis.setState({ value: event.target.value })\n\t};\n\n\tsetName = (name) => this.props.onSet(name); \n\n\trender() {\n\t\tconst { value } = this.state;\n\t\treturn (\n\t\t\t<Box width=\"medium\">\n\t\t\t\t<TextInput ref={this.ref} value={value} onChange={this.onChange} />\n\t\t\t</Box>\n\t\t);\n\t}\n}\n\nclass SaveModal extends Component {\n\n\tconstructor(props){ \n\t\tsuper(props); \n\t\tthis.state = {}; \n\t\tthis.state.savedName = undefined; \n\t\tthis.state.savedID = this.props.productID; \n\t}\n\n\tonOpen = () => this.setState({ open: true });\n\tonClose = () => this.setState({ open: undefined });\n\n\tupdateName = (name) => { \n\t\tthis.setState({savedName: name});\n\t}\n\n\tsendSave = () => {\n\t\tUserService.saveProduct(this.state.savedName, this.state.savedID).then(res => { \n\t\t\tthis.onClose();\n\t\t})\n\t}\n\n\trenderModal = () => { \n\t\treturn(\n\t\t\t<Layer position=\"center\" modal onClickOutside={this.onClose} onEsc={this.onClose}>\n\t\t\t\t<Box direction=\"column\" pad=\"medium\" gap=\"medium\">\n\t\t\t\t\t<Box direction=\"row\" justify=\"between\">\n\t\t\t\t\t\t<Text size=\"24pt\" color={Colors.dark3}> Save Scan Results</Text>\n\t\t\t\t\t\t<Button icon={<Icons.Close color={Colors.dark3} />} onClick={this.onClose}/>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Text>Save as: </Text> \n\t\t\t\t\t<TextInputBar onSet={this.updateName}/>\n\t\t\t\t\t<Button color={Colors.primary} label={<Text color={Colors.primary}>Submit</Text>} onClick={this.sendSave}/>\n\t\t\t\t</Box>\n\t\t\t</Layer>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { open } = this.state;\n\t\treturn (\t\t\t\n\t\t\t<div>\n\t\t\t\t<Button icon={<Icons.Save size=\"large\" color={Colors.dark3}/>}  onClick={this.onOpen}  plain/>\n\t\t\t\t{ open && this.renderModal()}\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nclass IngredientModal extends Component {\n\n\tstate = {}; \n\n\tcomponentDidMount() { \n\t\tlet data = this.getIngredientData(); \n\t\tthis.setState({ ingredientname: data.name, ingredientdesc: data.desc});\n\t} \n\n\tgetIngredientData = () => { \n\t\treturn this.props.ingredient; \t\n\t}\n\n\tgetColor = () => {\n\t\tif(this.props.color != undefined) {\n\t\t\treturn this.props.color; \n\t\t} else { \n\t\t\treturn;\n\t\t}\t\n\t} \n\n\tonOpen = () => this.setState({ open: true });\n\tonClose = () => this.setState({ open: undefined });\n\n\trenderModal = () => { \n\t\treturn(\n\t\t\t<Layer position=\"center\" modal onClickOutside={this.onClose} onEsc={this.onClose}>\n\t\t\t\t<Box direction=\"row\" pad={{ left: 'medium', right: 'medium', top: 'medium'}} justify=\"between\">\n\t\t\t\t\t<Text size=\"24pt\" color={Colors.dark3}> Ingredient: {this.state.ingredientname}</Text>\n\t\t\t\t\t<Button icon={<Icons.Close color={Colors.dark3} />} onClick={this.onClose}/>\n\t\t\t\t</Box>\n\t\t\t\t<Box pad=\"medium\"> \n\t\t\t\t\t<Text size=\"12pt\" > {this.state.ingredientdesc}</Text> \n\t\t\t\t</Box> \n\t\t\t</Layer>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { open } = this.state;\n\t\treturn (\t\t\t\n\t\t\t<Box>\n\t\t\t\t<Button label={<Text size=\"10pt\"  color={this.getColor()}>{`${this.state.ingredientname}, `}</Text>}  onClick={this.onOpen} plain />\n\t\t\t\t{ open && this.renderModal()}\n\t\t\t</Box>\n\t\t);\n\t}\n\n}\n\nconst renderIngredientIcon = (preferences, ingredientlist) => { \n\tlet ingredientbuttons = []; \n\tlet pref_colors = {\n\t\t0: \"\", \n\t\t1: \"red\",\n\t\t2: \"blue\", \n\t\t3: \"green\", \n\t\t4: \"purple\", \n\t\t5: \"#33D1FF\", \n\t} \n\tlet match = false;\n\tlet color = \"\";\n\tlet col_index = 0; \n\tingredientlist.forEach(function (item) {\n\t\tif(preferences != null ) {\n\t\t\tmatch = false; \n\t\t\tObject.keys(preferences.special).forEach(function(key, index) {\n\t\t\t\tif(preferences.special[key].name == item.name) { \n\t\t\t\t\tmatch = true;\n\t\t\t\t\tcol_index = preferences.special[index].color;\n\t\t\t\t\tcolor = pref_colors[col_index]; \n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif(match == true) { \n\t\t\t\tingredientbuttons.push(<IngredientModal ingredient={item} color={color} />); \n\t\t\t} else {\n\t\t\t\tingredientbuttons.push(<IngredientModal ingredient={item} />); \n\t\t\t}\n\t\t} else { \n\t\t\tingredientbuttons.push(<IngredientModal ingredient={item} />);\n\t\t} \n\t});\n\n\treturn(\n\t\t<div>\n\t\t\t{ingredientbuttons}\n\t\t</div> \n\t); \n} \n\nclass ProductPage extends Component { \n\n\tconstructor(props) {  \n\t\tsuper(props); \n\t\t\n\t\t// Authentication values \n\t\tlet authval = AuthService.hasAuthKey(); \n\t\tthis.state = {}; \n\t\tthis.state.auth = authval;\n\t\t\n\t\t// If logged in, get prefs \n\t\tif(authval == true) { \n\t\t\t// Update preferences, then get userdata. \n\t\t\tAuthService.setAuthKey(localStorage.getItem('auth'));\n\t\t\tthis.state.userdata = JSON.parse(localStorage.getItem('userdata'));\n\t\t} else { \n\t\t\tthis.state.userdata = undefined; \n\t\t}\n\n\t\t// Get product data from LS \n\t\tlet idnum = this.props.location.pathname; \n\t\tidnum = idnum.split(\"/\");\n\t\tidnum = idnum[2];\n\t\tthis.state.product_id = idnum; \n\t\t\tthis.state.productpage = JSON.parse(localStorage.getItem(this.state.product_id));\n\t\t\tif(this.state.productpage == null || this.state.productpage === undefined) { \n\t\t\t\tthis.props.history.push('/404');\n\t\t\t}\n\n\t} \n\n\tgetImageB64 = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t}\n\t\tconst obj = this.state.productpage; \n\t\tconst binary = obj.img_url; \n\t\treturn binary; \n\t} \n\n\trenderIngredientsNormally = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t}\n\t\tconst obj = this.state.productpage; \n\t\tlet ingredients = obj.contents; \n\t\tlet panels = []; \n\t\tObject.keys(ingredients).forEach(function(key,index) {\n\t\t\tif(ingredients[key].length != 0 && key != null) { \n\t\t\t\tpanels.push( \n\t\t\t\t\t(\n\t\t\t\t\t\t<AccordionPanel label={key}>\n\t\t\t\t\t\t\t{renderIngredientIcon(null, ingredients[key])}  \n\t\t\t\t\t\t</AccordionPanel> \n\t\t\t\t\t)\n\t\t\t\t) \n\t\t\t} \n\t\t});\n\n\t\treturn( \n\t\t\t<Accordion> \n\t\t\t\t{panels}\t\n\t\t\t</Accordion> \n\t\t); \n\t} \n\n\trenderIngredientsPreferenced = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t} \n\t\tconst product_obj = this.state.productpage; \n\t\tconst userdata = this.state.userdata;\n\t\tlet ingredients = product_obj.contents;\n\t\tlet panels = []; \n\n\t\tObject.keys(ingredients).forEach(function(key, index) { \n\t\t\tif(ingredients[key].length != 0 && key != null) { \n\t\t\t\tpanels.push( \n\t\t\t\t\t<AccordionPanel label={key}> \n\t\t\t\t\t\t{renderIngredientIcon(userdata.preferences, ingredients[key])} \n\t\t\t\t\t</AccordionPanel> \n\t\t\t\t); \n\t\t\t} \n\t\t}); \n\n\t\treturn( \n\t\t\t<Accordion>\t\t\n\t\t\t\t{panels} \n\t\t\t</Accordion> \n\t\t); \n\t} \n\n\trenderDistribution = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t}\n\t\tlet dist_content = [];\n\t\tconst obj = this.state.productpage; \n\t\tlet ingredients = obj.contents;\n\t\tlet max = 0; \n\t\tObject.keys(ingredients).forEach(function(key,index) {\n\t\t\tlet curr_obj = {}; \n\t\t\tif(ingredients[key].length != 0 && key != null) { \n\t\t\t\tcurr_obj = { value: Number(ingredients[key].length), label: String(key) };\n\t\t\t\tdist_content.push(curr_obj);\n\t\t\t\tmax += ingredients[key].length; \n\t\t\t} \n\t\t});\n\t\tdist_content.sort(); \n\n\t\treturn( \n\t\t\t<Box width=\"400px\" > \n\t\t\t\t<Distribution width=\"400px\" values={dist_content}> \n\t\t\t\t{ value => (\n\t\t\t\t\t<Box pad=\"small\" background={Colors.primary} fill>\n\t\t\t\t\t\t<Text size=\"12pt\" color={Colors.grey3}>{value.value} {value.label}</Text>\n\t\t\t\t\t</Box>\n\t\t\t\t)}  \n\t\t\t</Distribution>\n\t\t</Box> \n\t\t);\n\t} \n\n\trenderProductPage = () => {\n\t\treturn( \n\t\t\t<Box direction=\"column\" pad=\"medium\" align=\"center\" width=\"625px\" fill>\n\t\t\t\t<Box direction=\"row\" gap=\"medium\" justify=\"between\"> \n\t\t\t\t\t<Carousel pad=\"medium\">\n\t\t\t\t\t\t<img alt=\"Image not found\" src={`${this.getImageB64()}`} height=\"200px\" width=\"200px\"/>\n\t\t\t\t\t</Carousel>\n\t\t\t\t\t{this.renderDistribution()}\n\t\t\t\t</Box>\n\n\t\t\t\t<Box margin=\"medium\"  width=\"625px\">\n\t\t\t\t\t{eval(this.state.auth) ? (this.renderIngredientsPreferenced()): ( this.renderIngredientsNormally() )}\n\t\t\t\t</Box>\n\t\t\t</Box> \n\t\t); \n\t} \n\n\n\n\n\t}\n} \n\n*/\n// ---------------------------------// ---------------------------------// ---------------------------------\n// ---------------------------------// ---------------------------------// ---------------------------------\n\nvar ProductPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProductPage, _Component);\n\n  // All necessary states and data declared here\n  function ProductPage(props) {\n    var _this;\n\n    _classCallCheck(this, ProductPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProductPage).call(this, props));\n\n    _this.loadingScreen = function () {\n      if (_this.state.loaderr !== undefined) {\n        return React.createElement(Box, {\n          align: \"center\",\n          gap: \"small\",\n          fill: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 385\n          },\n          __self: this\n        }, React.createElement(Box, {\n          height: \"20%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 386\n          },\n          __self: this\n        }), React.createElement(Box, {\n          align: \"center\",\n          pad: \"medium\",\n          gap: \"medium\",\n          border: {\n            color: \"status-error\",\n            size: \"medium\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 387\n          },\n          __self: this\n        }, React.createElement(Icons.Alert, {\n          size: \"xlarge\",\n          color: \"status-error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 388\n          },\n          __self: this\n        }), React.createElement(Text, {\n          color: \"status-error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 389\n          },\n          __self: this\n        }, \"Failure loading: \", _this.state.product_id, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 389\n          },\n          __self: this\n        }), \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 389\n          },\n          __self: this\n        }), React.createElement(Link, {\n          to: \"/upload\",\n          style: {\n            textDecoration: \"none\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 390\n          },\n          __self: this\n        }, React.createElement(Box, {\n          direction: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 391\n          },\n          __self: this\n        }, React.createElement(Icons.LinkPrevious, {\n          color: \"status-error\",\n          size: \"medium\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 392\n          },\n          __self: this\n        }), React.createElement(Box, {\n          width: \"10px\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 393\n          },\n          __self: this\n        }), React.createElement(Text, {\n          color: \"status-error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 394\n          },\n          __self: this\n        }, \"Go back\"))))));\n      } else {\n        return React.createElement(Box, {\n          align: \"center\",\n          gap: \"large\",\n          fill: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 403\n          },\n          __self: this\n        }, React.createElement(Box, {\n          height: \"25%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 404\n          },\n          __self: this\n        }), React.createElement(PreviewLoader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 405\n          },\n          __self: this\n        }), React.createElement(Text, {\n          color: Colors.grey1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 406\n          },\n          __self: this\n        }, \"Loading page: \", _this.state.product_id));\n      }\n    };\n\n    _this.saveIcon = function () {\n      if (_this.state.loggedin === undefined) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 415\n          },\n          __self: this\n        });\n      } else if (_this.state.saved === true) {\n        return React.createElement(Box, {\n          direction: \"row\",\n          align: \"center\",\n          justify: \"center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 418\n          },\n          __self: this\n        }, React.createElement(Icons.StatusGood, {\n          size: \"large\",\n          color: \"#00C781\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 419\n          },\n          __self: this\n        }), React.createElement(Box, {\n          width: \"10px\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 420\n          },\n          __self: this\n        }), React.createElement(Text, {\n          color: \"#00C781\",\n          size: \"12pt\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 421\n          },\n          __self: this\n        }, \"Saved!\"));\n      } else {\n        return React.createElement(Box, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 426\n          },\n          __self: this\n        }, React.createElement(SaveModal, {\n          product_id: _this.state.product_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 427\n          },\n          __self: this\n        }));\n      }\n    };\n\n    _this.renderPage = function () {\n      return React.createElement(Box, {\n        direction: \"column\",\n        pad: \"medium\",\n        align: \"center\",\n        width: \"625px\",\n        fill: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436\n        },\n        __self: this\n      }, React.createElement(Box, {\n        direction: \"row\",\n        gap: \"medium\",\n        justify: \"between\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437\n        },\n        __self: this\n      }, React.createElement(ImagePreview, {\n        img: _this.state.imgurl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438\n        },\n        __self: this\n      }), React.createElement(IngredientDistribution, {\n        data: _this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      })), React.createElement(Box, {\n        margin: \"medium\",\n        width: \"625px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442\n        },\n        __self: this\n      }));\n    };\n\n    _this.state = {}; // If page has acquired everything \n\n    _this.state.loading = true; // If loading resulted in an error \n\n    _this.state.loaderr = undefined; // The ID of this product page \n\n    _this.state.product_id = _this.props.match.params.productId; // A check to see if the user is authenticated \n\n    _this.state.loggedin = localStorage.getItem('auth'); // If the user is logged in, get their userdata \n\n    _this.state.userdata = JSON.parse(localStorage.getItem('userdata')); // Check if this productID has been saved before (by the user)\n\n    _this.state.saved = undefined; // Product Results page data \n\n    _this.state.page = undefined; // img url \n\n    _this.state.imgurl = undefined; // List of ingredients by category \n\n    _this.state.ingredients = undefined; // List of ingredients that were not found\n\n    _this.state.not_found = undefined;\n    return _this;\n  } // Data is fetched once react is mounting \n\n\n  _createClass(ProductPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      ScanService.getProductPage(this.state.product_id).then(function (res) {\n        var isSaved = checkIfPageSaved(_this2.state);\n        var pageIngredients = getIngredients(res.data.contents);\n        var notFound = getNotFound(res.data.contents);\n        var page = res.data;\n\n        if (pageIngredients === undefined || page === undefined) {\n          _this2.setState({\n            loaderr: \"Invalid data during mount provided\"\n          });\n        } else {\n          _this2.setState({\n            saved: isSaved,\n            ingredients: pageIngredients,\n            imgurl: page.img_url,\n            not_found: notFound,\n            page: page\n          });\n\n          console.log(\"LOADING COMPLETE: OPENING PAGE\");\n\n          _this2.setState({\n            loading: false\n          });\n        }\n      }).catch(function (e) {\n        _this2.setState({\n          loaderr: e\n        });\n      });\n    } // The loading screen while the page awaits\n\n  }, {\n    key: \"render\",\n    // Primary render call. Updates whole page\n    value: function render() {\n      var loading = this.state.loading;\n\n      if (loading === true) {\n        return React.createElement(Box, {\n          fill: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 454\n          },\n          __self: this\n        }, loading && this.loadingScreen());\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 460\n          },\n          __self: this\n        }, React.createElement(Box, {\n          margin: \"large\",\n          justify: \"center\",\n          align: \"center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 461\n          },\n          __self: this\n        }, React.createElement(Box, {\n          justify: \"between\",\n          width: \"100%\",\n          direction: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 462\n          },\n          __self: this\n        }, React.createElement(Box, {\n          width: \"33%\",\n          justify: \"center\",\n          align: \"start\",\n          pad: {\n            left: \"large\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 463\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/upload\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 464\n          },\n          __self: this\n        }, React.createElement(Icons.LinkPrevious, {\n          color: Colors.dark3,\n          size: \"large\",\n          justify: \"left\",\n          align: \"left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 465\n          },\n          __self: this\n        }))), React.createElement(Box, {\n          width: \"33%\",\n          justify: \"center\",\n          align: \"center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 468\n          },\n          __self: this\n        }, Style.Title(\"Scan Results:\")), React.createElement(Box, {\n          direction: \"row\",\n          width: \"33%\",\n          justify: \"start\",\n          align: \"end\",\n          pad: {\n            left: \"medium\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 471\n          },\n          __self: this\n        }, React.createElement(Box, {\n          direction: \"column\",\n          align: \"center\",\n          justify: \"end\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 472\n          },\n          __self: this\n        }, this.state.loggedin && this.saveIcon()))), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 477\n          },\n          __self: this\n        }, React.createElement(Text, {\n          size: \"12pt\",\n          color: Colors.grey1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 478\n          },\n          __self: this\n        }, \" Not sure how it works? You can find a guide \"), React.createElement(Text, {\n          size: \"12pt\",\n          color: Colors.primary,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 479\n          },\n          __self: this\n        }, \"here\")), this.renderPage(), React.createElement(Box, {\n          direction: \"row\",\n          justify: \"start\",\n          width: \"23.5%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 483\n          },\n          __self: this\n        }, React.createElement(Box, {\n          width: \"10%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 484\n          },\n          __self: this\n        }))));\n      }\n    }\n  }]);\n\n  return ProductPage;\n}(Component); // ---------------------------------// ---------------------------------// ---------------------------------\n// True or false return if page has already been saved by logged in user. \n\n\nvar checkIfPageSaved = function checkIfPageSaved(state) {\n  var userdata = state.userdata;\n  var product_id = state.product_id;\n\n  if (userdata == null || userdata == undefined) {\n    return false;\n  } else if (product_id === undefined) {\n    return false;\n  }\n\n  var saved_products = userdata.products;\n\n  if (saved_products.length == 0) {\n    return false;\n  } else if (saved_products.includes(product_id)) {\n    return true;\n  }\n\n  return false;\n}; // Gets ingredients cleaner from productpage data \n\n\nvar getIngredients = function getIngredients(contents) {\n  if (contents.length == 0) {\n    return undefined;\n  }\n\n  var ingredients = [];\n  Object.keys(contents).forEach(function (value, index) {\n    if (String(value) !== \"Not Found\") {\n      ingredients[value] = contents[value];\n    }\n  });\n  return ingredients;\n}; // Gets not founds that are rendered at the bottom of the page \n\n\nvar getNotFound = function getNotFound(contents) {\n  if (contents.length == 0) {\n    return [];\n  }\n\n  var ingredients = [];\n  Object.keys(contents).forEach(function (value, index) {\n    if (String(value) === \"Not Found\") {\n      ingredients = contents[value];\n    }\n  });\n  return ingredients;\n}; // Loading bar for the page \n\n\nvar PreviewLoader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PreviewLoader, _React$Component);\n\n  function PreviewLoader() {\n    var _getPrototypeOf2;\n\n    var _this3;\n\n    _classCallCheck(this, PreviewLoader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this3 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PreviewLoader)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this3.state = {\n      value: 10\n    };\n    return _this3;\n  }\n\n  _createClass(PreviewLoader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this4 = this;\n\n      this.timer = setInterval(function () {\n        var value = _this4.state.value;\n\n        _this4.setState({\n          value: value < 100 ? value + 8 : 0\n        });\n      }, 50);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var value = this.state.value;\n      return React.createElement(Meter, {\n        margin: \"0\",\n        height: \"100px\",\n        width: \"100px\",\n        type: \"circle\",\n        size: \"small\",\n        values: [{\n          value: value,\n          color: value > 10 ? \"\".concat(Colors.primary) : \"\".concat(Colors.primary)\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return PreviewLoader;\n}(React.Component); // Renders a distributions of ingredients by category and preference. \n\n\nvar IngredientDistribution =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(IngredientDistribution, _Component2);\n\n  function IngredientDistribution(props) {\n    var _this5;\n\n    _classCallCheck(this, IngredientDistribution);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(IngredientDistribution).call(this, props));\n    _this5.state = {};\n    console.log(_this5.state.ingredients);\n    return _this5;\n  }\n\n  _createClass(IngredientDistribution, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Box, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return IngredientDistribution;\n}(Component);\n\nvar ImagePreview =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(ImagePreview, _Component3);\n\n  function ImagePreview(props) {\n    var _this6;\n\n    _classCallCheck(this, ImagePreview);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(ImagePreview).call(this, props));\n\n    _this6.onOpen = function () {\n      return _this6.setState({\n        open: true\n      });\n    };\n\n    _this6.onClose = function () {\n      return _this6.setState({\n        open: undefined\n      });\n    };\n\n    _this6.renderModal = function () {\n      return React.createElement(Layer, {\n        position: \"center\",\n        modal: true,\n        onClickOutside: _this6.onClose,\n        onEsc: _this6.onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605\n        },\n        __self: this\n      }, React.createElement(Box, {\n        direction: \"column\",\n        pad: \"medium\",\n        gap: \"medium\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606\n        },\n        __self: this\n      }, React.createElement(Box, {\n        direction: \"row\",\n        justify: \"between\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607\n        },\n        __self: this\n      }, React.createElement(Image, {\n        alt: \"Preview not Found\",\n        src: _this6.state.imgurl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608\n        },\n        __self: this\n      }), React.createElement(Button, {\n        alignSelf: \"start\",\n        icon: React.createElement(Icons.Close, {\n          color: Colors.dark3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 609\n          },\n          __self: this\n        }),\n        onClick: _this6.onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609\n        },\n        __self: this\n      }))));\n    };\n\n    _this6.state = {};\n    _this6.state.imgurl = _this6.props.img;\n    return _this6;\n  }\n\n  _createClass(ImagePreview, [{\n    key: \"render\",\n    value: function render() {\n      var open = this.state.open;\n      return React.createElement(Box, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.onOpen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620\n        },\n        __self: this\n      }, React.createElement(Image, {\n        fit: \"cover\",\n        alt: \"Preview not Found\",\n        src: this.state.imgurl,\n        height: \"200px\",\n        width: \"200px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621\n        },\n        __self: this\n      })), open && this.renderModal());\n    }\n  }]);\n\n  return ImagePreview;\n}(Component);\n\nvar SaveModal =\n/*#__PURE__*/\nfunction (_Component4) {\n  _inherits(SaveModal, _Component4);\n\n  function SaveModal(props) {\n    var _this7;\n\n    _classCallCheck(this, SaveModal);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(SaveModal).call(this, props));\n\n    _this7.onOpen = function () {\n      return _this7.setState({\n        open: true\n      });\n    };\n\n    _this7.onClose = function () {\n      return _this7.setState({\n        open: undefined\n      });\n    };\n\n    _this7.updateName = function (name) {\n      _this7.setState({\n        savedName: name\n      });\n    };\n\n    _this7.sendSave = function () {\n      UserService.saveProduct(_this7.state.savedName, _this7.state.savedID).then(function (res) {\n        _this7.onClose();\n      });\n    };\n\n    _this7.renderModal = function () {\n      return React.createElement(Layer, {\n        position: \"center\",\n        modal: true,\n        onClickOutside: _this7.onClose,\n        onEsc: _this7.onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 654\n        },\n        __self: this\n      }, React.createElement(Box, {\n        direction: \"column\",\n        pad: \"medium\",\n        gap: \"medium\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655\n        },\n        __self: this\n      }, React.createElement(Box, {\n        direction: \"row\",\n        justify: \"between\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 656\n        },\n        __self: this\n      }, React.createElement(Text, {\n        size: \"24pt\",\n        color: Colors.dark3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657\n        },\n        __self: this\n      }, \" Save Scan Results\"), React.createElement(Button, {\n        icon: React.createElement(Icons.Close, {\n          color: Colors.dark3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 658\n          },\n          __self: this\n        }),\n        onClick: _this7.onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 658\n        },\n        __self: this\n      })), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 660\n        },\n        __self: this\n      }, \"Save as: \"), React.createElement(TextInputBar, {\n        onSet: _this7.updateName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: Colors.primary,\n        label: React.createElement(Text, {\n          color: Colors.primary,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 662\n          },\n          __self: this\n        }, \"Submit\"),\n        onClick: _this7.sendSave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662\n        },\n        __self: this\n      })));\n    };\n\n    _this7.state = {};\n    _this7.state.savedName = undefined;\n    _this7.state.savedID = _this7.props.product_id;\n    return _this7;\n  }\n\n  _createClass(SaveModal, [{\n    key: \"render\",\n    value: function render() {\n      var open = this.state.open;\n      return React.createElement(Box, {\n        align: \"center\",\n        justify: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 671\n        },\n        __self: this\n      }, React.createElement(Button, {\n        direction: \"column\",\n        margin: \"none\",\n        icon: React.createElement(Icons.Pin, {\n          size: \"large\",\n          color: Colors.dark3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 673\n          },\n          __self: this\n        }),\n        label: React.createElement(Text, {\n          size: \"12pt\",\n          color: Colors.primary,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 674\n          },\n          __self: this\n        }, \"Save\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 674\n          },\n          __self: this\n        }), \"results\"),\n        onClick: this.onOpen,\n        plain: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672\n        },\n        __self: this\n      }), open && this.renderModal());\n    }\n  }]);\n\n  return SaveModal;\n}(Component);\n\nvar TextInputBar =\n/*#__PURE__*/\nfunction (_Component5) {\n  _inherits(TextInputBar, _Component5);\n\n  function TextInputBar() {\n    var _getPrototypeOf3;\n\n    var _this8;\n\n    _classCallCheck(this, TextInputBar);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this8 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(TextInputBar)).call.apply(_getPrototypeOf3, [this].concat(args)));\n    _this8.state = {\n      value: \"\"\n    };\n    _this8.ref = React.createRef();\n\n    _this8.onChange = function (event) {\n      _this8.setState({\n        value: event.target.value\n      });\n    };\n\n    _this8.setName = function (name) {\n      return _this8.props.onSet(name);\n    };\n\n    return _this8;\n  }\n\n  _createClass(TextInputBar, [{\n    key: \"render\",\n    value: function render() {\n      var value = this.state.value;\n      return React.createElement(Box, {\n        width: \"medium\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        ref: this.ref,\n        value: value,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TextInputBar;\n}(Component);\n\nexport default withRouter(ProductPage);","map":{"version":3,"sources":["/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/src/components/Product.js"],"names":["React","Component","Grommet","DataTable","grommet","Meter","TextInput","DropButton","Button","Box","Heading","Menu","Paragraph","Carousel","Accordion","AccordionPanel","Text","Image","Distribution","Layer","Icons","withRouter","Redirect","Route","Link","Router","BrowserRouter","Style","Colors","AuthService","UserService","ScanService","ProductPage","props","loadingScreen","state","loaderr","undefined","color","size","product_id","textDecoration","grey1","saveIcon","loggedin","saved","renderPage","imgurl","loading","match","params","productId","localStorage","getItem","userdata","JSON","parse","page","ingredients","not_found","getProductPage","then","res","isSaved","checkIfPageSaved","pageIngredients","getIngredients","data","contents","notFound","getNotFound","setState","img_url","console","log","catch","e","left","dark3","Title","primary","saved_products","products","length","includes","Object","keys","forEach","value","index","String","PreviewLoader","timer","setInterval","clearInterval","IngredientDistribution","ImagePreview","onOpen","open","onClose","renderModal","img","SaveModal","updateName","name","savedName","sendSave","saveProduct","savedID","TextInputBar","ref","createRef","onChange","event","target","setName","onSet"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport { Grommet, DataTable, grommet, Meter, TextInput, DropButton, Button, Box, Heading, Menu, Paragraph, Carousel, Accordion, AccordionPanel, Text, Image, Distribution, Layer } from 'grommet';\nimport * as Icons from 'grommet-icons';\nimport { withRouter, Redirect, Route, Link, Router, BrowserRouter } from 'react-router-dom';\n\nimport Style from './styles/Style';\nimport Colors from './styles/Color';\nimport AuthService from './actions/AuthService';\nimport UserService from './actions/UserService';\nimport ScanService from './actions/ScanService';\n\n/* \n\nclass TextInputBar extends Component {\n\tstate = { value: \"\" };\n\n\tref = React.createRef();\n\tonChange = event => { \n\t\tthis.setState({ value: event.target.value })\n\t};\n\n\tsetName = (name) => this.props.onSet(name); \n\n\trender() {\n\t\tconst { value } = this.state;\n\t\treturn (\n\t\t\t<Box width=\"medium\">\n\t\t\t\t<TextInput ref={this.ref} value={value} onChange={this.onChange} />\n\t\t\t</Box>\n\t\t);\n\t}\n}\n\nclass SaveModal extends Component {\n\n\tconstructor(props){ \n\t\tsuper(props); \n\t\tthis.state = {}; \n\t\tthis.state.savedName = undefined; \n\t\tthis.state.savedID = this.props.productID; \n\t}\n\n\tonOpen = () => this.setState({ open: true });\n\tonClose = () => this.setState({ open: undefined });\n\n\tupdateName = (name) => { \n\t\tthis.setState({savedName: name});\n\t}\n\n\tsendSave = () => {\n\t\tUserService.saveProduct(this.state.savedName, this.state.savedID).then(res => { \n\t\t\tthis.onClose();\n\t\t})\n\t}\n\n\trenderModal = () => { \n\t\treturn(\n\t\t\t<Layer position=\"center\" modal onClickOutside={this.onClose} onEsc={this.onClose}>\n\t\t\t\t<Box direction=\"column\" pad=\"medium\" gap=\"medium\">\n\t\t\t\t\t<Box direction=\"row\" justify=\"between\">\n\t\t\t\t\t\t<Text size=\"24pt\" color={Colors.dark3}> Save Scan Results</Text>\n\t\t\t\t\t\t<Button icon={<Icons.Close color={Colors.dark3} />} onClick={this.onClose}/>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Text>Save as: </Text> \n\t\t\t\t\t<TextInputBar onSet={this.updateName}/>\n\t\t\t\t\t<Button color={Colors.primary} label={<Text color={Colors.primary}>Submit</Text>} onClick={this.sendSave}/>\n\t\t\t\t</Box>\n\t\t\t</Layer>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { open } = this.state;\n\t\treturn (\t\t\t\n\t\t\t<div>\n\t\t\t\t<Button icon={<Icons.Save size=\"large\" color={Colors.dark3}/>}  onClick={this.onOpen}  plain/>\n\t\t\t\t{ open && this.renderModal()}\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nclass IngredientModal extends Component {\n\n\tstate = {}; \n\n\tcomponentDidMount() { \n\t\tlet data = this.getIngredientData(); \n\t\tthis.setState({ ingredientname: data.name, ingredientdesc: data.desc});\n\t} \n\n\tgetIngredientData = () => { \n\t\treturn this.props.ingredient; \t\n\t}\n\n\tgetColor = () => {\n\t\tif(this.props.color != undefined) {\n\t\t\treturn this.props.color; \n\t\t} else { \n\t\t\treturn;\n\t\t}\t\n\t} \n\n\tonOpen = () => this.setState({ open: true });\n\tonClose = () => this.setState({ open: undefined });\n\n\trenderModal = () => { \n\t\treturn(\n\t\t\t<Layer position=\"center\" modal onClickOutside={this.onClose} onEsc={this.onClose}>\n\t\t\t\t<Box direction=\"row\" pad={{ left: 'medium', right: 'medium', top: 'medium'}} justify=\"between\">\n\t\t\t\t\t<Text size=\"24pt\" color={Colors.dark3}> Ingredient: {this.state.ingredientname}</Text>\n\t\t\t\t\t<Button icon={<Icons.Close color={Colors.dark3} />} onClick={this.onClose}/>\n\t\t\t\t</Box>\n\t\t\t\t<Box pad=\"medium\"> \n\t\t\t\t\t<Text size=\"12pt\" > {this.state.ingredientdesc}</Text> \n\t\t\t\t</Box> \n\t\t\t</Layer>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { open } = this.state;\n\t\treturn (\t\t\t\n\t\t\t<Box>\n\t\t\t\t<Button label={<Text size=\"10pt\"  color={this.getColor()}>{`${this.state.ingredientname}, `}</Text>}  onClick={this.onOpen} plain />\n\t\t\t\t{ open && this.renderModal()}\n\t\t\t</Box>\n\t\t);\n\t}\n\n}\n\nconst renderIngredientIcon = (preferences, ingredientlist) => { \n\tlet ingredientbuttons = []; \n\tlet pref_colors = {\n\t\t0: \"\", \n\t\t1: \"red\",\n\t\t2: \"blue\", \n\t\t3: \"green\", \n\t\t4: \"purple\", \n\t\t5: \"#33D1FF\", \n\t} \n\tlet match = false;\n\tlet color = \"\";\n\tlet col_index = 0; \n\tingredientlist.forEach(function (item) {\n\t\tif(preferences != null ) {\n\t\t\tmatch = false; \n\t\t\tObject.keys(preferences.special).forEach(function(key, index) {\n\t\t\t\tif(preferences.special[key].name == item.name) { \n\t\t\t\t\tmatch = true;\n\t\t\t\t\tcol_index = preferences.special[index].color;\n\t\t\t\t\tcolor = pref_colors[col_index]; \n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif(match == true) { \n\t\t\t\tingredientbuttons.push(<IngredientModal ingredient={item} color={color} />); \n\t\t\t} else {\n\t\t\t\tingredientbuttons.push(<IngredientModal ingredient={item} />); \n\t\t\t}\n\t\t} else { \n\t\t\tingredientbuttons.push(<IngredientModal ingredient={item} />);\n\t\t} \n\t});\n\n\treturn(\n\t\t<div>\n\t\t\t{ingredientbuttons}\n\t\t</div> \n\t); \n} \n\nclass ProductPage extends Component { \n\n\tconstructor(props) {  \n\t\tsuper(props); \n\t\t\n\t\t// Authentication values \n\t\tlet authval = AuthService.hasAuthKey(); \n\t\tthis.state = {}; \n\t\tthis.state.auth = authval;\n\t\t\n\t\t// If logged in, get prefs \n\t\tif(authval == true) { \n\t\t\t// Update preferences, then get userdata. \n\t\t\tAuthService.setAuthKey(localStorage.getItem('auth'));\n\t\t\tthis.state.userdata = JSON.parse(localStorage.getItem('userdata'));\n\t\t} else { \n\t\t\tthis.state.userdata = undefined; \n\t\t}\n\n\t\t// Get product data from LS \n\t\tlet idnum = this.props.location.pathname; \n\t\tidnum = idnum.split(\"/\");\n\t\tidnum = idnum[2];\n\t\tthis.state.product_id = idnum; \n\t\t\tthis.state.productpage = JSON.parse(localStorage.getItem(this.state.product_id));\n\t\t\tif(this.state.productpage == null || this.state.productpage === undefined) { \n\t\t\t\tthis.props.history.push('/404');\n\t\t\t}\n\n\t} \n\n\tgetImageB64 = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t}\n\t\tconst obj = this.state.productpage; \n\t\tconst binary = obj.img_url; \n\t\treturn binary; \n\t} \n\n\trenderIngredientsNormally = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t}\n\t\tconst obj = this.state.productpage; \n\t\tlet ingredients = obj.contents; \n\t\tlet panels = []; \n\t\tObject.keys(ingredients).forEach(function(key,index) {\n\t\t\tif(ingredients[key].length != 0 && key != null) { \n\t\t\t\tpanels.push( \n\t\t\t\t\t(\n\t\t\t\t\t\t<AccordionPanel label={key}>\n\t\t\t\t\t\t\t{renderIngredientIcon(null, ingredients[key])}  \n\t\t\t\t\t\t</AccordionPanel> \n\t\t\t\t\t)\n\t\t\t\t) \n\t\t\t} \n\t\t});\n\n\t\treturn( \n\t\t\t<Accordion> \n\t\t\t\t{panels}\t\n\t\t\t</Accordion> \n\t\t); \n\t} \n\n\trenderIngredientsPreferenced = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t} \n\t\tconst product_obj = this.state.productpage; \n\t\tconst userdata = this.state.userdata;\n\t\tlet ingredients = product_obj.contents;\n\t\tlet panels = []; \n\n\t\tObject.keys(ingredients).forEach(function(key, index) { \n\t\t\tif(ingredients[key].length != 0 && key != null) { \n\t\t\t\tpanels.push( \n\t\t\t\t\t<AccordionPanel label={key}> \n\t\t\t\t\t\t{renderIngredientIcon(userdata.preferences, ingredients[key])} \n\t\t\t\t\t</AccordionPanel> \n\t\t\t\t); \n\t\t\t} \n\t\t}); \n\n\t\treturn( \n\t\t\t<Accordion>\t\t\n\t\t\t\t{panels} \n\t\t\t</Accordion> \n\t\t); \n\t} \n\n\trenderDistribution = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t}\n\t\tlet dist_content = [];\n\t\tconst obj = this.state.productpage; \n\t\tlet ingredients = obj.contents;\n\t\tlet max = 0; \n\t\tObject.keys(ingredients).forEach(function(key,index) {\n\t\t\tlet curr_obj = {}; \n\t\t\tif(ingredients[key].length != 0 && key != null) { \n\t\t\t\tcurr_obj = { value: Number(ingredients[key].length), label: String(key) };\n\t\t\t\tdist_content.push(curr_obj);\n\t\t\t\tmax += ingredients[key].length; \n\t\t\t} \n\t\t});\n\t\tdist_content.sort(); \n\n\t\treturn( \n\t\t\t<Box width=\"400px\" > \n\t\t\t\t<Distribution width=\"400px\" values={dist_content}> \n\t\t\t\t{ value => (\n\t\t\t\t\t<Box pad=\"small\" background={Colors.primary} fill>\n\t\t\t\t\t\t<Text size=\"12pt\" color={Colors.grey3}>{value.value} {value.label}</Text>\n\t\t\t\t\t</Box>\n\t\t\t\t)}  \n\t\t\t</Distribution>\n\t\t</Box> \n\t\t);\n\t} \n\n\trenderProductPage = () => {\n\t\treturn( \n\t\t\t<Box direction=\"column\" pad=\"medium\" align=\"center\" width=\"625px\" fill>\n\t\t\t\t<Box direction=\"row\" gap=\"medium\" justify=\"between\"> \n\t\t\t\t\t<Carousel pad=\"medium\">\n\t\t\t\t\t\t<img alt=\"Image not found\" src={`${this.getImageB64()}`} height=\"200px\" width=\"200px\"/>\n\t\t\t\t\t</Carousel>\n\t\t\t\t\t{this.renderDistribution()}\n\t\t\t\t</Box>\n\n\t\t\t\t<Box margin=\"medium\"  width=\"625px\">\n\t\t\t\t\t{eval(this.state.auth) ? (this.renderIngredientsPreferenced()): ( this.renderIngredientsNormally() )}\n\t\t\t\t</Box>\n\t\t\t</Box> \n\t\t); \n\t} \n\n\n\n\n\t}\n} \n\n*/\n\n\n// ---------------------------------// ---------------------------------// ---------------------------------\n// ---------------------------------// ---------------------------------// ---------------------------------\n\nclass ProductPage extends Component {\n\n\t// All necessary states and data declared here\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\n\t\t// If page has acquired everything \n\t\tthis.state.loading = true;\n\t\t// If loading resulted in an error \n\t\tthis.state.loaderr = undefined;\n\t\t// The ID of this product page \n\t\tthis.state.product_id = this.props.match.params.productId;\n\t\t// A check to see if the user is authenticated \n\t\tthis.state.loggedin = localStorage.getItem('auth');\n\t\t// If the user is logged in, get their userdata \n\t\tthis.state.userdata = JSON.parse(localStorage.getItem('userdata'));\n\t\t// Check if this productID has been saved before (by the user)\n\t\tthis.state.saved = undefined;\n\t\t// Product Results page data \n\t\tthis.state.page = undefined;\n\t\t// img url \n\t\tthis.state.imgurl = undefined;\n\t\t// List of ingredients by category \n\t\tthis.state.ingredients = undefined;\n\t\t// List of ingredients that were not found\n\t\tthis.state.not_found = undefined;\n\t}\n\n\t// Data is fetched once react is mounting \n\tcomponentDidMount() {\n\t\tScanService.getProductPage(this.state.product_id)\n\t\t\t.then(res => {\n\t\t\t\tlet isSaved = checkIfPageSaved(this.state);\n\t\t\t\tlet pageIngredients = getIngredients(res.data.contents);\n\t\t\t\tlet notFound = getNotFound(res.data.contents);\n\t\t\t\tlet page = res.data;\n\t\t\t\tif (pageIngredients === undefined || page === undefined) {\n\t\t\t\t\tthis.setState({ loaderr: \"Invalid data during mount provided\" });\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tsaved: isSaved, ingredients: pageIngredients,\n\t\t\t\t\t\timgurl: page.img_url, not_found: notFound, page: page\n\t\t\t\t\t});\n\t\t\t\t\tconsole.log(\"LOADING COMPLETE: OPENING PAGE\");\n\t\t\t\t\tthis.setState({ loading: false });\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tthis.setState({ loaderr: e });\n\t\t\t});\n\t}\n\n\t// The loading screen while the page awaits\n\tloadingScreen = () => {\n\t\tif (this.state.loaderr !== undefined) {\n\t\t\treturn (\n\t\t\t\t<Box align=\"center\" gap=\"small\" fill>\n\t\t\t\t\t<Box height=\"20%\" />\n\t\t\t\t\t<Box align=\"center\" pad=\"medium\" gap=\"medium\" border={{ color: \"status-error\", size: \"medium\" }}>\n\t\t\t\t\t\t<Icons.Alert size=\"xlarge\" color=\"status-error\" />\n\t\t\t\t\t\t<Text color=\"status-error\">Failure loading: {this.state.product_id} <br /> <br />\n\t\t\t\t\t\t\t<Link to='/upload' style={{ textDecoration: \"none\" }}>\n\t\t\t\t\t\t\t\t<Box direction=\"row\">\n\t\t\t\t\t\t\t\t\t<Icons.LinkPrevious color=\"status-error\" size=\"medium\" />\n\t\t\t\t\t\t\t\t\t<Box width=\"10px\" />\n\t\t\t\t\t\t\t\t\t<Text color=\"status-error\">Go back</Text>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Box align=\"center\" gap=\"large\" fill>\n\t\t\t\t\t<Box height=\"25%\" />\n\t\t\t\t\t<PreviewLoader />\n\t\t\t\t\t<Text color={Colors.grey1}>Loading page: {this.state.product_id}</Text>\n\t\t\t\t</Box>\n\t\t\t)\n\t\t}\n\t}\n\n\t// The icon which you can click to save the page\n\tsaveIcon = () => {\n\t\tif(this.state.loggedin === undefined) { \n\t\t\treturn(<div />);\n\t\t}  else if(this.state.saved === true) { \n\t\t\treturn(\n\t\t\t\t<Box direction=\"row\" align=\"center\" justify=\"center\">\n\t\t\t\t\t<Icons.StatusGood size=\"large\"\tcolor=\"#00C781\" />\n\t\t\t\t\t<Box width=\"10px\" />\n\t\t\t\t\t<Text color=\"#00C781\" size=\"12pt\">Saved!</Text>\n\t\t\t\t</Box> \n\t\t\t)\n\t\t} else { \n\t\t\treturn ( \n\t\t\t\t<Box>\n\t\t\t\t\t<SaveModal product_id={this.state.product_id}/>\n\t\t\t\t</Box> \n\t\t\t)\n\t\t}\n\t}\n\n\t// Main contents of the page \n\trenderPage = () => { \n\t\treturn(\n\t\t\t<Box direction=\"column\" pad=\"medium\" align=\"center\" width=\"625px\" fill>\n\t\t\t\t<Box direction=\"row\" gap=\"medium\" justify=\"between\">\n\t\t\t\t\t<ImagePreview img={this.state.imgurl} />\n\t\t\t\t\t<IngredientDistribution data={this.state}/>\n\t\t\t\t</Box>\n\n\t\t\t\t<Box margin=\"medium\" width=\"625px\">\n\t\t\t\t\t{/*eval(this.state.auth) ? (this.renderIngredientsPreferenced()) : (this.renderIngredientsNormally())*/}\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t)\n\t}\n\n\t// Primary render call. Updates whole page\n\trender() {\n\t\tlet { loading } = this.state;\n\t\tif (loading === true) {\n\t\t\treturn (\n\t\t\t\t<Box fill>\n\t\t\t\t\t{loading && this.loadingScreen()}\n\t\t\t\t</Box>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Box margin=\"large\" justify=\"center\" align=\"center\">\n\t\t\t\t\t\t<Box justify=\"between\" width=\"100%\" direction=\"row\">\n\t\t\t\t\t\t\t<Box width=\"33%\" justify=\"center\" align=\"start\" pad={{ left: \"large\" }}>\n\t\t\t\t\t\t\t\t<Link to='/upload'>\n\t\t\t\t\t\t\t\t\t{<Icons.LinkPrevious color={Colors.dark3} size=\"large\" justify=\"left\" align=\"left\" />}\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t<Box width=\"33%\" justify=\"center\" align=\"center\">\n\t\t\t\t\t\t\t\t{Style.Title(\"Scan Results:\")}\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t<Box direction=\"row\" width=\"33%\" justify=\"start\" align=\"end\" pad={{ left: \"medium\" }} >\n\t\t\t\t\t\t\t\t<Box direction=\"column\" align=\"center\" justify=\"end\">\n\t\t\t\t\t\t\t\t\t{this.state.loggedin && this.saveIcon()}\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Text size=\"12pt\" color={Colors.grey1}> Not sure how it works? You can find a guide </Text>\n\t\t\t\t\t\t\t<Text size=\"12pt\" color={Colors.primary}>here</Text>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/* MAIN PAGE HERE */}\n\t\t\t\t\t\t{this.renderPage()}\n\t\t\t\t\t\t<Box direction=\"row\" justify=\"start\" width=\"23.5%\">\n\t\t\t\t\t\t\t<Box width=\"10%\" />\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Box>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\n\t}\n\n}\n\n\n// ---------------------------------// ---------------------------------// ---------------------------------\n\n// True or false return if page has already been saved by logged in user. \nconst checkIfPageSaved = (state) => {\n\tlet userdata = state.userdata;\n\tlet product_id = state.product_id;\n\tif (userdata == null || userdata == undefined) {\n\t\treturn false;\n\t} else if (product_id === undefined) {\n\t\treturn false;\n\t}\n\tlet saved_products = userdata.products;\n\tif (saved_products.length == 0) {\n\t\treturn false;\n\t} else if (saved_products.includes(product_id)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n// Gets ingredients cleaner from productpage data \nconst getIngredients = (contents) => {\n\tif (contents.length == 0) {\n\t\treturn undefined;\n\t}\n\n\tlet ingredients = [];\n\tObject.keys(contents).forEach((value, index) => {\n\t\tif (String(value) !== \"Not Found\") {\n\t\t\tingredients[value] = contents[value];\n\t\t}\n\t})\n\treturn ingredients;\n}\n\n// Gets not founds that are rendered at the bottom of the page \nconst getNotFound = (contents) => {\n\tif (contents.length == 0) {\n\t\treturn [];\n\t}\n\n\tlet ingredients = [];\n\tObject.keys(contents).forEach((value, index) => {\n\t\tif (String(value) === \"Not Found\") {\n\t\t\tingredients = contents[value];\n\t\t}\n\t})\n\treturn ingredients;\n}\n\n// Loading bar for the page \nclass PreviewLoader extends React.Component {\n\tstate = { value: 10 };\n\n\tcomponentDidMount() {\n\t\tthis.timer = setInterval(() => {\n\t\t\tconst { value } = this.state;\n\t\t\tthis.setState({ value: value < 100 ? value + 8 : 0 });\n\t\t}, 50);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.timer);\n\t}\n\n\trender() {\n\t\tconst { value } = this.state;\n\t\treturn (\n\t\t\t<Meter\n\t\t\t\tmargin=\"0\"\n\t\t\t\theight=\"100px\"\n\t\t\t\twidth=\"100px\"\n\t\t\t\ttype=\"circle\"\n\t\t\t\tsize=\"small\"\n\t\t\t\tvalues={[{ value, color: value > 10 ? `${Colors.primary}` : `${Colors.primary}` }]} />\n\t\t);\n\t}\n}\n\n// Renders a distributions of ingredients by category and preference. \nclass IngredientDistribution extends Component { \n\n\tconstructor(props) { \n\t\tsuper(props); \n\t\tthis.state = {}; \n\t\tconsole.log(this.state.ingredients);\n\t}\n\n\trender() { \n\t\treturn( \n\t\t\t<Box />\n\t\t)\n\t}\n}\n\nclass ImagePreview extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t\tthis.state.imgurl = this.props.img;\n\t}\n\n\tonOpen = () => this.setState({ open: true });\n\tonClose = () => this.setState({ open: undefined });\n\n\n\trenderModal = () => {\n\t\treturn (\n\t\t\t<Layer position=\"center\" modal onClickOutside={this.onClose} onEsc={this.onClose}>\n\t\t\t\t<Box direction=\"column\" pad=\"medium\" gap=\"medium\">\n\t\t\t\t\t<Box direction=\"row\" justify=\"between\">\n\t\t\t\t\t\t<Image alt=\"Preview not Found\" src={this.state.imgurl}/>\n\t\t\t\t\t\t<Button alignSelf=\"start\" icon={<Icons.Close color={Colors.dark3} />} onClick={this.onClose} />\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t</Layer>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { open } = this.state;\n\t\treturn (\n\t\t\t<Box>\n\t\t\t\t<Button onClick={this.onOpen}> \n\t\t\t\t\t<Image fit=\"cover\" alt=\"Preview not Found\" src={this.state.imgurl} height=\"200px\" width=\"200px\"/>\n\t\t\t\t</Button>\n\t\t\t\t{open && this.renderModal()}\n\t\t\t</Box>\n\t\t);\n\t}\n\n}\n\nclass SaveModal extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t\tthis.state.savedName = undefined;\n\t\tthis.state.savedID = this.props.product_id;\n\t}\n\n\tonOpen = () => this.setState({ open: true });\n\tonClose = () => this.setState({ open: undefined });\n\n\tupdateName = (name) => {\n\t\tthis.setState({ savedName: name });\n\t}\n\n\tsendSave = () => {\n\t\tUserService.saveProduct(this.state.savedName, this.state.savedID).then(res => {\n\t\t\tthis.onClose();\n\t\t})\n\t}\n\n\trenderModal = () => {\n\t\treturn (\n\t\t\t<Layer position=\"center\" modal onClickOutside={this.onClose} onEsc={this.onClose}>\n\t\t\t\t<Box direction=\"column\" pad=\"medium\" gap=\"medium\">\n\t\t\t\t\t<Box direction=\"row\" justify=\"between\">\n\t\t\t\t\t\t<Text size=\"24pt\" color={Colors.dark3}> Save Scan Results</Text>\n\t\t\t\t\t\t<Button icon={<Icons.Close color={Colors.dark3} />} onClick={this.onClose} />\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Text>Save as: </Text>\n\t\t\t\t\t<TextInputBar onSet={this.updateName} />\n\t\t\t\t\t<Button color={Colors.primary} label={<Text color={Colors.primary}>Submit</Text>} onClick={this.sendSave} />\n\t\t\t\t</Box>\n\t\t\t</Layer>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { open } = this.state;\n\t\treturn (\n\t\t\t<Box align=\"center\" justify=\"center\">\n\t\t\t\t<Button direction=\"column\" margin=\"none\" \n\t\t\t\ticon={<Icons.Pin size=\"large\" color={Colors.dark3} />} \n\t\t\t\tlabel={<Text size=\"12pt\" color={Colors.primary}>Save<br/>results</Text>}\n\t\t\t\tonClick={this.onOpen} plain />\n\t\t\t\t{open && this.renderModal()}\n\t\t\t</Box>\n\t\t);\n\t}\n\n}\n\nclass TextInputBar extends Component {\n\tstate = { value: \"\" };\n\n\tref = React.createRef();\n\tonChange = event => {\n\t\tthis.setState({ value: event.target.value })\n\t};\n\n\tsetName = (name) => this.props.onSet(name);\n\n\trender() {\n\t\tconst { value } = this.state;\n\t\treturn (\n\t\t\t<Box width=\"medium\">\n\t\t\t\t<TextInput ref={this.ref} value={value} onChange={this.onChange} />\n\t\t\t</Box>\n\t\t);\n\t}\n}\n\nexport default withRouter(ProductPage); \n"]},"metadata":{},"sourceType":"module"}