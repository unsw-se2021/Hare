{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { TableCell } from '../TableCell';\nimport { Text } from '../Text';\nimport { Resizer } from './Resizer';\nimport { Searcher } from './Searcher';\nimport { Sorter } from './Sorter';\nimport { ExpanderCell } from './ExpanderCell';\nimport { StyledDataTableHeader, StyledDataTableRow } from './StyledDataTable';\n\nvar Header = function Header(_ref) {\n  var columns = _ref.columns,\n      filtering = _ref.filtering,\n      filters = _ref.filters,\n      groups = _ref.groups,\n      groupState = _ref.groupState,\n      onFilter = _ref.onFilter,\n      onFiltering = _ref.onFiltering,\n      onResize = _ref.onResize,\n      onSort = _ref.onSort,\n      onToggle = _ref.onToggle,\n      sort = _ref.sort,\n      theme = _ref.theme,\n      widths = _ref.widths,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"columns\", \"filtering\", \"filters\", \"groups\", \"groupState\", \"onFilter\", \"onFiltering\", \"onResize\", \"onSort\", \"onToggle\", \"sort\", \"theme\", \"widths\"]);\n\n  var dataTableContextTheme = _extends({}, theme.table.header, theme.dataTable.header); // The tricky part here is that we need to manage the theme styling\n  // to make sure that the background, border, and padding are applied\n  // at the right places depending on the mix of controls in each header cell.\n\n\n  var outerThemeProps = function (_ref2) {\n    var border = _ref2.border,\n        background = _ref2.background;\n    return {\n      border: border,\n      background: background\n    };\n  }(dataTableContextTheme);\n\n  var border = dataTableContextTheme.border,\n      background = dataTableContextTheme.background,\n      innerThemeProps = _objectWithoutPropertiesLoose(dataTableContextTheme, [\"border\", \"background\"]);\n\n  return React.createElement(StyledDataTableHeader, rest, React.createElement(StyledDataTableRow, null, groups && React.createElement(ExpanderCell, {\n    context: \"header\",\n    expanded: Object.keys(groupState).filter(function (k) {\n      return !groupState[k].expanded;\n    }).length === 0,\n    onToggle: onToggle\n  }), columns.map(function (_ref3) {\n    var property = _ref3.property,\n        header = _ref3.header,\n        align = _ref3.align,\n        search = _ref3.search,\n        sortable = _ref3.sortable;\n    var content = typeof header === 'string' ? React.createElement(Text, null, header) : header;\n\n    if (onSort && sortable !== false) {\n      content = React.createElement(Sorter, {\n        align: align,\n        fill: !search,\n        property: property,\n        onSort: onSort,\n        sort: sort,\n        themeProps: search ? innerThemeProps : dataTableContextTheme\n      }, content);\n    }\n\n    if (search && filters) {\n      if (!onSort) {\n        content = React.createElement(Box, _extends({\n          justify: \"center\",\n          align: align\n        }, innerThemeProps), content);\n      }\n\n      content = React.createElement(Box, _extends({\n        fill: true,\n        direction: \"row\",\n        justify: \"between\",\n        align: \"center\"\n      }, outerThemeProps), content, React.createElement(Searcher, {\n        filtering: filtering,\n        filters: filters,\n        property: property,\n        onFilter: onFilter,\n        onFiltering: onFiltering\n      }));\n    } else if (!onSort || sortable === false) {\n      content = React.createElement(Box, _extends({}, dataTableContextTheme, {\n        fill: true,\n        justify: \"center\",\n        align: align\n      }), content);\n    }\n\n    if (onResize) {\n      content = React.createElement(Resizer, {\n        property: property,\n        onResize: onResize\n      }, content);\n    }\n\n    return React.createElement(TableCell, {\n      key: property,\n      scope: \"col\",\n      plain: true,\n      style: widths && widths[property] ? {\n        width: widths[property]\n      } : undefined\n    }, content);\n  })));\n};\n\nHeader.defaultProps = {};\nObject.setPrototypeOf(Header.defaultProps, defaultProps);\nvar HeaderWrapper = compose(withTheme)(Header);\nexport { HeaderWrapper as Header };","map":null,"metadata":{},"sourceType":"module"}