{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { normalizeColor, parseMetricToNum } from '../../utils';\nimport { StyledDiagram } from './StyledDiagram';\n\nvar computeMidPoint = function computeMidPoint(fromPoint, toPoint) {\n  return [fromPoint[0] > toPoint[0] ? toPoint[0] + (fromPoint[0] - toPoint[0]) / 2 : fromPoint[0] + (toPoint[0] - fromPoint[0]) / 2, fromPoint[1] > toPoint[1] ? toPoint[1] + (fromPoint[1] - toPoint[1]) / 2 : fromPoint[1] + (toPoint[1] - fromPoint[1]) / 2];\n};\n\nvar COMMANDS = {\n  curved: function curved(fromPoint, toPoint, offset, anchor) {\n    var midPoint = computeMidPoint(fromPoint, toPoint);\n    var cmds = \"M \" + (fromPoint[0] + offset) + \",\" + (fromPoint[1] + offset) + \" \";\n\n    if (anchor === 'horizontal') {\n      cmds += \"Q \" + (midPoint[0] + offset) + \",\" + (fromPoint[1] + offset) + \" \" + (midPoint[0] + offset + \",\" + (midPoint[1] + offset) + \" \");\n    } else {\n      cmds += \"Q \" + (fromPoint[0] + offset) + \",\" + (midPoint[1] + offset) + \" \" + (midPoint[0] + offset + \",\" + (midPoint[1] + offset) + \" \");\n    }\n\n    cmds += \"T \" + (toPoint[0] + offset) + \",\" + (toPoint[1] + offset);\n    return cmds;\n  },\n  direct: function direct(fromPoint, toPoint, offset) {\n    return \"M \" + (fromPoint[0] + offset) + \",\" + (fromPoint[1] + offset) + \" \" + (\"L \" + (toPoint[0] + offset) + \",\" + (toPoint[1] + offset));\n  },\n  rectilinear: function rectilinear(fromPoint, toPoint, offset, anchor) {\n    var midPoint = computeMidPoint(fromPoint, toPoint);\n    var cmds = \"M \" + (fromPoint[0] + offset) + \",\" + (fromPoint[1] + offset) + \" \";\n\n    if (anchor === 'horizontal') {\n      cmds += \"L \" + (midPoint[0] + offset) + \",\" + (fromPoint[1] + offset) + \" \" + (\"L \" + (midPoint[0] + offset) + \",\" + (toPoint[1] + offset) + \" \");\n    } else {\n      cmds += \"L \" + (fromPoint[0] + offset) + \",\" + (midPoint[1] + offset) + \" \" + (\"L \" + (toPoint[0] + offset) + \",\" + (midPoint[1] + offset) + \" \");\n    }\n\n    cmds += \"L \" + (toPoint[0] + offset) + \",\" + (toPoint[1] + offset);\n    return cmds;\n  }\n};\n\nvar findTarget = function findTarget(target) {\n  if (typeof target === 'string') {\n    return document.getElementById(target);\n  }\n\n  return target;\n};\n\nvar Diagram =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Diagram, _Component);\n\n  function Diagram() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      height: 0,\n      width: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"svgRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onResize\", function () {\n      var _this$state = _this.state,\n          width = _this$state.width,\n          height = _this$state.height;\n      var svg = _this.svgRef.current;\n\n      if (svg) {\n        var rect = svg.getBoundingClientRect();\n\n        if (rect.width !== width || rect.height !== height) {\n          _this.setState({\n            width: rect.width,\n            height: rect.height,\n            connectionPoints: undefined\n          });\n        }\n      }\n    });\n\n    return _this;\n  }\n\n  Diagram.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    // track whether the connections array changes so we can trigger re-placing\n    if (nextProps.connections !== prevState.connections) {\n      return {\n        connections: nextProps.connections,\n        connectionPoints: undefined\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = Diagram.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    window.addEventListener('resize', this.onResize);\n    this.onResize();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var connectionPoints = this.state.connectionPoints;\n\n    if (!connectionPoints) {\n      this.placeConnections();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize);\n  };\n\n  _proto.placeConnections = function placeConnections() {\n    var connections = this.props.connections;\n    var containerRect = this.svgRef.current.getBoundingClientRect();\n    var connectionPoints = connections.map(function (_ref) {\n      var anchor = _ref.anchor,\n          fromTarget = _ref.fromTarget,\n          toTarget = _ref.toTarget;\n      var points;\n      var fromElement = findTarget(fromTarget);\n      var toElement = findTarget(toTarget);\n\n      if (!fromElement) {\n        console.warn(\"Diagram cannot find \" + fromTarget);\n      }\n\n      if (!toElement) {\n        console.warn(\"Diagram cannot find \" + toTarget);\n      }\n\n      if (fromElement && toElement) {\n        var fromRect = fromElement.getBoundingClientRect();\n        var toRect = toElement.getBoundingClientRect(); // There is no x and y when unit testing.\n\n        var fromPoint = [fromRect.x - containerRect.x || 0, fromRect.y - containerRect.y || 0];\n        var toPoint = [toRect.x - containerRect.x || 0, toRect.y - containerRect.y || 0];\n\n        if (anchor === 'vertical') {\n          fromPoint[0] += fromRect.width / 2;\n          toPoint[0] += toRect.width / 2;\n\n          if (fromRect.y < toRect.y) {\n            fromPoint[1] += fromRect.height;\n          } else {\n            toPoint[1] += toRect.height;\n          }\n        } else if (anchor === 'horizontal') {\n          fromPoint[1] += fromRect.height / 2;\n          toPoint[1] += toRect.height / 2;\n\n          if (fromRect.x < toRect.x) {\n            fromPoint[0] += fromRect.width;\n          } else {\n            toPoint[0] += toRect.width;\n          }\n        } else {\n          // center\n          fromPoint[0] += fromRect.width / 2;\n          fromPoint[1] += fromRect.height / 2;\n          toPoint[0] += toRect.width / 2;\n          toPoint[1] += toRect.height / 2;\n        }\n\n        points = [fromPoint, toPoint];\n      }\n\n      return points;\n    });\n    this.setState({\n      connectionPoints: connectionPoints\n    });\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        connections = _this$props.connections,\n        theme = _this$props.theme,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"connections\", \"theme\"]);\n\n    var _this$state2 = this.state,\n        connectionPoints = _this$state2.connectionPoints,\n        height = _this$state2.height,\n        width = _this$state2.width;\n    var paths;\n\n    if (connectionPoints) {\n      paths = connections.map(function (_ref2, index) {\n        var anchor = _ref2.anchor,\n            color = _ref2.color,\n            offset = _ref2.offset,\n            round = _ref2.round,\n            thickness = _ref2.thickness,\n            type = _ref2.type,\n            connectionRest = _objectWithoutPropertiesLoose(_ref2, [\"anchor\", \"color\", \"offset\", \"round\", \"thickness\", \"type\"]);\n\n        var path;\n\n        var cleanedRest = _extends({}, connectionRest);\n\n        delete cleanedRest.fromTarget;\n        delete cleanedRest.toTarget;\n        var points = connectionPoints[index];\n\n        if (points) {\n          var offsetWidth = offset ? parseMetricToNum(theme.global.edgeSize[offset]) : 0;\n          var d = COMMANDS[type || 'curved'](points[0], points[1], offsetWidth, anchor);\n          var strokeWidth = thickness ? parseMetricToNum(theme.global.edgeSize[thickness] || thickness) : 1;\n          path = React.createElement(\"path\", _extends({\n            // eslint-disable-next-line react/no-array-index-key\n            key: index\n          }, cleanedRest, {\n            stroke: normalizeColor(color || theme.diagram.line.color, theme),\n            strokeWidth: strokeWidth,\n            strokeLinecap: round ? 'round' : 'butt',\n            strokeLinejoin: round ? 'round' : 'miter',\n            fill: \"none\",\n            d: d\n          }));\n        }\n\n        return path;\n      });\n    }\n\n    return React.createElement(StyledDiagram, _extends({\n      ref: this.svgRef,\n      viewBox: \"0 0 \" + width + \" \" + height,\n      preserveAspectRatio: \"xMinYMin meet\"\n    }, rest), React.createElement(\"g\", null, paths));\n  };\n\n  return Diagram;\n}(Component);\n\n_defineProperty(Diagram, \"defaultProps\", {\n  connections: []\n});\n\nObject.setPrototypeOf(Diagram.defaultProps, defaultProps);\nvar DiagramDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  DiagramDoc = require('./doc').doc(Diagram); // eslint-disable-line global-require\n}\n\nvar DiagramWrapper = compose(withTheme)(DiagramDoc || Diagram);\nexport { DiagramWrapper as Diagram };","map":null,"metadata":{},"sourceType":"module"}