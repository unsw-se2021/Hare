{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge, genericProps, themeDocUtils } from '../../utils';\nvar PAD_SIZES = ['xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge'];\nvar OVERFLOW_VALUES = ['auto', 'hidden', 'scroll', 'visible'];\nvar ANIMATION_TYPE = PropTypes.oneOf(['fadeIn', 'fadeOut', 'jiggle', 'pulse', 'slideUp', 'slideDown', 'slideLeft', 'slideRight', 'zoomIn', 'zoomOut']);\nvar ANIMATION_SHAPE = PropTypes.shape({\n  type: ANIMATION_TYPE,\n  delay: PropTypes.number,\n  duration: PropTypes.number,\n  size: PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge'])\n});\nexport var doc = function doc(Box) {\n  var DocumentedBox = describe(Box).availableAt(getAvailableAtBadge('Box')).description(\"A container that lays out its contents in one direction. Box\\n      provides CSS flexbox capabilities for layout, as well as general\\n      styling of things like background color, border, and animation.\").usage(\"import { Box } from 'grommet';\\n<Box />\").intrinsicElement('div');\n  DocumentedBox.propTypes = _extends({}, genericProps, {\n    align: PropTypes.oneOf(['start', 'center', 'end', 'baseline', 'stretch']).description('How to align the contents along the cross axis.'),\n    alignContent: PropTypes.oneOf(['start', 'center', 'end', 'between', 'around', 'stretch']).description(\"How to align the contents when there is extra space in\\n        the cross axis.\").defaultValue('stretch'),\n    animation: PropTypes.oneOfType([ANIMATION_TYPE, ANIMATION_SHAPE, PropTypes.arrayOf(PropTypes.oneOfType([ANIMATION_TYPE, ANIMATION_SHAPE]))]).description(\"Animation effect(s) to use. 'duration' and 'delay' should\\n        be in milliseconds. 'jiggle' and 'pulse' types are intended for\\n        small elements, like icons.\"),\n    background: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n      color: PropTypes.string,\n      dark: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n      image: PropTypes.string,\n      position: PropTypes.string,\n      opacity: PropTypes.oneOfType([PropTypes.oneOf(['weak', 'medium', 'strong']), PropTypes.bool]),\n      repeat: PropTypes.oneOfType([PropTypes.oneOf(['no-repeat', 'repeat']), PropTypes.string]),\n      size: PropTypes.oneOfType([PropTypes.oneOf(['cover', 'contain']), PropTypes.string]),\n      light: PropTypes.string\n    })]).description(\"Either a color identifier to use for the background\\n        color. For example: 'neutral-1'. Or, a 'url()' for an image. Dark\\n        is not needed if color is provided.\"),\n    basis: PropTypes.oneOfType([PropTypes.oneOf(['xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge', 'full', '1/2', '1/3', '2/3', '1/4', '2/4', '3/4', 'auto']), PropTypes.string]).description(\"A fixed or relative size along its container's main axis.\"),\n    border: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'left', 'bottom', 'right', 'horizontal', 'vertical', 'all']), PropTypes.shape({\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n        dark: PropTypes.string,\n        light: PropTypes.string\n      })]),\n      side: PropTypes.oneOf(['top', 'left', 'bottom', 'right', 'horizontal', 'vertical', 'all']),\n      size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]),\n      style: PropTypes.oneOf(['solid', 'dashed', 'dotted', 'double', 'groove', 'ridge', 'inset', 'outset', 'hidden']).defaultValue('solid')\n    })]).description('Include a border.'),\n    direction: PropTypes.oneOf(['row', 'column', 'row-responsive']).description('The orientation to layout the child components in.').defaultValue('column'),\n    elevation: PropTypes.oneOfType([PropTypes.oneOf(['none', 'xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]).description(\"Elevated height above the underlying context, indicated\\n        via a drop shadow.\").defaultValue('none'),\n    flex: PropTypes.oneOfType([PropTypes.oneOf(['grow', 'shrink']), PropTypes.bool, PropTypes.shape({\n      grow: PropTypes.number,\n      shrink: PropTypes.number\n    })]).description('Whether flex-grow and/or flex-shrink is true and at a desired factor.'),\n    fill: PropTypes.oneOfType([PropTypes.oneOf(['horizontal', 'vertical']), PropTypes.bool]).description('Whether the width and/or height should fill the container.'),\n    gap: PropTypes.oneOfType([PropTypes.oneOf(['xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]).description(\"The amount of spacing between child elements. This\\n        should not be used in conjunction with 'wrap' as the gap elements\\n        will not wrap gracefully.\"),\n    height: PropTypes.oneOfType([PropTypes.oneOf(['xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge']), PropTypes.string]).description('A fixed height.'),\n    justify: PropTypes.oneOf(['around', 'between', 'center', 'end', 'evenly', 'start', 'stretch']).description('How to align the contents along the main axis.').defaultValue('stretch'),\n    overflow: PropTypes.oneOfType([PropTypes.oneOf(OVERFLOW_VALUES), PropTypes.shape({\n      horizontal: PropTypes.oneOf(OVERFLOW_VALUES),\n      vertical: PropTypes.oneOf(OVERFLOW_VALUES)\n    }), PropTypes.string]).description('box overflow.'),\n    pad: PropTypes.oneOfType([PropTypes.oneOf(['none'].concat(PAD_SIZES)), PropTypes.shape({\n      bottom: PropTypes.oneOfType([PropTypes.oneOf(PAD_SIZES), PropTypes.string]),\n      horizontal: PropTypes.oneOfType([PropTypes.oneOf(PAD_SIZES), PropTypes.string]),\n      left: PropTypes.oneOfType([PropTypes.oneOf(PAD_SIZES), PropTypes.string]),\n      right: PropTypes.oneOfType([PropTypes.oneOf(PAD_SIZES), PropTypes.string]),\n      top: PropTypes.oneOfType([PropTypes.oneOf(PAD_SIZES), PropTypes.string]),\n      vertical: PropTypes.oneOfType([PropTypes.oneOf(PAD_SIZES), PropTypes.string])\n    }), PropTypes.string]).description(\"The amount of padding around the box contents. An\\n        object can be specified to distinguish horizontal padding, vertical\\n        padding, and padding on a particular side of the box\").defaultValue('none'),\n    responsive: PropTypes.bool.description(\"Whether margin, pad, and border\\n      sizes should be scaled for mobile environments.\").defaultValue(true),\n    round: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'full']), PropTypes.string, PropTypes.shape({\n      corner: PropTypes.oneOf(['top', 'left', 'bottom', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right']),\n      size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string])\n    })]).description('How much to round the corners.').defaultValue(false),\n    tag: PropTypes.string.description(\"The DOM tag to use for the element. NOTE: This is deprecated in favor\\nof indicating the DOM tag via the 'as' property.\"),\n    as: PropTypes.string.description('The DOM tag to use for the element.').defaultValue('div'),\n    width: PropTypes.oneOfType([PropTypes.oneOf(['xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge']), PropTypes.string]).description('A fixed width.'),\n    wrap: PropTypes.bool.description(\"Whether children can wrap if they\\n      can't all fit.\").defaultValue(false)\n  });\n  return DocumentedBox;\n};\nexport var themeDoc = _extends({\n  'global.animation': {\n    description: 'The animation configuration for the Box.',\n    type: 'object',\n    defaultValue: \"{\\n  duration: '1s',\\n  jiggle: {\\n    duration: '0.1s',\\n  },\\n}\"\n  },\n  'global.borderSize': {\n    description: 'The possible border sizes in the Box.',\n    type: 'object',\n    defaultValue: \"{\\n  xsmall: '1px',\\n  small: '2px',\\n  medium: '4px',\\n  large: '12px',\\n  xlarge: '24px,\\n}\"\n  },\n  'global.elevation': {\n    description: 'The possible shadows in Box elevation.',\n    type: 'object',\n    defaultValue: \"{\\n  light: {\\n    none: 'none',\\n    xsmall: '0px 1px 2px rgba(100, 100, 100, 0.50)',\\n    small: '0px 2px 4px rgba(100, 100, 100, 0.50)',\\n    medium: '0px 3px 8px rgba(100, 100, 100, 0.50)',\\n    large: '0px 6px 12px rgba(100, 100, 100, 0.50)',\\n    xlarge: '0px 8px 16px rgba(100, 100, 100, 0.50)',\\n  },\\n  dark: {\\n    none: 'none',\\n    xsmall: '0px 2px 2px rgba(255, 255, 255, 0.40)',\\n    small: '0px 4px 4px rgba(255, 255, 255, 0.40)',\\n    medium: '0px 6px 8px rgba(255, 255, 255, 0.40)',\\n    large: '0px 8px 16px rgba(255, 255, 255, 0.40)',\\n    xlarge: '0px 10px 24px rgba(255, 255, 255, 0.40)',\\n  },\\n}\"\n  },\n  'global.colors.text': {\n    description: 'The text color when the Box changes the background color',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{ dark: '#f8f8f8', light: '#444444' }\"\n  },\n  'global.opacity.medium': {\n    description: 'The value used when background opacity is set to true.',\n    type: 'number',\n    defaultValue: '0.4'\n  },\n  'global.size': {\n    description: 'The possible sizes for width, height, and basis.',\n    type: 'object',\n    defaultValue: \"{\\n  xxsmall: '48px',\\n  xsmall: '96px',\\n  small: '192px',\\n  medium: '384px',\\n  large: '768px',\\n  xlarge: '1152px',\\n  xxlarge: '1536px',\\n  full: '100%',\\n}\"\n  },\n  'box.extend': {\n    description: 'Any additional style for the Box.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'box.responsiveBreakpoint': {\n    description: 'The actual breakpoint to trigger changes in the border, direction, gap, margin, pad, and round.',\n    type: 'string',\n    defaultValue: 'small'\n  }\n}, themeDocUtils.edgeStyle('The possible sizes for any of gap, margin, and pad.'), themeDocUtils.breakpointStyle('The possible breakpoints that could affect border, direction, gap, margin, pad, and round.'));","map":null,"metadata":{},"sourceType":"module"}