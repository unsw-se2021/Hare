{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Children, Component } from 'react';\nimport { compose } from 'recompose';\nimport { withForwardRef, withDocs } from '../hocs';\nimport { ThemeContext } from '../../contexts';\nimport { defaultProps } from '../../default-props';\nimport { backgroundIsDark } from '../../utils';\nimport { StyledBox, StyledBoxGap } from './StyledBox';\nvar wrapWithHocs = compose(withForwardRef, withDocs('Box'));\n\nvar BoxImpl =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(BoxImpl, _Component);\n\n  function BoxImpl() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = BoxImpl.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        a11yTitle = _this$props.a11yTitle,\n        background = _this$props.background,\n        children = _this$props.children,\n        direction = _this$props.direction,\n        elevation = _this$props.elevation,\n        fill = _this$props.fill,\n        forwardRef = _this$props.forwardRef,\n        gap = _this$props.gap,\n        overflow = _this$props.overflow,\n        responsive = _this$props.responsive,\n        tag = _this$props.tag,\n        as = _this$props.as,\n        wrap = _this$props.wrap,\n        width = _this$props.width,\n        height = _this$props.height,\n        propsTheme = _this$props.theme,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"a11yTitle\", \"background\", \"children\", \"direction\", \"elevation\", \"fill\", \"forwardRef\", \"gap\", \"overflow\", \"responsive\", \"tag\", \"as\", \"wrap\", \"width\", \"height\", \"theme\"]);\n\n    var theme = this.context || propsTheme;\n    var contents = children;\n\n    if (gap) {\n      contents = [];\n      var firstIndex;\n      Children.forEach(children, function (child, index) {\n        if (child) {\n          if (firstIndex === undefined) {\n            firstIndex = index;\n          } else {\n            contents.push(React.createElement(StyledBoxGap // eslint-disable-next-line react/no-array-index-key\n            , {\n              key: index,\n              gap: gap,\n              directionProp: direction,\n              responsive: responsive\n            }));\n          }\n        }\n\n        contents.push(child);\n      });\n    }\n\n    var content = React.createElement(StyledBox, _extends({\n      as: !as && tag ? tag : as,\n      \"aria-label\": a11yTitle,\n      background: background,\n      ref: forwardRef,\n      directionProp: direction,\n      elevationProp: elevation,\n      fillProp: fill,\n      overflowProp: overflow,\n      wrapProp: wrap,\n      widthProp: width,\n      heightProp: height,\n      responsive: responsive\n    }, rest), contents); // When a Box changes the darkness, it sets darkChanged so that StyledBox\n    // can know what the underlying darkness is when deciding which elevation\n    // to show.\n\n    if (background || theme.darkChanged) {\n      var dark = backgroundIsDark(background, theme);\n      var darkChanged = dark !== undefined && dark !== theme.dark;\n\n      if (darkChanged || theme.darkChanged) {\n        dark = dark === undefined ? theme.dark : dark;\n        content = React.createElement(ThemeContext.Provider, {\n          value: _extends({}, theme, {\n            dark: dark,\n            darkChanged: darkChanged\n          })\n        }, content);\n      }\n    }\n\n    return content;\n  };\n\n  return BoxImpl;\n}(Component);\n\n_defineProperty(BoxImpl, \"contextType\", ThemeContext);\n\n_defineProperty(BoxImpl, \"displayName\", 'Box');\n\n_defineProperty(BoxImpl, \"defaultProps\", {\n  direction: 'column',\n  margin: 'none',\n  pad: 'none',\n  responsive: true\n});\n\nObject.setPrototypeOf(BoxImpl.defaultProps, defaultProps);\nexport var Box = wrapWithHocs(BoxImpl);","map":null,"metadata":{},"sourceType":"module"}