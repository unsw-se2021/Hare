{"ast":null,"code":"import _classCallCheck from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/src/components/Product.js\";\nimport React, { Component } from 'react';\nimport { Grommet, DataTable, grommet, Meter, TextInput, DropButton, Button, Box, Heading, Menu, Paragraph, Carousel, Accordion, AccordionPanel, Text, Image, Distribution, Layer } from 'grommet';\nimport * as Icons from 'grommet-icons';\nimport { withRouter, Redirect, Route, Link, Router, BrowserRouter } from 'react-router-dom';\nimport Style from './styles/Style';\nimport Colors from './styles/Color';\nimport AuthService from './actions/AuthService';\nimport UserService from './actions/UserService';\nimport ScanService from './actions/ScanService';\n/* \n\nclass TextInputBar extends Component {\n\tstate = { value: \"\" };\n\n\tref = React.createRef();\n\tonChange = event => { \n\t\tthis.setState({ value: event.target.value })\n\t};\n\n\tsetName = (name) => this.props.onSet(name); \n\n\trender() {\n\t\tconst { value } = this.state;\n\t\treturn (\n\t\t\t<Box width=\"medium\">\n\t\t\t\t<TextInput ref={this.ref} value={value} onChange={this.onChange} />\n\t\t\t</Box>\n\t\t);\n\t}\n}\n\nclass SaveModal extends Component {\n\n\tconstructor(props){ \n\t\tsuper(props); \n\t\tthis.state = {}; \n\t\tthis.state.savedName = undefined; \n\t\tthis.state.savedID = this.props.productID; \n\t}\n\n\tonOpen = () => this.setState({ open: true });\n\tonClose = () => this.setState({ open: undefined });\n\n\tupdateName = (name) => { \n\t\tthis.setState({savedName: name});\n\t}\n\n\tsendSave = () => {\n\t\tUserService.saveProduct(this.state.savedName, this.state.savedID).then(res => { \n\t\t\tthis.onClose();\n\t\t})\n\t}\n\n\trenderModal = () => { \n\t\treturn(\n\t\t\t<Layer position=\"center\" modal onClickOutside={this.onClose} onEsc={this.onClose}>\n\t\t\t\t<Box direction=\"column\" pad=\"medium\" gap=\"medium\">\n\t\t\t\t\t<Box direction=\"row\" justify=\"between\">\n\t\t\t\t\t\t<Text size=\"24pt\" color={Colors.dark3}> Save Scan Results</Text>\n\t\t\t\t\t\t<Button icon={<Icons.Close color={Colors.dark3} />} onClick={this.onClose}/>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Text>Save as: </Text> \n\t\t\t\t\t<TextInputBar onSet={this.updateName}/>\n\t\t\t\t\t<Button color={Colors.primary} label={<Text color={Colors.primary}>Submit</Text>} onClick={this.sendSave}/>\n\t\t\t\t</Box>\n\t\t\t</Layer>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { open } = this.state;\n\t\treturn (\t\t\t\n\t\t\t<div>\n\t\t\t\t<Button icon={<Icons.Save size=\"large\" color={Colors.dark3}/>}  onClick={this.onOpen}  plain/>\n\t\t\t\t{ open && this.renderModal()}\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nclass IngredientModal extends Component {\n\n\tstate = {}; \n\n\tcomponentDidMount() { \n\t\tlet data = this.getIngredientData(); \n\t\tthis.setState({ ingredientname: data.name, ingredientdesc: data.desc});\n\t} \n\n\tgetIngredientData = () => { \n\t\treturn this.props.ingredient; \t\n\t}\n\n\tgetColor = () => {\n\t\tif(this.props.color != undefined) {\n\t\t\treturn this.props.color; \n\t\t} else { \n\t\t\treturn;\n\t\t}\t\n\t} \n\n\tonOpen = () => this.setState({ open: true });\n\tonClose = () => this.setState({ open: undefined });\n\n\trenderModal = () => { \n\t\treturn(\n\t\t\t<Layer position=\"center\" modal onClickOutside={this.onClose} onEsc={this.onClose}>\n\t\t\t\t<Box direction=\"row\" pad={{ left: 'medium', right: 'medium', top: 'medium'}} justify=\"between\">\n\t\t\t\t\t<Text size=\"24pt\" color={Colors.dark3}> Ingredient: {this.state.ingredientname}</Text>\n\t\t\t\t\t<Button icon={<Icons.Close color={Colors.dark3} />} onClick={this.onClose}/>\n\t\t\t\t</Box>\n\t\t\t\t<Box pad=\"medium\"> \n\t\t\t\t\t<Text size=\"12pt\" > {this.state.ingredientdesc}</Text> \n\t\t\t\t</Box> \n\t\t\t</Layer>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { open } = this.state;\n\t\treturn (\t\t\t\n\t\t\t<Box>\n\t\t\t\t<Button label={<Text size=\"10pt\"  color={this.getColor()}>{`${this.state.ingredientname}, `}</Text>}  onClick={this.onOpen} plain />\n\t\t\t\t{ open && this.renderModal()}\n\t\t\t</Box>\n\t\t);\n\t}\n\n}\n\nconst renderIngredientIcon = (preferences, ingredientlist) => { \n\tlet ingredientbuttons = []; \n\tlet pref_colors = {\n\t\t0: \"\", \n\t\t1: \"red\",\n\t\t2: \"blue\", \n\t\t3: \"green\", \n\t\t4: \"purple\", \n\t\t5: \"#33D1FF\", \n\t} \n\tlet match = false;\n\tlet color = \"\";\n\tlet col_index = 0; \n\tingredientlist.forEach(function (item) {\n\t\tif(preferences != null ) {\n\t\t\tmatch = false; \n\t\t\tObject.keys(preferences.special).forEach(function(key, index) {\n\t\t\t\tif(preferences.special[key].name == item.name) { \n\t\t\t\t\tmatch = true;\n\t\t\t\t\tcol_index = preferences.special[index].color;\n\t\t\t\t\tcolor = pref_colors[col_index]; \n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif(match == true) { \n\t\t\t\tingredientbuttons.push(<IngredientModal ingredient={item} color={color} />); \n\t\t\t} else {\n\t\t\t\tingredientbuttons.push(<IngredientModal ingredient={item} />); \n\t\t\t}\n\t\t} else { \n\t\t\tingredientbuttons.push(<IngredientModal ingredient={item} />);\n\t\t} \n\t});\n\n\treturn(\n\t\t<div>\n\t\t\t{ingredientbuttons}\n\t\t</div> \n\t); \n} \n\nclass ProductPage extends Component { \n\n\tconstructor(props) {  \n\t\tsuper(props); \n\t\t\n\t\t// Authentication values \n\t\tlet authval = AuthService.hasAuthKey(); \n\t\tthis.state = {}; \n\t\tthis.state.auth = authval;\n\t\t\n\t\t// If logged in, get prefs \n\t\tif(authval == true) { \n\t\t\t// Update preferences, then get userdata. \n\t\t\tAuthService.setAuthKey(localStorage.getItem('auth'));\n\t\t\tthis.state.userdata = JSON.parse(localStorage.getItem('userdata'));\n\t\t} else { \n\t\t\tthis.state.userdata = undefined; \n\t\t}\n\n\t\t// Get product data from LS \n\t\tlet idnum = this.props.location.pathname; \n\t\tidnum = idnum.split(\"/\");\n\t\tidnum = idnum[2];\n\t\tthis.state.product_id = idnum; \n\t\t\tthis.state.productpage = JSON.parse(localStorage.getItem(this.state.product_id));\n\t\t\tif(this.state.productpage == null || this.state.productpage === undefined) { \n\t\t\t\tthis.props.history.push('/404');\n\t\t\t}\n\n\t} \n\n\tgetImageB64 = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t}\n\t\tconst obj = this.state.productpage; \n\t\tconst binary = obj.img_url; \n\t\treturn binary; \n\t} \n\n\trenderIngredientsNormally = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t}\n\t\tconst obj = this.state.productpage; \n\t\tlet ingredients = obj.contents; \n\t\tlet panels = []; \n\t\tObject.keys(ingredients).forEach(function(key,index) {\n\t\t\tif(ingredients[key].length != 0 && key != null) { \n\t\t\t\tpanels.push( \n\t\t\t\t\t(\n\t\t\t\t\t\t<AccordionPanel label={key}>\n\t\t\t\t\t\t\t{renderIngredientIcon(null, ingredients[key])}  \n\t\t\t\t\t\t</AccordionPanel> \n\t\t\t\t\t)\n\t\t\t\t) \n\t\t\t} \n\t\t});\n\n\t\treturn( \n\t\t\t<Accordion> \n\t\t\t\t{panels}\t\n\t\t\t</Accordion> \n\t\t); \n\t} \n\n\trenderIngredientsPreferenced = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t} \n\t\tconst product_obj = this.state.productpage; \n\t\tconst userdata = this.state.userdata;\n\t\tlet ingredients = product_obj.contents;\n\t\tlet panels = []; \n\n\t\tObject.keys(ingredients).forEach(function(key, index) { \n\t\t\tif(ingredients[key].length != 0 && key != null) { \n\t\t\t\tpanels.push( \n\t\t\t\t\t<AccordionPanel label={key}> \n\t\t\t\t\t\t{renderIngredientIcon(userdata.preferences, ingredients[key])} \n\t\t\t\t\t</AccordionPanel> \n\t\t\t\t); \n\t\t\t} \n\t\t}); \n\n\t\treturn( \n\t\t\t<Accordion>\t\t\n\t\t\t\t{panels} \n\t\t\t</Accordion> \n\t\t); \n\t} \n\n\trenderDistribution = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t}\n\t\tlet dist_content = [];\n\t\tconst obj = this.state.productpage; \n\t\tlet ingredients = obj.contents;\n\t\tlet max = 0; \n\t\tObject.keys(ingredients).forEach(function(key,index) {\n\t\t\tlet curr_obj = {}; \n\t\t\tif(ingredients[key].length != 0 && key != null) { \n\t\t\t\tcurr_obj = { value: Number(ingredients[key].length), label: String(key) };\n\t\t\t\tdist_content.push(curr_obj);\n\t\t\t\tmax += ingredients[key].length; \n\t\t\t} \n\t\t});\n\t\tdist_content.sort(); \n\n\t\treturn( \n\t\t\t<Box width=\"400px\" > \n\t\t\t\t<Distribution width=\"400px\" values={dist_content}> \n\t\t\t\t{ value => (\n\t\t\t\t\t<Box pad=\"small\" background={Colors.primary} fill>\n\t\t\t\t\t\t<Text size=\"12pt\" color={Colors.grey3}>{value.value} {value.label}</Text>\n\t\t\t\t\t</Box>\n\t\t\t\t)}  \n\t\t\t</Distribution>\n\t\t</Box> \n\t\t);\n\t} \n\n\trenderProductPage = () => {\n\t\treturn( \n\t\t\t<Box direction=\"column\" pad=\"medium\" align=\"center\" width=\"625px\" fill>\n\t\t\t\t<Box direction=\"row\" gap=\"medium\" justify=\"between\"> \n\t\t\t\t\t<Carousel pad=\"medium\">\n\t\t\t\t\t\t<img alt=\"Image not found\" src={`${this.getImageB64()}`} height=\"200px\" width=\"200px\"/>\n\t\t\t\t\t</Carousel>\n\t\t\t\t\t{this.renderDistribution()}\n\t\t\t\t</Box>\n\n\t\t\t\t<Box margin=\"medium\"  width=\"625px\">\n\t\t\t\t\t{eval(this.state.auth) ? (this.renderIngredientsPreferenced()): ( this.renderIngredientsNormally() )}\n\t\t\t\t</Box>\n\t\t\t</Box> \n\t\t); \n\t} \n\n\n\n\trender() { \n\n\t\tif(this.state.productpage === undefined || this.state.productpage === null) { \n\t\t\treturn(<Redirect to='/404'/>)\n\t\t}\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<Box margin=\"large\" justify=\"center\" align=\"center\">\n\t\t\t\t\t<Box justify=\"between\" width=\"100%\" direction=\"row\"> \n\t\t\t\t\t\t<Box width=\"33%\"  justify=\"center\" align=\"start\"   pad={{ left: \"large\" }}>\n\t\t\t\t\t\t\t<Link to='/upload'>\n\t\t\t\t\t\t\t\t{<Icons.LinkPrevious color={Colors.dark3} size=\"large\" justify=\"left\" align=\"left\"/>}\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Box> \n\t\t\t\t\t\t<Box width=\"33%\" justify=\"center\" align=\"center\"> \n\t\t\t\t\t\t\t{Title(\"Scan Results:\")}\n\t\t\t\t\t\t</Box> \n\t\t\t\t\t\t<Box direction=\"row\" width=\"33%\" justify=\"start\" pad={{ left: \"medium\" }}>\n\t\t\t\t\t\t\t<Box direction=\"column\" align=\"center\"> \n\t\t\t\t\t\t\t\t{eval(this.state.auth) && <SaveModal />}\n\t\t\t\t\t\t\t</Box> \n\t\t\t\t\t\t</Box> \n\t\t\t\t\t</Box> \n\t\t\t\t\t<div> \n\t\t\t\t\t\t<Text size=\"12pt\" color={Colors.grey1}> Not sure how it works? You can find a guide </Text> \n\t\t\t\t\t\t<Text size=\"12pt\" color={Colors.primary}>here</Text>\n\t\t\t\t\t</div> \n\t\t\t\t\t{this.renderProductPage()}\n\t\t\t\t\t<Box direction=\"row\" justify=\"start\" width=\"23.5%\"> \n\t\t\t\t\t\t<Box width=\"10%\"/>\n\t\t\t\t\t</Box> \n\t\t\t\t</Box>\n\t\t\t</div>\n\t\t);\t\n\t}\n} \n\n*/\n// ---------------------------------// ---------------------------------// ---------------------------------\n// ---------------------------------// ---------------------------------// ---------------------------------\n\nvar ProductPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProductPage, _Component);\n\n  function ProductPage(props) {\n    var _this;\n\n    _classCallCheck(this, ProductPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProductPage).call(this, props));\n\n    _this.loadingScreen = function () {\n      if (_this.state.loaderr !== undefined) {\n        return React.createElement(Box, {\n          align: \"center\",\n          gap: \"small\",\n          fill: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 398\n          },\n          __self: this\n        }, React.createElement(Box, {\n          height: \"20%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 399\n          },\n          __self: this\n        }), React.createElement(Box, {\n          align: \"center\",\n          pad: \"medium\",\n          gap: \"medium\",\n          border: {\n            color: \"status-error\",\n            size: \"medium\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 400\n          },\n          __self: this\n        }, React.createElement(Icons.Alert, {\n          size: \"xlarge\",\n          color: \"status-error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 401\n          },\n          __self: this\n        }), React.createElement(Text, {\n          color: \"status-error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 402\n          },\n          __self: this\n        }, \"Failure loading: \", _this.state.product_id, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 402\n          },\n          __self: this\n        }), \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 402\n          },\n          __self: this\n        }), React.createElement(Link, {\n          to: \"/upload\",\n          style: {\n            textDecoration: \"none\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 403\n          },\n          __self: this\n        }, React.createElement(Box, {\n          direction: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 404\n          },\n          __self: this\n        }, React.createElement(Icons.LinkPrevious, {\n          color: \"status-error\",\n          size: \"medium\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 405\n          },\n          __self: this\n        }), React.createElement(Box, {\n          width: \"10px\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 406\n          },\n          __self: this\n        }), React.createElement(Text, {\n          color: \"status-error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 407\n          },\n          __self: this\n        }, \"Go back\"))))));\n      } else {\n        return React.createElement(Box, {\n          align: \"center\",\n          gap: \"large\",\n          fill: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 416\n          },\n          __self: this\n        }, React.createElement(Box, {\n          height: \"25%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 417\n          },\n          __self: this\n        }), React.createElement(PreviewLoader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 418\n          },\n          __self: this\n        }), React.createElement(Text, {\n          color: Colors.grey1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 419\n          },\n          __self: this\n        }, \"Loading page: \", _this.state.product_id));\n      }\n    };\n\n    _this.state = {}; // If page has acquired everything \n\n    _this.state.loading = true; // If loading resulted in an error \n\n    _this.state.loaderr = undefined; // The ID of this product page \n\n    _this.state.product_id = _this.props.match.params.productId; // A check to see if the user is authenticated \n\n    _this.state.loggedin = localStorage.getItem('auth'); // If the user is logged in, get their userdata \n\n    _this.state.userdata = JSON.parse(localStorage.getItem('userdata')); // Check if this productID has been saved before (by the user)\n\n    _this.state.saved = undefined; // Product Results page data \n\n    _this.state.page = undefined; // Ingredients list\n\n    _this.state.ingredients = undefined;\n    return _this;\n  }\n\n  _createClass(ProductPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      ScanService.getProductPage(this.state.product_id).then(function (res) {\n        console.log(res.data);\n      }).catch(function (e) {\n        _this2.setState({\n          loaderr: e\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loading = this.state.loading;\n\n      if (loading === true) {\n        return React.createElement(Box, {\n          fill: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 430\n          },\n          __self: this\n        }, loading && this.loadingScreen());\n      } else {\n        return React.createElement(Box, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 436\n          },\n          __self: this\n        });\n      }\n    }\n  }]);\n\n  return ProductPage;\n}(Component); // ---------------------------------// ---------------------------------// ---------------------------------\n// ---------------------------------// ---------------------------------// ---------------------------------\n\n\nvar PreviewLoader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PreviewLoader, _React$Component);\n\n  function PreviewLoader() {\n    var _getPrototypeOf2;\n\n    var _this3;\n\n    _classCallCheck(this, PreviewLoader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this3 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PreviewLoader)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this3.state = {\n      value: 10\n    };\n    return _this3;\n  }\n\n  _createClass(PreviewLoader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this4 = this;\n\n      this.timer = setInterval(function () {\n        var value = _this4.state.value;\n\n        _this4.setState({\n          value: value < 100 ? value + 8 : 0\n        });\n      }, 50);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var value = this.state.value;\n      return React.createElement(Meter, {\n        margin: \"0\",\n        height: \"100px\",\n        width: \"100px\",\n        type: \"circle\",\n        size: \"small\",\n        values: [{\n          value: value,\n          color: value > 10 ? \"\".concat(Colors.primary) : \"\".concat(Colors.primary)\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return PreviewLoader;\n}(React.Component);\n\nvar SaveModal =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(SaveModal, _Component2);\n\n  function SaveModal(props) {\n    var _this5;\n\n    _classCallCheck(this, SaveModal);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(SaveModal).call(this, props));\n\n    _this5.onOpen = function () {\n      return _this5.setState({\n        open: true\n      });\n    };\n\n    _this5.onClose = function () {\n      return _this5.setState({\n        open: undefined\n      });\n    };\n\n    _this5.updateName = function (name) {\n      _this5.setState({\n        savedName: name\n      });\n    };\n\n    _this5.sendSave = function () {\n      UserService.saveProduct(_this5.state.savedName, _this5.state.savedID).then(function (res) {\n        _this5.onClose();\n      });\n    };\n\n    _this5.renderModal = function () {\n      return React.createElement(Layer, {\n        position: \"center\",\n        modal: true,\n        onClickOutside: _this5.onClose,\n        onEsc: _this5.onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500\n        },\n        __self: this\n      }, React.createElement(Box, {\n        direction: \"column\",\n        pad: \"medium\",\n        gap: \"medium\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501\n        },\n        __self: this\n      }, React.createElement(Box, {\n        direction: \"row\",\n        justify: \"between\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        },\n        __self: this\n      }, React.createElement(Text, {\n        size: \"24pt\",\n        color: Colors.dark3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503\n        },\n        __self: this\n      }, \" Save Scan Results\"), React.createElement(Button, {\n        icon: React.createElement(Icons.Close, {\n          color: Colors.dark3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 504\n          },\n          __self: this\n        }),\n        onClick: _this5.onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504\n        },\n        __self: this\n      })), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506\n        },\n        __self: this\n      }, \"Save as: \"), React.createElement(TextInputBar, {\n        onSet: _this5.updateName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: Colors.primary,\n        label: React.createElement(Text, {\n          color: Colors.primary,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 508\n          },\n          __self: this\n        }, \"Submit\"),\n        onClick: _this5.sendSave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508\n        },\n        __self: this\n      })));\n    };\n\n    _this5.state = {};\n    _this5.state.savedName = undefined;\n    _this5.state.savedID = _this5.props.productID;\n    return _this5;\n  }\n\n  _createClass(SaveModal, [{\n    key: \"render\",\n    value: function render() {\n      var open = this.state.open;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517\n        },\n        __self: this\n      }, React.createElement(Button, {\n        icon: React.createElement(Icons.Save, {\n          size: \"large\",\n          color: Colors.dark3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 518\n          },\n          __self: this\n        }),\n        onClick: this.onOpen,\n        plain: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }), open && this.renderModal());\n    }\n  }]);\n\n  return SaveModal;\n}(Component);\n\nexport default withRouter(ProductPage);","map":{"version":3,"sources":["/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/src/components/Product.js"],"names":["React","Component","Grommet","DataTable","grommet","Meter","TextInput","DropButton","Button","Box","Heading","Menu","Paragraph","Carousel","Accordion","AccordionPanel","Text","Image","Distribution","Layer","Icons","withRouter","Redirect","Route","Link","Router","BrowserRouter","Style","Colors","AuthService","UserService","ScanService","ProductPage","props","loadingScreen","state","loaderr","undefined","color","size","product_id","textDecoration","grey1","loading","match","params","productId","loggedin","localStorage","getItem","userdata","JSON","parse","saved","page","ingredients","getProductPage","then","res","console","log","data","catch","e","setState","PreviewLoader","value","timer","setInterval","clearInterval","primary","SaveModal","onOpen","open","onClose","updateName","name","savedName","sendSave","saveProduct","savedID","renderModal","dark3","productID"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport { Grommet, DataTable, grommet, Meter, TextInput, DropButton, Button, Box, Heading, Menu, Paragraph, Carousel, Accordion, AccordionPanel, Text, Image, Distribution, Layer } from 'grommet';\nimport * as Icons from 'grommet-icons';\nimport { withRouter, Redirect, Route, Link, Router, BrowserRouter } from 'react-router-dom';\n\nimport Style from './styles/Style';\nimport Colors from './styles/Color';\nimport AuthService from './actions/AuthService';\nimport UserService from './actions/UserService';\nimport ScanService from './actions/ScanService';\n\n/* \n\nclass TextInputBar extends Component {\n\tstate = { value: \"\" };\n\n\tref = React.createRef();\n\tonChange = event => { \n\t\tthis.setState({ value: event.target.value })\n\t};\n\n\tsetName = (name) => this.props.onSet(name); \n\n\trender() {\n\t\tconst { value } = this.state;\n\t\treturn (\n\t\t\t<Box width=\"medium\">\n\t\t\t\t<TextInput ref={this.ref} value={value} onChange={this.onChange} />\n\t\t\t</Box>\n\t\t);\n\t}\n}\n\nclass SaveModal extends Component {\n\n\tconstructor(props){ \n\t\tsuper(props); \n\t\tthis.state = {}; \n\t\tthis.state.savedName = undefined; \n\t\tthis.state.savedID = this.props.productID; \n\t}\n\n\tonOpen = () => this.setState({ open: true });\n\tonClose = () => this.setState({ open: undefined });\n\n\tupdateName = (name) => { \n\t\tthis.setState({savedName: name});\n\t}\n\n\tsendSave = () => {\n\t\tUserService.saveProduct(this.state.savedName, this.state.savedID).then(res => { \n\t\t\tthis.onClose();\n\t\t})\n\t}\n\n\trenderModal = () => { \n\t\treturn(\n\t\t\t<Layer position=\"center\" modal onClickOutside={this.onClose} onEsc={this.onClose}>\n\t\t\t\t<Box direction=\"column\" pad=\"medium\" gap=\"medium\">\n\t\t\t\t\t<Box direction=\"row\" justify=\"between\">\n\t\t\t\t\t\t<Text size=\"24pt\" color={Colors.dark3}> Save Scan Results</Text>\n\t\t\t\t\t\t<Button icon={<Icons.Close color={Colors.dark3} />} onClick={this.onClose}/>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Text>Save as: </Text> \n\t\t\t\t\t<TextInputBar onSet={this.updateName}/>\n\t\t\t\t\t<Button color={Colors.primary} label={<Text color={Colors.primary}>Submit</Text>} onClick={this.sendSave}/>\n\t\t\t\t</Box>\n\t\t\t</Layer>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { open } = this.state;\n\t\treturn (\t\t\t\n\t\t\t<div>\n\t\t\t\t<Button icon={<Icons.Save size=\"large\" color={Colors.dark3}/>}  onClick={this.onOpen}  plain/>\n\t\t\t\t{ open && this.renderModal()}\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nclass IngredientModal extends Component {\n\n\tstate = {}; \n\n\tcomponentDidMount() { \n\t\tlet data = this.getIngredientData(); \n\t\tthis.setState({ ingredientname: data.name, ingredientdesc: data.desc});\n\t} \n\n\tgetIngredientData = () => { \n\t\treturn this.props.ingredient; \t\n\t}\n\n\tgetColor = () => {\n\t\tif(this.props.color != undefined) {\n\t\t\treturn this.props.color; \n\t\t} else { \n\t\t\treturn;\n\t\t}\t\n\t} \n\n\tonOpen = () => this.setState({ open: true });\n\tonClose = () => this.setState({ open: undefined });\n\n\trenderModal = () => { \n\t\treturn(\n\t\t\t<Layer position=\"center\" modal onClickOutside={this.onClose} onEsc={this.onClose}>\n\t\t\t\t<Box direction=\"row\" pad={{ left: 'medium', right: 'medium', top: 'medium'}} justify=\"between\">\n\t\t\t\t\t<Text size=\"24pt\" color={Colors.dark3}> Ingredient: {this.state.ingredientname}</Text>\n\t\t\t\t\t<Button icon={<Icons.Close color={Colors.dark3} />} onClick={this.onClose}/>\n\t\t\t\t</Box>\n\t\t\t\t<Box pad=\"medium\"> \n\t\t\t\t\t<Text size=\"12pt\" > {this.state.ingredientdesc}</Text> \n\t\t\t\t</Box> \n\t\t\t</Layer>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { open } = this.state;\n\t\treturn (\t\t\t\n\t\t\t<Box>\n\t\t\t\t<Button label={<Text size=\"10pt\"  color={this.getColor()}>{`${this.state.ingredientname}, `}</Text>}  onClick={this.onOpen} plain />\n\t\t\t\t{ open && this.renderModal()}\n\t\t\t</Box>\n\t\t);\n\t}\n\n}\n\nconst renderIngredientIcon = (preferences, ingredientlist) => { \n\tlet ingredientbuttons = []; \n\tlet pref_colors = {\n\t\t0: \"\", \n\t\t1: \"red\",\n\t\t2: \"blue\", \n\t\t3: \"green\", \n\t\t4: \"purple\", \n\t\t5: \"#33D1FF\", \n\t} \n\tlet match = false;\n\tlet color = \"\";\n\tlet col_index = 0; \n\tingredientlist.forEach(function (item) {\n\t\tif(preferences != null ) {\n\t\t\tmatch = false; \n\t\t\tObject.keys(preferences.special).forEach(function(key, index) {\n\t\t\t\tif(preferences.special[key].name == item.name) { \n\t\t\t\t\tmatch = true;\n\t\t\t\t\tcol_index = preferences.special[index].color;\n\t\t\t\t\tcolor = pref_colors[col_index]; \n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif(match == true) { \n\t\t\t\tingredientbuttons.push(<IngredientModal ingredient={item} color={color} />); \n\t\t\t} else {\n\t\t\t\tingredientbuttons.push(<IngredientModal ingredient={item} />); \n\t\t\t}\n\t\t} else { \n\t\t\tingredientbuttons.push(<IngredientModal ingredient={item} />);\n\t\t} \n\t});\n\n\treturn(\n\t\t<div>\n\t\t\t{ingredientbuttons}\n\t\t</div> \n\t); \n} \n\nclass ProductPage extends Component { \n\n\tconstructor(props) {  \n\t\tsuper(props); \n\t\t\n\t\t// Authentication values \n\t\tlet authval = AuthService.hasAuthKey(); \n\t\tthis.state = {}; \n\t\tthis.state.auth = authval;\n\t\t\n\t\t// If logged in, get prefs \n\t\tif(authval == true) { \n\t\t\t// Update preferences, then get userdata. \n\t\t\tAuthService.setAuthKey(localStorage.getItem('auth'));\n\t\t\tthis.state.userdata = JSON.parse(localStorage.getItem('userdata'));\n\t\t} else { \n\t\t\tthis.state.userdata = undefined; \n\t\t}\n\n\t\t// Get product data from LS \n\t\tlet idnum = this.props.location.pathname; \n\t\tidnum = idnum.split(\"/\");\n\t\tidnum = idnum[2];\n\t\tthis.state.product_id = idnum; \n\t\t\tthis.state.productpage = JSON.parse(localStorage.getItem(this.state.product_id));\n\t\t\tif(this.state.productpage == null || this.state.productpage === undefined) { \n\t\t\t\tthis.props.history.push('/404');\n\t\t\t}\n\n\t} \n\n\tgetImageB64 = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t}\n\t\tconst obj = this.state.productpage; \n\t\tconst binary = obj.img_url; \n\t\treturn binary; \n\t} \n\n\trenderIngredientsNormally = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t}\n\t\tconst obj = this.state.productpage; \n\t\tlet ingredients = obj.contents; \n\t\tlet panels = []; \n\t\tObject.keys(ingredients).forEach(function(key,index) {\n\t\t\tif(ingredients[key].length != 0 && key != null) { \n\t\t\t\tpanels.push( \n\t\t\t\t\t(\n\t\t\t\t\t\t<AccordionPanel label={key}>\n\t\t\t\t\t\t\t{renderIngredientIcon(null, ingredients[key])}  \n\t\t\t\t\t\t</AccordionPanel> \n\t\t\t\t\t)\n\t\t\t\t) \n\t\t\t} \n\t\t});\n\n\t\treturn( \n\t\t\t<Accordion> \n\t\t\t\t{panels}\t\n\t\t\t</Accordion> \n\t\t); \n\t} \n\n\trenderIngredientsPreferenced = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t} \n\t\tconst product_obj = this.state.productpage; \n\t\tconst userdata = this.state.userdata;\n\t\tlet ingredients = product_obj.contents;\n\t\tlet panels = []; \n\n\t\tObject.keys(ingredients).forEach(function(key, index) { \n\t\t\tif(ingredients[key].length != 0 && key != null) { \n\t\t\t\tpanels.push( \n\t\t\t\t\t<AccordionPanel label={key}> \n\t\t\t\t\t\t{renderIngredientIcon(userdata.preferences, ingredients[key])} \n\t\t\t\t\t</AccordionPanel> \n\t\t\t\t); \n\t\t\t} \n\t\t}); \n\n\t\treturn( \n\t\t\t<Accordion>\t\t\n\t\t\t\t{panels} \n\t\t\t</Accordion> \n\t\t); \n\t} \n\n\trenderDistribution = () => {\n\t\twhile(this.state.productpage == null) { \n\t\t\tsetInterval(() => {}, 500);\n\t\t}\n\t\tlet dist_content = [];\n\t\tconst obj = this.state.productpage; \n\t\tlet ingredients = obj.contents;\n\t\tlet max = 0; \n\t\tObject.keys(ingredients).forEach(function(key,index) {\n\t\t\tlet curr_obj = {}; \n\t\t\tif(ingredients[key].length != 0 && key != null) { \n\t\t\t\tcurr_obj = { value: Number(ingredients[key].length), label: String(key) };\n\t\t\t\tdist_content.push(curr_obj);\n\t\t\t\tmax += ingredients[key].length; \n\t\t\t} \n\t\t});\n\t\tdist_content.sort(); \n\n\t\treturn( \n\t\t\t<Box width=\"400px\" > \n\t\t\t\t<Distribution width=\"400px\" values={dist_content}> \n\t\t\t\t{ value => (\n\t\t\t\t\t<Box pad=\"small\" background={Colors.primary} fill>\n\t\t\t\t\t\t<Text size=\"12pt\" color={Colors.grey3}>{value.value} {value.label}</Text>\n\t\t\t\t\t</Box>\n\t\t\t\t)}  \n\t\t\t</Distribution>\n\t\t</Box> \n\t\t);\n\t} \n\n\trenderProductPage = () => {\n\t\treturn( \n\t\t\t<Box direction=\"column\" pad=\"medium\" align=\"center\" width=\"625px\" fill>\n\t\t\t\t<Box direction=\"row\" gap=\"medium\" justify=\"between\"> \n\t\t\t\t\t<Carousel pad=\"medium\">\n\t\t\t\t\t\t<img alt=\"Image not found\" src={`${this.getImageB64()}`} height=\"200px\" width=\"200px\"/>\n\t\t\t\t\t</Carousel>\n\t\t\t\t\t{this.renderDistribution()}\n\t\t\t\t</Box>\n\n\t\t\t\t<Box margin=\"medium\"  width=\"625px\">\n\t\t\t\t\t{eval(this.state.auth) ? (this.renderIngredientsPreferenced()): ( this.renderIngredientsNormally() )}\n\t\t\t\t</Box>\n\t\t\t</Box> \n\t\t); \n\t} \n\n\n\n\trender() { \n\n\t\tif(this.state.productpage === undefined || this.state.productpage === null) { \n\t\t\treturn(<Redirect to='/404'/>)\n\t\t}\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<Box margin=\"large\" justify=\"center\" align=\"center\">\n\t\t\t\t\t<Box justify=\"between\" width=\"100%\" direction=\"row\"> \n\t\t\t\t\t\t<Box width=\"33%\"  justify=\"center\" align=\"start\"   pad={{ left: \"large\" }}>\n\t\t\t\t\t\t\t<Link to='/upload'>\n\t\t\t\t\t\t\t\t{<Icons.LinkPrevious color={Colors.dark3} size=\"large\" justify=\"left\" align=\"left\"/>}\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Box> \n\t\t\t\t\t\t<Box width=\"33%\" justify=\"center\" align=\"center\"> \n\t\t\t\t\t\t\t{Title(\"Scan Results:\")}\n\t\t\t\t\t\t</Box> \n\t\t\t\t\t\t<Box direction=\"row\" width=\"33%\" justify=\"start\" pad={{ left: \"medium\" }}>\n\t\t\t\t\t\t\t<Box direction=\"column\" align=\"center\"> \n\t\t\t\t\t\t\t\t{eval(this.state.auth) && <SaveModal />}\n\t\t\t\t\t\t\t</Box> \n\t\t\t\t\t\t</Box> \n\t\t\t\t\t</Box> \n\t\t\t\t\t<div> \n\t\t\t\t\t\t<Text size=\"12pt\" color={Colors.grey1}> Not sure how it works? You can find a guide </Text> \n\t\t\t\t\t\t<Text size=\"12pt\" color={Colors.primary}>here</Text>\n\t\t\t\t\t</div> \n\t\t\t\t\t{this.renderProductPage()}\n\t\t\t\t\t<Box direction=\"row\" justify=\"start\" width=\"23.5%\"> \n\t\t\t\t\t\t<Box width=\"10%\"/>\n\t\t\t\t\t</Box> \n\t\t\t\t</Box>\n\t\t\t</div>\n\t\t);\t\n\t}\n} \n\n*/\n\n\n// ---------------------------------// ---------------------------------// ---------------------------------\n// ---------------------------------// ---------------------------------// ---------------------------------\n\nclass ProductPage extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\n\t\t// If page has acquired everything \n\t\tthis.state.loading = true;\n\t\t// If loading resulted in an error \n\t\tthis.state.loaderr = undefined;\n\t\t// The ID of this product page \n\t\tthis.state.product_id = this.props.match.params.productId;\n\t\t// A check to see if the user is authenticated \n\t\tthis.state.loggedin = localStorage.getItem('auth');\n\t\t// If the user is logged in, get their userdata \n\t\tthis.state.userdata = JSON.parse(localStorage.getItem('userdata'));\n\t\t// Check if this productID has been saved before (by the user)\n\t\tthis.state.saved = undefined;\n\t\t// Product Results page data \n\t\tthis.state.page = undefined; \n\t\t// Ingredients list\n\t\tthis.state.ingredients = undefined; \n\t}\n\n\tcomponentDidMount() {\n\t\tScanService.getProductPage(this.state.product_id)\n\t\t.then(res => { \n\t\t\tconsole.log(res.data);\n\t\t})\n\t\t.catch(e => { \n\t\t\tthis.setState({ loaderr: e });\n\t\t}); \t\n\t}\n\n\tloadingScreen = () => {\n\t\tif (this.state.loaderr !== undefined) {\n\t\t\treturn (\n\t\t\t\t<Box align=\"center\" gap=\"small\" fill>\n\t\t\t\t\t<Box height=\"20%\" />\n\t\t\t\t\t<Box align=\"center\" pad=\"medium\" gap=\"medium\" border={{ color: \"status-error\", size: \"medium\" }}>\n\t\t\t\t\t\t<Icons.Alert size=\"xlarge\" color=\"status-error\" />\n\t\t\t\t\t\t<Text color=\"status-error\">Failure loading: {this.state.product_id} <br /> <br />\n\t\t\t\t\t\t\t<Link to='/upload' style={{ textDecoration: \"none\" }}>\n\t\t\t\t\t\t\t\t<Box direction=\"row\">\n\t\t\t\t\t\t\t\t\t<Icons.LinkPrevious color=\"status-error\" size=\"medium\" />\n\t\t\t\t\t\t\t\t\t<Box width=\"10px\" />\n\t\t\t\t\t\t\t\t\t<Text color=\"status-error\">Go back</Text>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Box align=\"center\" gap=\"large\" fill>\n\t\t\t\t\t<Box height=\"25%\" />\n\t\t\t\t\t<PreviewLoader />\n\t\t\t\t\t<Text color={Colors.grey1}>Loading page: {this.state.product_id}</Text>\n\t\t\t\t</Box>\n\t\t\t)\n\t\t}\n\t}\n\n\n\trender() {\n\t\tlet { loading } = this.state;\n\t\tif(loading === true) { \n\t\t\treturn( \n\t\t\t\t<Box fill>\n\t\t\t\t{loading && this.loadingScreen()}\n\t\t\t\t</Box>\n\t\t\t)\n\t\t} else { \n\t\t\treturn (\n\t\t\t\t<Box />\n\t\t\t)\n\t\t}\n\n\t}\n\n}\n\n\n// ---------------------------------// ---------------------------------// ---------------------------------\n// ---------------------------------// ---------------------------------// ---------------------------------\n\nclass PreviewLoader extends React.Component {\n\tstate = { value: 10 };\n\n\tcomponentDidMount() {\n\t\tthis.timer = setInterval(() => {\n\t\t\tconst { value } = this.state;\n\t\t\tthis.setState({ value: value < 100 ? value + 8 : 0 });\n\t\t}, 50);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.timer);\n\t}\n\n\trender() {\n\t\tconst { value } = this.state;\n\t\treturn (\n\t\t\t<Meter\n\t\t\t\tmargin=\"0\"\n\t\t\t\theight=\"100px\"\n\t\t\t\twidth=\"100px\"\n\t\t\t\ttype=\"circle\"\n\t\t\t\tsize=\"small\"\n\t\t\t\tvalues={[{ value, color: value > 10 ? `${Colors.primary}` : `${Colors.primary}` }]} />\n\t\t);\n\t}\n}\n\nclass SaveModal extends Component {\n\n\tconstructor(props){ \n\t\tsuper(props); \n\t\tthis.state = {}; \n\t\tthis.state.savedName = undefined; \n\t\tthis.state.savedID = this.props.productID; \n\t}\n\n\tonOpen = () => this.setState({ open: true });\n\tonClose = () => this.setState({ open: undefined });\n\n\tupdateName = (name) => { \n\t\tthis.setState({savedName: name});\n\t}\n\n\tsendSave = () => {\n\t\tUserService.saveProduct(this.state.savedName, this.state.savedID).then(res => { \n\t\t\tthis.onClose();\n\t\t})\n\t}\n\n\trenderModal = () => { \n\t\treturn(\n\t\t\t<Layer position=\"center\" modal onClickOutside={this.onClose} onEsc={this.onClose}>\n\t\t\t\t<Box direction=\"column\" pad=\"medium\" gap=\"medium\">\n\t\t\t\t\t<Box direction=\"row\" justify=\"between\">\n\t\t\t\t\t\t<Text size=\"24pt\" color={Colors.dark3}> Save Scan Results</Text>\n\t\t\t\t\t\t<Button icon={<Icons.Close color={Colors.dark3} />} onClick={this.onClose}/>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Text>Save as: </Text> \n\t\t\t\t\t<TextInputBar onSet={this.updateName}/>\n\t\t\t\t\t<Button color={Colors.primary} label={<Text color={Colors.primary}>Submit</Text>} onClick={this.sendSave}/>\n\t\t\t\t</Box>\n\t\t\t</Layer>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { open } = this.state;\n\t\treturn (\t\t\t\n\t\t\t<div>\n\t\t\t\t<Button icon={<Icons.Save size=\"large\" color={Colors.dark3}/>}  onClick={this.onOpen}  plain/>\n\t\t\t\t{ open && this.renderModal()}\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default withRouter(ProductPage); \n"]},"metadata":{},"sourceType":"module"}