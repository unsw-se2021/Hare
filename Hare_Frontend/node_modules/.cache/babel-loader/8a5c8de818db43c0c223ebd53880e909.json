{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport Markdown from 'markdown-to-jsx';\nimport { deepMerge } from '../../utils';\nimport { Heading } from '../Heading';\nimport { Paragraph } from '../Paragraph';\nimport { Anchor } from '../Anchor';\nimport { Image } from '../Image';\nimport { Table } from '../Table';\nimport { TableBody } from '../TableBody';\nimport { TableCell } from '../TableCell';\nimport { TableFooter } from '../TableFooter';\nimport { TableHeader } from '../TableHeader';\nimport { TableRow } from '../TableRow';\n\nvar GrommetMarkdown =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(GrommetMarkdown, _Component);\n\n  function GrommetMarkdown() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = GrommetMarkdown.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        components = _this$props.components,\n        options = _this$props.options,\n        theme = _this$props.theme,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"components\", \"options\", \"theme\"]);\n\n    var heading = [1, 2, 3, 4].reduce(function (obj, level) {\n      var result = _extends({}, obj);\n\n      result[\"h\" + level] = {\n        component: Heading,\n        props: {\n          level: level\n        }\n      };\n      return result;\n    }, {});\n    var overrides = deepMerge({\n      a: {\n        component: Anchor\n      },\n      img: {\n        component: Image\n      },\n      p: {\n        component: Paragraph\n      },\n      table: {\n        component: Table\n      },\n      td: {\n        component: TableCell\n      },\n      tbody: {\n        component: TableBody\n      },\n      tfoot: {\n        component: TableFooter\n      },\n      th: {\n        component: TableCell\n      },\n      thead: {\n        component: TableHeader\n      },\n      tr: {\n        component: TableRow\n      }\n    }, heading, components, options && options.overrides);\n    return React.createElement(Markdown, _extends({\n      options: _extends({}, options, {\n        overrides: overrides\n      })\n    }, rest));\n  };\n\n  return GrommetMarkdown;\n}(Component);\n\nvar GrommetMarkdownDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  GrommetMarkdownDoc = require('./doc').doc(GrommetMarkdown); // eslint-disable-line global-require\n}\n\nvar GrommetMarkdownWrapper = GrommetMarkdownDoc || GrommetMarkdown;\nexport { GrommetMarkdownWrapper as Markdown };","map":null,"metadata":{},"sourceType":"module"}