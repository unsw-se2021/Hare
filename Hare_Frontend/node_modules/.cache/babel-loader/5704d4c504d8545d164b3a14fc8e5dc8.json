{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar sumReducer = function sumReducer(accumulated, next) {\n  return accumulated + next;\n};\n\nvar minReducer = function minReducer(accumulated, next) {\n  return accumulated === undefined ? next : Math.min(accumulated, next);\n};\n\nvar maxReducer = function maxReducer(accumulated, next) {\n  return accumulated === undefined ? next : Math.max(accumulated, next);\n};\n\nvar reducers = {\n  max: maxReducer,\n  min: minReducer,\n  sum: sumReducer\n};\n\nvar aggregateColumn = function aggregateColumn(column, data) {\n  var value;\n\n  if (column.aggregate === 'avg') {\n    value = data.map(function (d) {\n      return d[column.property];\n    }).reduce(sumReducer);\n    value /= data.length;\n  } else {\n    value = data.map(function (d) {\n      return d[column.property];\n    }).reduce(reducers[column.aggregate], 0);\n  }\n\n  return value;\n};\n\nvar findPrimary = function findPrimary(nextProps, prevState, nextState) {\n  var columns = nextProps.columns,\n      primaryKey = nextProps.primaryKey;\n  var primaryProperty;\n  columns.forEach(function (column) {\n    // remember the first key property\n    if (column.primary && !primaryProperty) {\n      primaryProperty = column.property;\n    }\n  });\n\n  if (!primaryProperty && columns.length > 0) {\n    primaryProperty = primaryKey || columns[0].property;\n  }\n\n  return _extends({}, nextState, {\n    primaryProperty: primaryProperty\n  });\n};\n\nvar filter = function filter(nextProps, prevState, nextState) {\n  var columns = nextProps.columns,\n      onSearch = nextProps.onSearch;\n  var data = nextState.data,\n      filters = nextState.filters;\n  var nextFilters;\n  var regexps;\n  columns.forEach(function (column) {\n    if (column.search) {\n      if (!nextFilters) {\n        nextFilters = {};\n        regexps = {};\n      }\n\n      nextFilters[column.property] = filters ? filters[column.property] || '' : ''; // don't do filtering if the caller has supplied onSearch\n\n      if (nextFilters[column.property] && column.search && !onSearch) {\n        regexps[column.property] = new RegExp(nextFilters[column.property], 'i');\n      }\n    }\n  });\n  var nextData = data;\n\n  if (nextFilters) {\n    nextData = data.filter(function (datum) {\n      return !Object.keys(regexps).some(function (property) {\n        return !regexps[property].test(datum[property]);\n      });\n    });\n  }\n\n  return _extends({}, nextState, {\n    filters: nextFilters,\n    data: nextData\n  });\n};\n\nvar aggregate = function aggregate(nextProps, prevState, nextState) {\n  var columns = nextProps.columns;\n  var data = nextState.data;\n  var aggregateValues = {};\n  columns.forEach(function (column) {\n    if (column.aggregate) {\n      aggregateValues[column.property] = aggregateColumn(column, data);\n    }\n  });\n  return _extends({}, nextState, {\n    aggregateValues: aggregateValues\n  });\n};\n\nvar buildFooterValues = function buildFooterValues(nextProps, prevState, nextState) {\n  var columns = nextProps.columns;\n  var aggregateValues = nextState.aggregateValues;\n  var showFooter;\n  var footerValues = {};\n  columns.forEach(function (column) {\n    if (column.footer) {\n      showFooter = true;\n\n      if (typeof column.footer === 'string') {\n        footerValues[column.property] = column.footer;\n      } else if (column.footer.aggregate) {\n        footerValues[column.property] = aggregateValues[column.property];\n      }\n    }\n  });\n  return _extends({}, nextState, {\n    footerValues: footerValues,\n    showFooter: showFooter\n  });\n};\n\nvar sortData = function sortData(nextProps, prevState, nextState) {\n  var sort = prevState.sort;\n  var data = nextState.data;\n  var nextData = data;\n\n  if (sort) {\n    var property = sort.property,\n        ascending = sort.ascending;\n    nextData = [].concat(data);\n    var before = ascending ? 1 : -1;\n    var after = ascending ? -1 : 1;\n    nextData.sort(function (d1, d2) {\n      if (d1[property] > d2[property]) return before;\n      if (d1[property] < d2[property]) return after;\n      return 0;\n    });\n  }\n\n  return _extends({}, nextState, {\n    data: nextData\n  });\n};\n\nvar groupData = function groupData(nextProps, prevState, nextState) {\n  var columns = nextProps.columns,\n      groupBy = nextProps.groupBy;\n  var data = nextState.data;\n  var groups;\n  var groupState;\n\n  if (groupBy) {\n    groups = [];\n    groupState = {};\n    var groupMap = {};\n    data.forEach(function (datum) {\n      var groupValue = datum[groupBy];\n\n      if (!groupMap[groupValue]) {\n        var group = {\n          data: [],\n          datum: {},\n          key: groupValue\n        };\n        group.datum[groupBy] = groupValue;\n        groups.push(group);\n        groupState[groupValue] = {\n          expanded: prevState.groupState && prevState.groupState[groupValue] ? prevState.groupState[groupValue].expanded : false\n        };\n        groupMap[groupValue] = group;\n      }\n\n      groupMap[groupValue].data.push(datum);\n    }); // calculate any aggregates\n\n    columns.forEach(function (column) {\n      if (column.aggregate) {\n        groups.forEach(function (group) {\n          group.datum[column.property] = aggregateColumn(column, group.data); // eslint-disable-line\n        });\n      }\n    });\n  }\n\n  return _extends({}, nextState, {\n    groups: groups,\n    groupState: groupState\n  });\n};\n\nexport var buildState = function buildState(nextProps, prevState) {\n  var data = nextProps.data;\n  var filters = prevState.filters,\n      sort = prevState.sort,\n      widths = prevState.widths;\n  var nextState = {\n    data: data,\n    filters: filters,\n    sort: sort,\n    widths: widths\n  };\n  nextState = findPrimary(nextProps, prevState, nextState);\n  nextState = filter(nextProps, prevState, nextState);\n  nextState = aggregate(nextProps, prevState, nextState);\n  nextState = buildFooterValues(nextProps, prevState, nextState);\n  nextState = sortData(nextProps, prevState, nextState);\n  nextState = groupData(nextProps, prevState, nextState);\n  return nextState;\n};","map":null,"metadata":{},"sourceType":"module"}