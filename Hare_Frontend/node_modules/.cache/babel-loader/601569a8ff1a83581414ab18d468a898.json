{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { defaultProps } from '../../default-props';\nimport { ThemeContext } from '../../contexts';\nimport { FocusedContainer } from '../FocusedContainer';\nimport { backgroundIsDark, findScrollParents, findVisibleParent, parseMetricToNum } from '../../utils';\nimport { Box } from '../Box';\nimport { Keyboard } from '../Keyboard';\nimport { StyledDrop } from './StyledDrop'; // using react synthetic event to be able to stop propagation that\n// would otherwise close the layer on ESC.\n\nvar preventLayerClose = function preventLayerClose(event) {\n  var key = event.keyCode ? event.keyCode : event.which;\n\n  if (key === 27) {\n    event.stopPropagation();\n  }\n};\n\nvar DropContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(DropContainer, _Component);\n\n  function DropContainer() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"dropRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addScrollListener\", function () {\n      var dropTarget = _this.props.dropTarget;\n      _this.scrollParents = findScrollParents(dropTarget);\n\n      _this.scrollParents.forEach(function (scrollParent) {\n        return scrollParent.addEventListener('scroll', _this.place);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"removeScrollListener\", function () {\n      _this.scrollParents.forEach(function (scrollParent) {\n        return scrollParent.removeEventListener('scroll', _this.place);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onClickDocument\", function (event) {\n      var _this$props = _this.props,\n          dropTarget = _this$props.dropTarget,\n          onClickOutside = _this$props.onClickOutside;\n      var dropTargetNode = dropTarget;\n      var dropNode = _this.dropRef.current;\n\n      if (onClickOutside && dropNode && // need this for ie11\n      !dropTargetNode.contains(event.target) && !dropNode.contains(event.target)) {\n        onClickOutside();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onResize\", function () {\n      _this.removeScrollListener();\n\n      _this.addScrollListener();\n\n      _this.place(false);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"place\", function (preserveHeight) {\n      var _this$props2 = _this.props,\n          align = _this$props2.align,\n          dropTarget = _this$props2.dropTarget,\n          responsive = _this$props2.responsive,\n          stretch = _this$props2.stretch,\n          theme = _this$props2.theme;\n      var windowWidth = window.innerWidth;\n      var windowHeight = window.innerHeight;\n      var target = dropTarget;\n      var container = _this.dropRef.current;\n\n      if (container && target) {\n        // clear prior styling\n        container.style.left = '';\n        container.style.top = '';\n        container.style.bottom = '';\n        container.style.width = '';\n\n        if (!preserveHeight) {\n          container.style.maxHeight = '';\n        } // get bounds\n\n\n        var targetRect = findVisibleParent(target).getBoundingClientRect();\n        var containerRect = container.getBoundingClientRect(); // determine width\n\n        var width = Math.min(stretch ? Math.max(targetRect.width, containerRect.width) : containerRect.width, windowWidth); // set left position\n\n        var left;\n\n        if (align.left) {\n          if (align.left === 'left') {\n            left = targetRect.left;\n          } else if (align.left === 'right') {\n            left = targetRect.left + targetRect.width;\n          }\n        } else if (align.right) {\n          if (align.right === 'left') {\n            left = targetRect.left - width;\n          } else if (align.right === 'right') {\n            left = targetRect.left + targetRect.width - width;\n          }\n        } else {\n          left = targetRect.left + targetRect.width / 2 - width / 2;\n        }\n\n        if (left + width > windowWidth) {\n          left -= left + width - windowWidth;\n        } else if (left < 0) {\n          left = 0;\n        } // set top or bottom position\n\n\n        var top;\n        var bottom;\n        var maxHeight = containerRect.height;\n\n        if (align.top) {\n          if (align.top === 'top') {\n            top = targetRect.top;\n          } else {\n            top = targetRect.bottom;\n          }\n\n          maxHeight = windowHeight - top;\n        } else if (align.bottom) {\n          if (align.bottom === 'bottom') {\n            bottom = targetRect.bottom;\n          } else {\n            bottom = targetRect.top;\n          }\n\n          maxHeight = bottom;\n        } else {\n          // center\n          top = targetRect.top + targetRect.height / 2 - containerRect.height / 2;\n          maxHeight = windowHeight - top;\n        } // if we can't fit it all, or we're rather close,\n        // see if there's more room the other direction\n\n\n        if (responsive && (containerRect.height > maxHeight || maxHeight < windowHeight / 10)) {\n          // We need more room than we have.\n          if (align.top && top > windowHeight / 2) {\n            // We put it below, but there's more room above, put it above\n            top = '';\n\n            if (align.top === 'bottom') {\n              // top = Math.max(targetRect.top - containerRect.height, 0);\n              // maxHeight = targetRect.top - top;\n              bottom = targetRect.top;\n            } else {\n              // top = Math.max(targetRect.bottom - containerRect.height, 0);\n              // maxHeight = targetRect.bottom - top;\n              bottom = targetRect.bottom;\n            }\n\n            maxHeight = bottom;\n          } else if (align.bottom && maxHeight < windowHeight / 2) {\n            // We put it above but there's more room below, put it below\n            bottom = '';\n\n            if (align.bottom === 'bottom') {\n              top = targetRect.top;\n            } else {\n              top = targetRect.bottom;\n            }\n\n            maxHeight = windowHeight - top;\n          }\n        }\n\n        container.style.left = left + \"px\";\n\n        if (stretch) {\n          // offset width by 0.1 to avoid a bug in ie11 that\n          // unnecessarily wraps the text if width is the same\n          // NOTE: turned off for now\n          container.style.width = width + 0.1 + \"px\";\n        } // the (position:absolute + scrollTop)\n        // is presenting issues with desktop scroll flickering\n\n\n        if (top !== '') {\n          container.style.top = top + \"px\";\n        }\n\n        if (bottom !== '') {\n          container.style.bottom = windowHeight - bottom + \"px\";\n        }\n\n        if (!preserveHeight) {\n          if (theme.drop && theme.drop.maxHeight) {\n            maxHeight = Math.min(maxHeight, parseMetricToNum(theme.drop.maxHeight));\n          }\n\n          container.style.maxHeight = maxHeight + \"px\";\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onEsc\", function (event) {\n      var onEsc = _this.props.onEsc;\n      event.stopPropagation();\n\n      if (onEsc) {\n        onEsc(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"preventClickBubbling\", function (event) {\n      event.stopPropagation();\n      /**\n       * the React event system actually listens to all events at the top level\n       * and then handles its own bubbling / capturing virtually. This means that\n       * even if we call stopPropagation, it only affects the React synthetic\n       * event, and the native event still bubbles upward.\n       * Any code that uses native events (like the close listener in this class)\n       * will still get the bubbled event, unless we also call\n       * event.nativeEvent.stopImmediatePropagation, which bridges the gap from\n       * React synthetic event to native DOM event.\n       */\n\n      event.nativeEvent.stopImmediatePropagation();\n    });\n\n    return _this;\n  }\n\n  var _proto = DropContainer.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var restrictFocus = this.props.restrictFocus;\n    this.addScrollListener();\n    window.addEventListener('resize', this.onResize);\n    document.addEventListener('mousedown', this.onClickDocument);\n    this.place(false);\n\n    if (restrictFocus) {\n      this.dropRef.current.focus();\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this.place(true);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.removeScrollListener();\n    window.removeEventListener('resize', this.onResize);\n    document.removeEventListener('mousedown', this.onClickDocument);\n  };\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        alignProp = _this$props3.align,\n        children = _this$props3.children,\n        onClickOutside = _this$props3.onClickOutside,\n        onEsc = _this$props3.onEsc,\n        onKeyDown = _this$props3.onKeyDown,\n        elevation = _this$props3.elevation,\n        plain = _this$props3.plain,\n        propsTheme = _this$props3.theme,\n        rest = _objectWithoutPropertiesLoose(_this$props3, [\"align\", \"children\", \"onClickOutside\", \"onEsc\", \"onKeyDown\", \"elevation\", \"plain\", \"theme\"]);\n\n    var theme = this.context || propsTheme;\n    var content = React.createElement(StyledDrop, _extends({\n      as: Box,\n      plain: plain,\n      elevation: !plain ? elevation || theme.global.drop.shadowSize || 'small' : undefined,\n      tabIndex: \"-1\",\n      ref: this.dropRef,\n      alignProp: alignProp,\n      onMouseDown: this.preventClickBubbling\n    }, rest), children);\n\n    if (theme.global.drop.background) {\n      var dark = backgroundIsDark(theme.global.drop.background, theme);\n\n      if (dark !== theme.dark) {\n        content = React.createElement(ThemeContext.Provider, {\n          value: _extends({}, theme, {\n            dark: dark\n          })\n        }, content);\n      }\n    }\n\n    return React.createElement(FocusedContainer, {\n      onKeyDown: onEsc && preventLayerClose\n    }, React.createElement(Keyboard, {\n      onEsc: onEsc && this.onEsc,\n      onKeyDown: onKeyDown,\n      target: \"document\"\n    }, content));\n  };\n\n  return DropContainer;\n}(Component);\n\n_defineProperty(DropContainer, \"contextType\", ThemeContext);\n\n_defineProperty(DropContainer, \"defaultProps\", {\n  align: {\n    top: 'top',\n    left: 'left'\n  },\n  stretch: 'width'\n});\n\nObject.setPrototypeOf(DropContainer.defaultProps, defaultProps);\nexport { DropContainer };","map":null,"metadata":{},"sourceType":"module"}