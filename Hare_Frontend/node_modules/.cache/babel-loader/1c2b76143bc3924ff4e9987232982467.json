{"ast":null,"code":"import axios from \"axios\";\nvar backendurl = 'https://0d569b81-281f-42aa-b7c8-982eef0cfaa0.mock.pstmn.io'; // Log user in or out using set usr/pass\n\nvar authenticateUser = function authenticateUser(usr, pass) {\n  var p_usr = String(usr);\n  var p_pass = String(pass);\n  var request = {\n    username: p_user,\n    password: p_pass\n  };\n  return axios.post(\"\".concat(backendurl, \"/auth\"), request);\n};\n\nvar setAuthKey = function setAuthKey(key) {\n  if (key != null && key !== undefined) {\n    localStorage.setItem('auth', key);\n  } else {\n    console.log(\"INVALID KEY STORE ATTEMPT\");\n  }\n}; // Find out if the user is logged in or out \n\n\nvar hasAuthKey = function hasAuthKey() {\n  var authval = String(localStorage.getItem('auth'));\n\n  if (Boolean(authval)) {\n    console.log(\"[AuthService.js isAuthenticated()]: authval is truthy\");\n    console.log(\"[ARGS]: \", authval);\n    return authval;\n  } else {\n    console.log(\"[AuthService.js isAuthenticated()]: Invalid authval\");\n    console.log(\"[ARGS]: \", authval, \"from\", localStorage.getItem('auth'));\n    return authval;\n  }\n};\n\nvar LogOut = function LogOut() {\n  localStorage.clear();\n};\n\nexport default {\n  setUsernameLS: setUsernameLS,\n  setPasswordLS: setPasswordLS,\n  authenticateUser: authenticateUser,\n  isAuthenticated: isAuthenticated,\n  LogOut: LogOut\n};","map":{"version":3,"sources":["/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/src/components/actions/AuthService.js"],"names":["axios","backendurl","authenticateUser","usr","pass","p_usr","String","p_pass","request","username","p_user","password","post","setAuthKey","key","undefined","localStorage","setItem","console","log","hasAuthKey","authval","getItem","Boolean","LogOut","clear","setUsernameLS","setPasswordLS","isAuthenticated"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,UAAU,GAAG,4DAAnB,C,CAEA;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAMC,IAAN,EAAe;AACvC,MAAIC,KAAK,GAAGC,MAAM,CAACH,GAAD,CAAlB;AACA,MAAII,MAAM,GAAGD,MAAM,CAACF,IAAD,CAAnB;AACA,MAAII,OAAO,GAAG;AACbC,IAAAA,QAAQ,EAAEC,MADG;AAEbC,IAAAA,QAAQ,EAAEJ;AAFG,GAAd;AAKA,SACCP,KAAK,CAACY,IAAN,WAAcX,UAAd,YAAiCO,OAAjC,CADD;AAGA,CAXD;;AAaA,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAS;AAC3B,MAAGA,GAAG,IAAI,IAAP,IAAeA,GAAG,KAAKC,SAA1B,EAAqC;AACpCC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BH,GAA7B;AACA,GAFD,MAEO;AACNI,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA;AACD,CAND,C,CAQA;;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACxB,MAAIC,OAAO,GAAGf,MAAM,CAACU,YAAY,CAACM,OAAb,CAAqB,MAArB,CAAD,CAApB;;AACA,MAAGC,OAAO,CAACF,OAAD,CAAV,EAAqB;AACpBH,IAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBE,OAAxB;AACA,WAAOA,OAAP;AACA,GAJD,MAIO;AACNH,IAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBE,OAAxB,EAAiC,MAAjC,EAAyCL,YAAY,CAACM,OAAb,CAAqB,MAArB,CAAzC;AACA,WAAOD,OAAP;AACA;AACD,CAXD;;AAaA,IAAMG,MAAM,GAAG,SAATA,MAAS,GAAM;AACpBR,EAAAA,YAAY,CAACS,KAAb;AACA,CAFD;;AAIA,eAAe;AACdC,EAAAA,aAAa,EAAbA,aADc;AAEdC,EAAAA,aAAa,EAAbA,aAFc;AAGdzB,EAAAA,gBAAgB,EAAhBA,gBAHc;AAId0B,EAAAA,eAAe,EAAfA,eAJc;AAKdJ,EAAAA,MAAM,EAANA;AALc,CAAf","sourcesContent":["\nimport axios from \"axios\";\n\nconst backendurl = 'https://0d569b81-281f-42aa-b7c8-982eef0cfaa0.mock.pstmn.io';\n\n// Log user in or out using set usr/pass\nconst authenticateUser = (usr, pass) => {\n\tlet p_usr = String(usr);\n\tlet p_pass = String(pass);\n\tlet request = { \n\t\tusername: p_user,\n\t\tpassword: p_pass,\n\t};\n\n\treturn ( \n\t\taxios.post(`${backendurl}/auth`, request)\n\t)\n} \n\nconst setAuthKey = (key) => { \n\tif(key != null && key !== undefined) { \n\t\tlocalStorage.setItem('auth', key); \n\t} else { \n\t\tconsole.log(\"INVALID KEY STORE ATTEMPT\");\n\t}\n}\n\n// Find out if the user is logged in or out \nconst hasAuthKey = () => { \n\tlet authval = String(localStorage.getItem('auth'));\n\tif(Boolean(authval)) { \n\t\tconsole.log(\"[AuthService.js isAuthenticated()]: authval is truthy\"); \n\t\tconsole.log(\"[ARGS]: \", authval); \n\t\treturn authval; \t\n\t} else { \n\t\tconsole.log(\"[AuthService.js isAuthenticated()]: Invalid authval\"); \n\t\tconsole.log(\"[ARGS]: \", authval, \"from\", localStorage.getItem('auth')); \n\t\treturn authval; \n\t} \n} \n\nconst LogOut = () => { \n\tlocalStorage.clear(); \n} \n\nexport default { \n\tsetUsernameLS, \n\tsetPasswordLS,\n\tauthenticateUser, \n\tisAuthenticated,\n\tLogOut\n} \n"]},"metadata":{},"sourceType":"module"}