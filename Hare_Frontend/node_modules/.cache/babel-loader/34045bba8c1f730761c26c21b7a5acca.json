{"ast":null,"code":"import _classCallCheck from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/src/components/Upload.js\";\n// The page that users can use to upload an image, open to guests and users \n// Primary component: UploadPage\nimport React, { Component } from 'react';\nimport { Grommet, grommet, Box, Button, Heading, Menu, Paragraph, Text, Meter } from 'grommet';\nimport * as Icons from 'grommet-icons';\nimport { Switch, BrowserRouter as Router, browserHistory, Redirect, withRouter, Link } from 'react-router-dom'; // IMPORT: Style components \n\nimport Style from './styles/Style';\nimport Colors from './styles/Color'; // IMPORT: Action scripts \n\nimport AuthService from './actions/AuthService';\nimport ScanService from './actions/ScanService'; // IMPORT: React Pages \n\nimport Home from './Home';\n\nvar horizontalSpacer = function horizontalSpacer(amt) {\n  return React.createElement(Box, {\n    width: \"100%\",\n    height: amt,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  });\n};\n\nvar CircleMeter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CircleMeter, _React$Component);\n\n  function CircleMeter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CircleMeter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CircleMeter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      value: 20\n    };\n    return _this;\n  }\n\n  _createClass(CircleMeter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.timer = setInterval(function () {\n        var value = _this2.state.value;\n\n        _this2.setState({\n          value: value < 100 ? value + 8 : 20\n        });\n      }, 50);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var value = this.state.value;\n      return React.createElement(Meter, {\n        margin: \"0\",\n        alignSelf: \"start\",\n        height: \"25px\",\n        width: \"25px\",\n        type: \"circle\",\n        size: \"small\",\n        values: [{\n          value: value,\n          color: value > 50 ? \"\".concat(Colors.grey1) : \"\".concat(Colors.grey3)\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CircleMeter;\n}(React.Component);\n/*class UploadPage extends Component { \n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {}; \n\t\tthis.state.imgloaded = false; \n\t\tthis.state.imgurl = undefined; \n\t\tthis.state.idloaded = false; \n\t\tthis.state.productid = undefined;  \n\t\tthis.state.err = undefined;\n\t} \n\n\tonChangeHandler=event=>{\n\t\tlet id = undefined; \n\t\tthis.setState({err: undefined});\n\t\tlet reader = new FileReader(); \n\t\tconsole.log(\"ATTEMPTING TO GET ID\");\n\t\ttry { \n\t\t\treader.readAsDataURL(event.target.files[0]); \n\t\t\treader.onload = (e) => {\n\t\t\t\tthis.setState({ imgloaded: true });\n\t\t\t\tconsole.log(\"SENDING SCAN REQ\");\n\t\t\t\tScanService.getProductID(e.target.result)\n\t\t\t\t.then(res => { \n\t\t\t\t\tconsole.log(res);\n\t\t\t\t\tScanService.cacheProduct(res.data.product_id).then(() => { \n\t\t\t\t\t\tthis.setState({ idloaded: true}); \n\t\t\t\t\t\tid = res.data.product_id;\n\t\t\t\t\t\tconsole.log(\"ID ACQUIRED: \", id);\n\t\t\t\t\t\tthis.setState({ imgurl: e.target.result });\n\t\t\t\t\t\tthis.setState({ fileData: e.target.result, productid: id}); \n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t.catch(error => { \n\t\t\t\t\tconsole.log(\"ERROR OCCURED UPLOADING IMAGE\", error);\n\t\t\t\t\tthis.setState({ idloaded: false, imgloaded: false, err: String(error)});\n\t\t\t\t\tthis.render();\n\t\t\t\t});\n\t\t\t} \n\t\t\tthis.setState({\n\t\t\t\tselectedFile: event.target.files[0],\n\t\t\t})\t\n\t\t} catch (e) { \n\t\t\tconsole.log(\"ERROR OCCURED UPLOADING IMAGE\", e);\n\t\t\tthis.setState({ idloaded: false, imgloaded: false, err: String(e)});\n\t\t\tthis.render();\n\t\t}\n\t}\n\n\terrhandler = () => { \n\t\tif(this.state.err !== undefined) { \n\t\t\treturn ( \n\t\t\t\t<Box direction=\"row\" justify=\"between\" margin={{ top:\"medium\", bottom: \"small\"}} background=\"#ff9999\" width=\"325px\" border= {{ color: \"red\" }} round=\"xsmall\">\n\t\t\t\t\t<Box direction=\"row\" gap=\"small\" align=\"center\" pad=\"small\" >\n\t\t\t\t\t\t<Icons.Alert color=\"red\" /><Text color=\"red\" size=\"12pt\">{this.state.err}</Text>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Button icon={<Icons.Close color=\"red\"  />} onClick={() => {this.setState({err: undefined})}} />\n\t\t\t\t</Box>\n\t\t\t)\n\t\t} else { \n\t\t\treturn <div />\n\t\t}\n\t}\n\t\n\t// FILE UPLOAD BUTTON \n\tuploadFile = () => { \n\t\treturn(\n\t\t\t<Box width=\"45%\" background={Colors.primary}>  \n\t\t\t\t<input type=\"file\" name=\"file\" id=\"file\" onChange={this.onChangeHandler} style={{ display: 'none'}}/>\n\t\t\t\t<label htmlFor=\"file\">\n\t\t\t\t\t<Box direction=\"row\" gap=\"small\" pad=\"small\" align=\"center\" justify=\"center\" style={{ cursor: 'pointer'}}>\n\t\t\t\t\t\t<Icons.Upload color={Colors.grey3}/> <Text color={Colors.grey3}>Upload</Text>\n\t\t\t\t\t</Box>\n\t\t\t\t</label>\n\t\t\t</Box> \n\t\t); \n\t} \n\n\tgetProductID = () => {\n\t\treturn this.state.productid;\n\t} \n\n\t// SUBMIT BUTTON \n\tsubmitButton = () => {\n\t\tlet id = this.getProductID();\n\t\treturn( \n\t\t\t<Link to={`product/${id}`} productid={id} style={{ textDecoration: 'none' }}> \n\t\t\t\t<Text size=\"12pt\" color={Colors.grey3}> Submit</Text>\n\t\t\t</Link> \n\t\t); \n\t} \n\n\t// UPLOAD & SUBMIT CONTAINER \n\tfileUploaded = () => {\n\t\tif(this.state.idloaded == true) {\n\t\t\tlet pageid = this.getProductID(); \n\t\t\treturn(\n\t\t\t\t<Box direction=\"row\" background={Colors.primary} pad=\"small\" width=\"45%\" justify=\"between\" align=\"center\">\n\t\t\t\t\t{this.submissionIcon()}\n\t\t\t\t\t{this.submitButton()} \n\t\t\t\t</Box>  \n\t\t\t)\n\t\t} else if(this.state.imgloaded == true) { \n\t\t\treturn ( \n\t\t\t\t<Box direction=\"row\" background={Colors.primary} pad=\"small\" width=\"45%\" justify=\"between\" align=\"center\">\n\t\t\t\t\t\t{this.submissionIcon()}\n\t\t\t\t\t<Box background=\"red\" />\n\t\t\t\t\t<Text color={Colors.grey3}> Loading</Text> \n\t\t\t\t</Box> \n\t\t\t)\n\t    } else { \n\t\t\treturn( \n\t\t\t\t<Box direction=\"row\" background={Colors.primary} pad=\"small\" width=\"45%\" justify=\"between\" align=\"center\">\n\t\t\t\t\t{this.submissionIcon()}\n\t\t\t\t\t<Text color={Colors.grey3}> Submit</Text> \n\t\t\t\t</Box>  \n\t\t\t);\n\n\t\t}\n\n\t} \n\n\tsubmissionIcon = () => { \n\t\tif( this.state.idloaded == true) { \n\t\t\treturn( \n\t\t\t\t<Icons.CheckboxSelected\tsize=\"medium\" color={Colors.grey3}/>\n\t\t\t);\n\t\t} else if(this.state.imgloaded == true) { \n\t\t\treturn ( \n\t\t\t\t<Box> \n\t\t\t\t\t<CircleMeter />\n\t\t\t\t</Box>\n\t\t\t);\n\t\t} else { \n\t\t\treturn( \n\t\t\t\t<Icons.Checkbox size=\"medium\" color={Colors.grey3} />\n\t\t\t);\n\t\t}\n\t}\n\n\timageDisplay = () => { \n\t\tif(this.state.imgurl === undefined) {\n\t\t\treturn( \n\t\t\t\t<Box background={Colors.grey1} pad=\"10%\">\n\t\t\t\t\t<Icons.Camera color={Colors.grey3} size=\"large\"/>\n\t\t\t\t</Box> \n\t\t\t);\n\t\t} else { \n\t\t\treturn(\n\t\t\t\t<img src={this.state.imgurl} height=\"310px\" width=\"310px\" alt=\"preview\" />\n\t\t\t)\n\t\t}\n\t}\n\n\t// MAIN VIEW\n\trender() { \n\t\treturn(\n\t\t\t<Box margin=\"large\" justify=\"center\" align=\"center\">\n\t\t\t\t<Box justify=\"between\" width=\"100%\" direction=\"row\"> \n\t\t\t\t\t<Box width=\"33%\"  justify=\"center\" align=\"start\"   pad={{ left: \"large\" }}>\n\t\t\t\t\t\t<Link to='/home'>\n\t\t\t\t\t\t\t{<Icons.LinkPrevious color={Colors.dark3} size=\"large\" justify=\"left\" align=\"left\"/>}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</Box> \n\t\t\t\t\t<Box width=\"33%\" justify=\"center\" align=\"center\"> \n\t\t\t\t\t\t{Style.Title(\"Upload an image\")}\n\t\t\t\t\t</Box> \n\t\t\t\t\t<Box width=\"33%\"> \n\t\t\t\t\t</Box> \n\t\t\t\t</Box> \n\t\t\t\t{horizontalSpacer(\"10px\")} \n\t\t\t\t<div> \n\t\t\t\t\t<Text size=\"12pt\" color={Colors.grey1}> Not sure how it works? You can find a guide </Text> \n\t\t\t\t\t<Text size=\"12pt\" color={Colors.primary}> here </Text>\n\t\t\t\t</div> \n\t\t\t\t{horizontalSpacer(\"20px\")} \n\t\t\t\t{this.imageDisplay()}\n\t\t\t\t{horizontalSpacer(\"20px\")}\n\t\t\t\t<Box direction=\"row\" justify=\"start\" width=\"23.5%\"> \n\t\t\t\t\t{this.uploadFile()}\n\t\t\t\t\t<Box width=\"10%\"/>\n\t\t\t\t\t{this.fileUploaded()}\n\t\t\t\t</Box> \n\t\t\t\t{this.errhandler()}\n\t\t\t</Box>\n\t\t);\t\n\t}\n}*/\n\n\nvar UploadPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UploadPage, _Component);\n\n  function UploadPage(props) {\n    var _this3;\n\n    _classCallCheck(this, UploadPage);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(UploadPage).call(this, props));\n    _this3.state = {}; // User wants to start over  \n\n    _this3.state.refresh = false; // File location \n\n    _this3.state.file = undefined; // File base64 data \n\n    _this3.state.imgurl = undefined; // Scan Result id number\n\n    _this3.state.product_id = undefined; // If something goes wrong, this creates a msg \n\n    _this3.state.error = undefined;\n    return _this3;\n  }\n\n  return UploadPage;\n}(Component);\n\nexport default withRouter(UploadPage);","map":{"version":3,"sources":["/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/src/components/Upload.js"],"names":["React","Component","Grommet","grommet","Box","Button","Heading","Menu","Paragraph","Text","Meter","Icons","Switch","BrowserRouter","Router","browserHistory","Redirect","withRouter","Link","Style","Colors","AuthService","ScanService","Home","horizontalSpacer","amt","CircleMeter","state","value","timer","setInterval","setState","clearInterval","color","grey1","grey3","UploadPage","props","refresh","file","undefined","imgurl","product_id","error"],"mappings":"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","sourcesContent":["// The page that users can use to upload an image, open to guests and users \n// Primary component: UploadPage\nimport React, { Component } from 'react'; \nimport { Grommet, grommet, Box, Button, Heading, Menu, Paragraph, Text, Meter} from 'grommet';\nimport * as Icons from 'grommet-icons';\nimport { Switch, BrowserRouter as Router, browserHistory, Redirect, withRouter, Link  } from 'react-router-dom';\n\n// IMPORT: Style components \nimport Style from './styles/Style';\nimport Colors from './styles/Color';\n\n\n// IMPORT: Action scripts \nimport AuthService from './actions/AuthService';\nimport ScanService from './actions/ScanService'; \n\n// IMPORT: React Pages \nimport Home from './Home'; \n\n\nconst horizontalSpacer = (amt) => { \n\treturn( \n\t\t<Box width=\"100%\" height={amt}> \n\t\t</Box> \n\t); \n} \n\n\nclass CircleMeter extends React.Component {\n\tstate = { value: 20 };\n  \n\tcomponentDidMount() {\n\t  this.timer = setInterval(() => {\n\t\tconst { value } = this.state;\n\t\tthis.setState({ value: value < 100 ? value + 8 : 20 });\n\t  }, 50);\n\t}\n  \n\tcomponentWillUnmount() {\n\t  clearInterval(this.timer);\n\t}\n  \n\trender() {\n\t  const { value } = this.state;\n\t  return (\n\t\t\t<Meter\n\t\t\tmargin=\"0\"\n\t\t\talignSelf=\"start\"\n\t\t\theight=\"25px\"\n\t\t\twidth=\"25px\"\n\t\t\ttype=\"circle\"\n\t\t\tsize=\"small\"\n\t\t\tvalues={[{ value, color: value > 50 ? `${Colors.grey1}` : `${Colors.grey3}` }]}/>\n\t  );\n\t}\n  }\n\n\n/*class UploadPage extends Component { \n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {}; \n\t\tthis.state.imgloaded = false; \n\t\tthis.state.imgurl = undefined; \n\t\tthis.state.idloaded = false; \n\t\tthis.state.productid = undefined;  \n\t\tthis.state.err = undefined;\n\t} \n\n\tonChangeHandler=event=>{\n\t\tlet id = undefined; \n\t\tthis.setState({err: undefined});\n\t\tlet reader = new FileReader(); \n\t\tconsole.log(\"ATTEMPTING TO GET ID\");\n\t\ttry { \n\t\t\treader.readAsDataURL(event.target.files[0]); \n\t\t\treader.onload = (e) => {\n\t\t\t\tthis.setState({ imgloaded: true });\n\t\t\t\tconsole.log(\"SENDING SCAN REQ\");\n\t\t\t\tScanService.getProductID(e.target.result)\n\t\t\t\t.then(res => { \n\t\t\t\t\tconsole.log(res);\n\t\t\t\t\tScanService.cacheProduct(res.data.product_id).then(() => { \n\t\t\t\t\t\tthis.setState({ idloaded: true}); \n\t\t\t\t\t\tid = res.data.product_id;\n\t\t\t\t\t\tconsole.log(\"ID ACQUIRED: \", id);\n\t\t\t\t\t\tthis.setState({ imgurl: e.target.result });\n\t\t\t\t\t\tthis.setState({ fileData: e.target.result, productid: id}); \n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t.catch(error => { \n\t\t\t\t\tconsole.log(\"ERROR OCCURED UPLOADING IMAGE\", error);\n\t\t\t\t\tthis.setState({ idloaded: false, imgloaded: false, err: String(error)});\n\t\t\t\t\tthis.render();\n\t\t\t\t});\n\t\t\t} \n\t\t\tthis.setState({\n\t\t\t\tselectedFile: event.target.files[0],\n\t\t\t})\t\n\t\t} catch (e) { \n\t\t\tconsole.log(\"ERROR OCCURED UPLOADING IMAGE\", e);\n\t\t\tthis.setState({ idloaded: false, imgloaded: false, err: String(e)});\n\t\t\tthis.render();\n\t\t}\n\t}\n\n\terrhandler = () => { \n\t\tif(this.state.err !== undefined) { \n\t\t\treturn ( \n\t\t\t\t<Box direction=\"row\" justify=\"between\" margin={{ top:\"medium\", bottom: \"small\"}} background=\"#ff9999\" width=\"325px\" border= {{ color: \"red\" }} round=\"xsmall\">\n\t\t\t\t\t<Box direction=\"row\" gap=\"small\" align=\"center\" pad=\"small\" >\n\t\t\t\t\t\t<Icons.Alert color=\"red\" /><Text color=\"red\" size=\"12pt\">{this.state.err}</Text>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Button icon={<Icons.Close color=\"red\"  />} onClick={() => {this.setState({err: undefined})}} />\n\t\t\t\t</Box>\n\t\t\t)\n\t\t} else { \n\t\t\treturn <div />\n\t\t}\n\t}\n\t\n\t// FILE UPLOAD BUTTON \n\tuploadFile = () => { \n\t\treturn(\n\t\t\t<Box width=\"45%\" background={Colors.primary}>  \n\t\t\t\t<input type=\"file\" name=\"file\" id=\"file\" onChange={this.onChangeHandler} style={{ display: 'none'}}/>\n\t\t\t\t<label htmlFor=\"file\">\n\t\t\t\t\t<Box direction=\"row\" gap=\"small\" pad=\"small\" align=\"center\" justify=\"center\" style={{ cursor: 'pointer'}}>\n\t\t\t\t\t\t<Icons.Upload color={Colors.grey3}/> <Text color={Colors.grey3}>Upload</Text>\n\t\t\t\t\t</Box>\n\t\t\t\t</label>\n\t\t\t</Box> \n\t\t); \n\t} \n\n\tgetProductID = () => {\n\t\treturn this.state.productid;\n\t} \n\n\t// SUBMIT BUTTON \n\tsubmitButton = () => {\n\t\tlet id = this.getProductID();\n\t\treturn( \n\t\t\t<Link to={`product/${id}`} productid={id} style={{ textDecoration: 'none' }}> \n\t\t\t\t<Text size=\"12pt\" color={Colors.grey3}> Submit</Text>\n\t\t\t</Link> \n\t\t); \n\t} \n\n\t// UPLOAD & SUBMIT CONTAINER \n\tfileUploaded = () => {\n\t\tif(this.state.idloaded == true) {\n\t\t\tlet pageid = this.getProductID(); \n\t\t\treturn(\n\t\t\t\t<Box direction=\"row\" background={Colors.primary} pad=\"small\" width=\"45%\" justify=\"between\" align=\"center\">\n\t\t\t\t\t{this.submissionIcon()}\n\t\t\t\t\t{this.submitButton()} \n\t\t\t\t</Box>  \n\t\t\t)\n\t\t} else if(this.state.imgloaded == true) { \n\t\t\treturn ( \n\t\t\t\t<Box direction=\"row\" background={Colors.primary} pad=\"small\" width=\"45%\" justify=\"between\" align=\"center\">\n\t\t\t\t\t\t{this.submissionIcon()}\n\t\t\t\t\t<Box background=\"red\" />\n\t\t\t\t\t<Text color={Colors.grey3}> Loading</Text> \n\t\t\t\t</Box> \n\t\t\t)\n\t    } else { \n\t\t\treturn( \n\t\t\t\t<Box direction=\"row\" background={Colors.primary} pad=\"small\" width=\"45%\" justify=\"between\" align=\"center\">\n\t\t\t\t\t{this.submissionIcon()}\n\t\t\t\t\t<Text color={Colors.grey3}> Submit</Text> \n\t\t\t\t</Box>  \n\t\t\t);\n\n\t\t}\n\n\t} \n\n\tsubmissionIcon = () => { \n\t\tif( this.state.idloaded == true) { \n\t\t\treturn( \n\t\t\t\t<Icons.CheckboxSelected\tsize=\"medium\" color={Colors.grey3}/>\n\t\t\t);\n\t\t} else if(this.state.imgloaded == true) { \n\t\t\treturn ( \n\t\t\t\t<Box> \n\t\t\t\t\t<CircleMeter />\n\t\t\t\t</Box>\n\t\t\t);\n\t\t} else { \n\t\t\treturn( \n\t\t\t\t<Icons.Checkbox size=\"medium\" color={Colors.grey3} />\n\t\t\t);\n\t\t}\n\t}\n\n\timageDisplay = () => { \n\t\tif(this.state.imgurl === undefined) {\n\t\t\treturn( \n\t\t\t\t<Box background={Colors.grey1} pad=\"10%\">\n\t\t\t\t\t<Icons.Camera color={Colors.grey3} size=\"large\"/>\n\t\t\t\t</Box> \n\t\t\t);\n\t\t} else { \n\t\t\treturn(\n\t\t\t\t<img src={this.state.imgurl} height=\"310px\" width=\"310px\" alt=\"preview\" />\n\t\t\t)\n\t\t}\n\t}\n\n\t// MAIN VIEW\n\trender() { \n\t\treturn(\n\t\t\t<Box margin=\"large\" justify=\"center\" align=\"center\">\n\t\t\t\t<Box justify=\"between\" width=\"100%\" direction=\"row\"> \n\t\t\t\t\t<Box width=\"33%\"  justify=\"center\" align=\"start\"   pad={{ left: \"large\" }}>\n\t\t\t\t\t\t<Link to='/home'>\n\t\t\t\t\t\t\t{<Icons.LinkPrevious color={Colors.dark3} size=\"large\" justify=\"left\" align=\"left\"/>}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</Box> \n\t\t\t\t\t<Box width=\"33%\" justify=\"center\" align=\"center\"> \n\t\t\t\t\t\t{Style.Title(\"Upload an image\")}\n\t\t\t\t\t</Box> \n\t\t\t\t\t<Box width=\"33%\"> \n\t\t\t\t\t</Box> \n\t\t\t\t</Box> \n\t\t\t\t{horizontalSpacer(\"10px\")} \n\t\t\t\t<div> \n\t\t\t\t\t<Text size=\"12pt\" color={Colors.grey1}> Not sure how it works? You can find a guide </Text> \n\t\t\t\t\t<Text size=\"12pt\" color={Colors.primary}> here </Text>\n\t\t\t\t</div> \n\t\t\t\t{horizontalSpacer(\"20px\")} \n\t\t\t\t{this.imageDisplay()}\n\t\t\t\t{horizontalSpacer(\"20px\")}\n\t\t\t\t<Box direction=\"row\" justify=\"start\" width=\"23.5%\"> \n\t\t\t\t\t{this.uploadFile()}\n\t\t\t\t\t<Box width=\"10%\"/>\n\t\t\t\t\t{this.fileUploaded()}\n\t\t\t\t</Box> \n\t\t\t\t{this.errhandler()}\n\t\t\t</Box>\n\t\t);\t\n\t}\n}*/\n\nclass UploadPage extends Component { \n\n\tconstructor(props) { \n\t\tsuper(props); \n\t\tthis.state = {};\n\n\t\t// User wants to start over  \n\t\tthis.state.refresh = false; \n\n\t\t// File location \n\t\tthis.state.file = undefined; \n\n\t\t// File base64 data \n\t\tthis.state.imgurl = undefined; \n\n\t\t// Scan Result id number\n\t\tthis.state.product_id = undefined; \n\t\t\n\t\t// If something goes wrong, this creates a msg \n\t\tthis.state.error = undefined;\n\t}\n\n\n\n\n}\n\nexport default withRouter(UploadPage); \n"]},"metadata":{},"sourceType":"module"}