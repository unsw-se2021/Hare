{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport { ThemeContext } from '../../contexts';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Drop } from '../Drop';\nimport { Keyboard } from '../Keyboard';\nimport { withFocus, withForwardRef } from '../hocs';\nimport { StyledMaskedInput, StyledMaskedInputContainer } from './StyledMaskedInput';\n\nvar parseValue = function parseValue(mask, value) {\n  // break the value up into mask parts\n  var valueParts = []; // { part, beginIndex, endIndex }\n\n  var valueIndex = 0;\n  var maskIndex = 0;\n\n  while (value !== undefined && valueIndex < value.length && maskIndex < mask.length) {\n    var item = mask[maskIndex];\n    var found = void 0;\n\n    if (item.fixed) {\n      var length = item.fixed.length;\n      valueParts.push({\n        part: item.fixed,\n        beginIndex: valueIndex,\n        endIndex: valueIndex + length - 1\n      });\n      var part = value.slice(valueIndex, valueIndex + length);\n\n      if (part === item.fixed) {\n        valueIndex += length;\n      }\n\n      maskIndex += 1;\n      found = true;\n    } else if (item.options) {\n      // reverse assuming larger is later\n      found = item.options.slice(0).reverse() // eslint-disable-next-line no-loop-func\n      .some(function (option) {\n        var length = option.length;\n        var part = value.slice(valueIndex, valueIndex + length);\n\n        if (part === option) {\n          valueParts.push({\n            part: part,\n            beginIndex: valueIndex,\n            endIndex: valueIndex + length - 1\n          });\n          valueIndex += length;\n          maskIndex += 1;\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    if (!found) {\n      if (item.regexp) {\n        var minLength = Array.isArray(item.length) && item.length[0] || item.length || 1;\n        var maxLength = Array.isArray(item.length) && item.length[1] || item.length || value.length - valueIndex;\n        var _length = maxLength;\n\n        while (!found && _length >= minLength) {\n          var _part = value.slice(valueIndex, valueIndex + _length);\n\n          if (item.regexp.test(_part)) {\n            valueParts.push({\n              part: _part,\n              beginIndex: valueIndex,\n              endIndex: valueIndex + _length - 1\n            });\n            valueIndex += _length;\n            maskIndex += 1;\n            found = true;\n          }\n\n          _length -= 1;\n        }\n\n        if (!found) {\n          valueIndex = value.length;\n        }\n      } else {\n        var _length2 = Array.isArray(item.length) ? item.length[1] : item.length || value.length - valueIndex;\n\n        var _part2 = value.slice(valueIndex, valueIndex + _length2);\n\n        valueParts.push({\n          part: _part2,\n          beginIndex: valueIndex,\n          endIndex: valueIndex + _length2 - 1\n        });\n        valueIndex += _length2;\n        maskIndex += 1;\n      }\n    }\n  }\n\n  return valueParts;\n};\n\nvar MaskedInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(MaskedInput, _Component);\n\n  function MaskedInput() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"inputRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"dropRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"locateCaret\", function () {\n      // leave time for caret to be placed after receiving focus\n      clearTimeout(_this.caretTimeout);\n      _this.caretTimeout = setTimeout(function () {\n        var mask = _this.props.mask;\n        var _this$state = _this.state,\n            activeMaskIndex = _this$state.activeMaskIndex,\n            valueParts = _this$state.valueParts;\n\n        if (_this.inputRef.current) {\n          // determine which mask element the caret is at\n          var caretIndex = _this.inputRef.current.selectionStart;\n          var maskIndex;\n          valueParts.some(function (part, index) {\n            if (part.beginIndex <= caretIndex && part.endIndex >= caretIndex) {\n              maskIndex = index;\n              return true;\n            }\n\n            return false;\n          });\n\n          if (maskIndex === undefined && valueParts.length < mask.length) {\n            maskIndex = valueParts.length; // first unused one\n          }\n\n          if (maskIndex && mask[maskIndex].fixed) {\n            maskIndex -= 1; // fixed mask parts are never \"active\"\n          }\n\n          if (activeMaskIndex !== maskIndex) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            _this.setState({\n              activeMaskIndex: maskIndex,\n              activeOptionIndex: -1\n            });\n          }\n        }\n      }, 10); // 10ms empirically chosen\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onFocus\", function (event) {\n      var onFocus = _this.props.onFocus;\n\n      _this.locateCaret();\n\n      _this.setState({\n        focused: true\n      });\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onBlur\", function (event) {\n      // delay so we don't remove the drop before Button events can be processed\n      var onBlur = _this.props.onBlur;\n      clearTimeout(_this.blurTimeout);\n      _this.blurTimeout = setTimeout(function () {\n        if (!_this.dropRef.current || !_this.dropRef.current.contains || !_this.dropRef.current.contains(document.activeElement)) {\n          _this.setState({\n            activeMaskIndex: undefined,\n            focused: false\n          });\n        }\n      }, 10); // 10ms empirically chosen\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onChange\", function (event) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          mask = _this$props.mask;\n      var value = event.target.value; // Align with the mask.\n\n      var valueParts = parseValue(mask, value);\n      var nextValue = valueParts.map(function (part) {\n        return part.part;\n      }).join('');\n\n      if (onChange) {\n        onChange({\n          target: _extends({}, event.target, {\n            value: nextValue\n          })\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onOption\", function (option) {\n      return function () {\n        var _this$props2 = _this.props,\n            onChange = _this$props2.onChange,\n            mask = _this$props2.mask;\n        var _this$state2 = _this.state,\n            activeMaskIndex = _this$state2.activeMaskIndex,\n            valueParts = _this$state2.valueParts;\n        var nextValueParts = [].concat(valueParts);\n        nextValueParts[activeMaskIndex] = {\n          part: option\n        }; // add any fixed parts that follow\n\n        var index = activeMaskIndex + 1;\n\n        while (index < mask.length && !nextValueParts[index] && mask[index].fixed) {\n          nextValueParts[index] = {\n            part: mask[index].fixed\n          };\n          index += 1;\n        }\n\n        var nextValue = nextValueParts.map(function (part) {\n          return part.part;\n        }).join(''); // restore focus to input\n\n        _this.inputRef.current.focus();\n\n        if (onChange) {\n          onChange({\n            target: {\n              value: nextValue\n            }\n          });\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onNextOption\", function (event) {\n      var mask = _this.props.mask;\n      var _this$state3 = _this.state,\n          activeMaskIndex = _this$state3.activeMaskIndex,\n          activeOptionIndex = _this$state3.activeOptionIndex;\n      var item = mask[activeMaskIndex];\n\n      if (item && item.options) {\n        event.preventDefault();\n        var index = Math.min(activeOptionIndex + 1, item.options.length - 1);\n\n        _this.setState({\n          activeOptionIndex: index\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPreviousOption\", function (event) {\n      var mask = _this.props.mask;\n      var _this$state4 = _this.state,\n          activeMaskIndex = _this$state4.activeMaskIndex,\n          activeOptionIndex = _this$state4.activeOptionIndex;\n\n      if (activeMaskIndex >= 0 && mask[activeMaskIndex].options) {\n        event.preventDefault();\n        var index = Math.max(activeOptionIndex - 1, 0);\n\n        _this.setState({\n          activeOptionIndex: index\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSelectOption\", function (event) {\n      var mask = _this.props.mask;\n      var _this$state5 = _this.state,\n          activeMaskIndex = _this$state5.activeMaskIndex,\n          activeOptionIndex = _this$state5.activeOptionIndex;\n\n      if (activeMaskIndex >= 0 && activeOptionIndex >= 0) {\n        event.preventDefault();\n        var option = mask[activeMaskIndex].options[activeOptionIndex];\n\n        _this.onOption(option)();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onEsc\", function (event) {\n      // we have to stop both synthetic events and native events\n      // drop and layer should not close by pressing esc on this input\n      event.stopPropagation();\n      event.nativeEvent.stopImmediatePropagation();\n\n      _this.inputRef.current.blur();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderPlaceholder\", function () {\n      var mask = _this.props.mask;\n      return mask.map(function (item) {\n        return item.placeholder || item.fixed;\n      }).join('');\n    });\n\n    return _this;\n  }\n\n  MaskedInput.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var mask = nextProps.mask,\n        value = nextProps.value;\n    var priorMask = prevState.priorMask,\n        priorValue = prevState.priorValue;\n\n    if (priorMask !== mask || priorValue !== value) {\n      var valueParts = parseValue(mask, value);\n      return {\n        priorMask: mask,\n        priorValue: value,\n        valueParts: valueParts\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = MaskedInput.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var focused = this.state.focused;\n\n    if (focused) {\n      this.locateCaret();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this.caretTimeout);\n    clearTimeout(this.blurTimeout);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props3 = this.props,\n        defaultValue = _this$props3.defaultValue,\n        forwardRef = _this$props3.forwardRef,\n        id = _this$props3.id,\n        placeholder = _this$props3.placeholder,\n        plain = _this$props3.plain,\n        mask = _this$props3.mask,\n        value = _this$props3.value,\n        onChange = _this$props3.onChange,\n        onKeyDown = _this$props3.onKeyDown,\n        propsTheme = _this$props3.theme,\n        rest = _objectWithoutPropertiesLoose(_this$props3, [\"defaultValue\", \"forwardRef\", \"id\", \"placeholder\", \"plain\", \"mask\", \"value\", \"onChange\", \"onKeyDown\", \"theme\"]);\n\n    var theme = this.context || propsTheme;\n    var _this$state6 = this.state,\n        activeMaskIndex = _this$state6.activeMaskIndex,\n        activeOptionIndex = _this$state6.activeOptionIndex;\n    return React.createElement(StyledMaskedInputContainer, {\n      plain: plain\n    }, React.createElement(Keyboard, {\n      onEsc: this.onEsc,\n      onTab: this.onTab,\n      onLeft: this.locateCaret,\n      onRight: this.locateCaret,\n      onUp: this.onPreviousOption,\n      onDown: this.onNextOption,\n      onEnter: this.onSelectOption,\n      onKeyDown: onKeyDown\n    }, React.createElement(StyledMaskedInput, _extends({\n      id: id,\n      ref: function ref(node) {\n        _this2.inputRef.current = node;\n\n        if (forwardRef) {\n          if (typeof forwardRef === 'object') {\n            forwardRef.current = node;\n          } else {\n            forwardRef(node);\n          }\n        }\n      },\n      autoComplete: \"off\",\n      plain: plain,\n      placeholder: placeholder || this.renderPlaceholder()\n    }, rest, {\n      defaultValue: defaultValue,\n      value: value,\n      theme: theme,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onChange: this.onChange\n    }))), activeMaskIndex >= 0 && mask[activeMaskIndex].options && React.createElement(Drop, {\n      id: id ? \"masked-input-drop__\" + id : undefined,\n      align: {\n        top: 'bottom',\n        left: 'left'\n      },\n      responsive: false,\n      target: this.inputRef.current\n    }, React.createElement(Box, {\n      ref: this.dropRef\n    }, mask[activeMaskIndex].options.map(function (option, index) {\n      return React.createElement(Box, {\n        key: option,\n        flex: false\n      }, React.createElement(Button, {\n        tabIndex: \"-1\",\n        onClick: _this2.onOption(option),\n        onMouseOver: function onMouseOver() {\n          return _this2.setState({\n            activeOptionIndex: index\n          });\n        },\n        onFocus: function onFocus() {}\n      }, React.createElement(Box, {\n        pad: {\n          horizontal: 'small',\n          vertical: 'xsmall'\n        },\n        background: activeOptionIndex === index ? 'active' : undefined\n      }, option)));\n    }))));\n  };\n\n  return MaskedInput;\n}(Component);\n\n_defineProperty(MaskedInput, \"contextType\", ThemeContext);\n\n_defineProperty(MaskedInput, \"defaultProps\", {\n  mask: []\n});\n\nObject.setPrototypeOf(MaskedInput.defaultProps, defaultProps);\nvar MaskedInputDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  MaskedInputDoc = require('./doc').doc(MaskedInput); // eslint-disable-line global-require\n}\n\nvar MaskedInputWrapper = compose(withFocus({\n  focusWithMouse: true\n}), withForwardRef)(MaskedInputDoc || MaskedInput);\nexport { MaskedInputWrapper as MaskedInput };","map":null,"metadata":{},"sourceType":"module"}