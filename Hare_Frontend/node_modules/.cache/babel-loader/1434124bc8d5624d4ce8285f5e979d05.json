{"ast":null,"code":"// Set Username\nvar setUsernameLS = function setUsernameLS(username) {\n  localStorage.setItem('username', username);\n}; // Set Password \n\n\nvar setPasswordLS = function setPasswordLS(password) {\n  localStorage.setItem('password', password);\n}; // Log user in or out using set usr/pass\n\n\nvar authenticateUser = function authenticateUser() {\n  var pass = getPasswordLS();\n  var usr = getUsernameLS();\n  var request = {};\n\n  if (usr == null || usr === false || pass == null || pass === false) {\n    console.log(\"[AuthService.js: authenticateUser()]: usr or pass is null\");\n    console.log(\"[ARGS]: \", usr, pass);\n    localStorage.setItem(\"auth\", false);\n  } else if (usr == \"John\" && pass == \"123\") {\n    localStorage.setItem(\"auth\", true);\n  } else {\n    console.log(\"[AuthService.js: authenticateUser()]: invalid details entered\");\n    console.log(\"[ARGS]: \", usr, pass);\n    localStorage.setItem(\"auth\", false);\n  }\n}; // Find out if the user is logged in or out \n\n\nvar isAuthenticated = function isAuthenticated() {\n  var authval = String(localStorage.getItem('auth'));\n\n  if (Boolean(authval)) {\n    console.log(\"[AuthService.js isAuthenticated()]: authval is truthy\");\n    console.log(\"[ARGS]: \", authval);\n    return authval;\n  } else {\n    console.log(\"[AuthService.js isAuthenticated()]: Invalid authval\");\n    console.log(\"[ARGS]: \", authval, \"from\", localStorage.getItem('auth'));\n    return authval;\n  }\n};\n\nvar LogOut = function LogOut() {\n  setPasswordLS(null);\n  setUsernameLS(null);\n  authenticateUser();\n};\n\nexport default {\n  setUsernameLS: setUsernameLS,\n  setPasswordLS: setPasswordLS,\n  getUsernameLS: getUsernameLS,\n  getPasswordLS: getPasswordLS,\n  authenticateUser: authenticateUser,\n  isAuthenticated: isAuthenticated,\n  LogOut: LogOut\n};","map":{"version":3,"sources":["/Users/michaelwlloyd/Desktop/NeoHare/Hare_Frontend/src/components/actions/AuthService.js"],"names":["setUsernameLS","username","localStorage","setItem","setPasswordLS","password","authenticateUser","pass","getPasswordLS","usr","getUsernameLS","request","console","log","isAuthenticated","authval","String","getItem","Boolean","LogOut"],"mappings":"AACA;AACA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAc;AACnCC,EAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,QAAjC;AACA,CAFD,C,CAIA;;;AACA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAc;AACnCH,EAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCE,QAAjC;AACA,CAFD,C,CAIA;;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC9B,MAAIC,IAAI,GAAGC,aAAa,EAAxB;AACA,MAAIC,GAAG,GAAGC,aAAa,EAAvB;AACA,MAAIC,OAAO,GAAG,EAAd;;AAGA,MAAIF,GAAG,IAAI,IAAP,IAAeA,GAAG,KAAK,KAAxB,IAAmCF,IAAI,IAAI,IAAR,IAAgBA,IAAI,KAAK,KAA/D,EAAuE;AACtEK,IAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,GAAxB,EAA6BF,IAA7B;AACAL,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B,KAA7B;AACA,GAJD,MAIO,IAAGM,GAAG,IAAI,MAAP,IAAiBF,IAAI,IAAI,KAA5B,EAAmC;AACzCL,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B,IAA7B;AACA,GAFM,MAEA;AACNS,IAAAA,OAAO,CAACC,GAAR,CAAY,+DAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,GAAxB,EAA6BF,IAA7B;AACAL,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B,KAA7B;AACA;AACD,CAjBD,C,CAmBA;;;AACA,IAAMW,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC7B,MAAIC,OAAO,GAAGC,MAAM,CAACd,YAAY,CAACe,OAAb,CAAqB,MAArB,CAAD,CAApB;;AACA,MAAGC,OAAO,CAACH,OAAD,CAAV,EAAqB;AACpBH,IAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBE,OAAxB;AACA,WAAOA,OAAP;AACA,GAJD,MAIO;AACNH,IAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBE,OAAxB,EAAiC,MAAjC,EAAyCb,YAAY,CAACe,OAAb,CAAqB,MAArB,CAAzC;AACA,WAAOF,OAAP;AACA;AACD,CAXD;;AAaA,IAAMI,MAAM,GAAG,SAATA,MAAS,GAAM;AACpBf,EAAAA,aAAa,CAAC,IAAD,CAAb;AACAJ,EAAAA,aAAa,CAAC,IAAD,CAAb;AACAM,EAAAA,gBAAgB;AAChB,CAJD;;AAMA,eAAe;AACdN,EAAAA,aAAa,EAAbA,aADc;AAEdI,EAAAA,aAAa,EAAbA,aAFc;AAGdM,EAAAA,aAAa,EAAbA,aAHc;AAIdF,EAAAA,aAAa,EAAbA,aAJc;AAKdF,EAAAA,gBAAgB,EAAhBA,gBALc;AAMdQ,EAAAA,eAAe,EAAfA,eANc;AAOdK,EAAAA,MAAM,EAANA;AAPc,CAAf","sourcesContent":["\n// Set Username\nconst setUsernameLS = (username) => {\n\tlocalStorage.setItem('username', username);\n} \n\n// Set Password \nconst setPasswordLS = (password) => { \n\tlocalStorage.setItem('password', password);\n} \n\n// Log user in or out using set usr/pass\nconst authenticateUser = () => {\n\tlet pass = getPasswordLS(); \n\tlet usr = getUsernameLS(); \n\tlet request = { \n\t\t\n\t}\n\tif((usr == null || usr === false) || (pass == null || pass === false)) {\n\t\tconsole.log(\"[AuthService.js: authenticateUser()]: usr or pass is null\"); \n\t\tconsole.log(\"[ARGS]: \", usr, pass);\n\t\tlocalStorage.setItem(\"auth\", false); \n\t} else if(usr == \"John\" && pass == \"123\") { \n\t\tlocalStorage.setItem(\"auth\", true); \n\t} else { \n\t\tconsole.log(\"[AuthService.js: authenticateUser()]: invalid details entered\");\n\t\tconsole.log(\"[ARGS]: \", usr, pass); \n\t\tlocalStorage.setItem(\"auth\", false); \n\t} \n} \n\n// Find out if the user is logged in or out \nconst isAuthenticated = () => { \n\tlet authval = String(localStorage.getItem('auth'));\n\tif(Boolean(authval)) { \n\t\tconsole.log(\"[AuthService.js isAuthenticated()]: authval is truthy\"); \n\t\tconsole.log(\"[ARGS]: \", authval); \n\t\treturn authval; \t\n\t} else { \n\t\tconsole.log(\"[AuthService.js isAuthenticated()]: Invalid authval\"); \n\t\tconsole.log(\"[ARGS]: \", authval, \"from\", localStorage.getItem('auth')); \n\t\treturn authval; \n\t} \n} \n\nconst LogOut = () => { \n\tsetPasswordLS(null); \n\tsetUsernameLS(null); \n\tauthenticateUser(); \n} \n\nexport default { \n\tsetUsernameLS, \n\tsetPasswordLS, \n\tgetUsernameLS, \n\tgetPasswordLS, \n\tauthenticateUser, \n\tisAuthenticated,\n\tLogOut\n} \n"]},"metadata":{},"sourceType":"module"}