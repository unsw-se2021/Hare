{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport styled, { withTheme } from 'styled-components';\nimport { controlBorderStyle, normalizeColor } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { DropButton } from '../DropButton';\nimport { Keyboard } from '../Keyboard';\nimport { TextInput } from '../TextInput';\nimport { withForwardRef } from '../hocs';\nimport { SelectContainer } from './SelectContainer';\nvar SelectTextInput = styled(TextInput).withConfig({\n  displayName: \"Select__SelectTextInput\",\n  componentId: \"sc-17idtfo-0\"\n})([\"cursor:pointer;\"]);\nvar StyledSelectDropButton = styled(DropButton).withConfig({\n  displayName: \"Select__StyledSelectDropButton\",\n  componentId: \"sc-17idtfo-1\"\n})([\"\", \";\", \";\"], function (props) {\n  return !props.plain && controlBorderStyle;\n}, function (props) {\n  return props.theme.select && props.theme.select.control && props.theme.select.control.extend;\n});\nStyledSelectDropButton.defaultProps = {};\nObject.setPrototypeOf(StyledSelectDropButton.defaultProps, defaultProps);\n\nvar Select =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Select, _Component);\n\n  function Select() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      open: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"inputRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onOpen\", function () {\n      var onOpen = _this.props.onOpen;\n\n      _this.setState({\n        open: true\n      }, function () {\n        if (onOpen) {\n          onOpen();\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onClose\", function () {\n      var onClose = _this.props.onClose;\n\n      _this.setState({\n        open: false\n      }, function () {\n        if (onClose) {\n          onClose();\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  var _proto = Select.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        a11yTitle = _this$props.a11yTitle,\n        alignSelf = _this$props.alignSelf,\n        children = _this$props.children,\n        closeOnChange = _this$props.closeOnChange,\n        disabled = _this$props.disabled,\n        dropAlign = _this$props.dropAlign,\n        dropTarget = _this$props.dropTarget,\n        forwardRef = _this$props.forwardRef,\n        gridArea = _this$props.gridArea,\n        id = _this$props.id,\n        labelKey = _this$props.labelKey,\n        margin = _this$props.margin,\n        messages = _this$props.messages,\n        onChange = _this$props.onChange,\n        onClose = _this$props.onClose,\n        options = _this$props.options,\n        placeholder = _this$props.placeholder,\n        plain = _this$props.plain,\n        selected = _this$props.selected,\n        size = _this$props.size,\n        theme = _this$props.theme,\n        value = _this$props.value,\n        valueLabel = _this$props.valueLabel,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"a11yTitle\", \"alignSelf\", \"children\", \"closeOnChange\", \"disabled\", \"dropAlign\", \"dropTarget\", \"forwardRef\", \"gridArea\", \"id\", \"labelKey\", \"margin\", \"messages\", \"onChange\", \"onClose\", \"options\", \"placeholder\", \"plain\", \"selected\", \"size\", \"theme\", \"value\", \"valueLabel\"]);\n\n    var open = this.state.open;\n    delete rest.onSearch;\n\n    var onSelectChange = function onSelectChange(event) {\n      if (closeOnChange) {\n        _this2.onClose();\n      }\n\n      if (onChange) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        onChange.apply(void 0, [_extends({}, event, {\n          target: _this2.inputRef.current\n        })].concat(args));\n      }\n    };\n\n    var SelectIcon = theme.select.icons.down;\n    var selectValue;\n    var inputValue = '';\n\n    if (valueLabel) {\n      selectValue = valueLabel;\n    } else if (Array.isArray(value)) {\n      if (value.length > 1) {\n        if (React.isValidElement(value[0])) {\n          selectValue = value;\n        } else {\n          inputValue = messages.multiple;\n        }\n      } else if (value.length === 1) {\n        if (React.isValidElement(value[0])) {\n          selectValue = value[0];\n        } else if (labelKey && typeof value[0] === 'object') {\n          if (typeof labelKey === 'function') {\n            inputValue = labelKey(value[0]);\n          } else {\n            inputValue = value[0][labelKey];\n          }\n        } else {\n          inputValue = value[0];\n        }\n      } else {\n        inputValue = '';\n      }\n    } else if (labelKey && typeof value === 'object') {\n      if (typeof labelKey === 'function') {\n        inputValue = labelKey(value);\n      } else {\n        inputValue = value[labelKey];\n      }\n    } else if (React.isValidElement(value)) {\n      selectValue = value; // deprecated in favor of valueLabel\n    } else if (selected !== undefined) {\n      if (Array.isArray(selected)) {\n        if (selected.length > 1) {\n          inputValue = messages.multiple;\n        } else if (selected.length === 1) {\n          inputValue = options[selected[0]];\n        }\n      } else {\n        inputValue = options[selected];\n      }\n    } else {\n      inputValue = value;\n    } // const dark = theme.select.background ? colorIsDark(theme.select.background) : theme.dark;\n\n\n    var iconColor = normalizeColor(theme.select.icons.color || 'control', theme);\n    return React.createElement(Keyboard, {\n      onDown: this.onOpen,\n      onUp: this.onOpen\n    }, React.createElement(StyledSelectDropButton, {\n      ref: forwardRef,\n      id: id,\n      disabled: disabled === true || undefined,\n      dropAlign: dropAlign,\n      dropTarget: dropTarget,\n      open: open,\n      alignSelf: alignSelf,\n      gridArea: gridArea,\n      margin: margin,\n      onOpen: this.onOpen,\n      onClose: this.onClose,\n      dropContent: React.createElement(SelectContainer, _extends({}, this.props, {\n        onChange: onSelectChange\n      })),\n      plain: plain\n    }, React.createElement(Box, {\n      align: \"center\",\n      direction: \"row\",\n      justify: \"between\",\n      background: theme.select.background\n    }, React.createElement(Box, {\n      direction: \"row\",\n      flex: true,\n      basis: \"auto\"\n    }, selectValue || React.createElement(SelectTextInput, _extends({\n      a11yTitle: a11yTitle && \"\" + a11yTitle + (typeof value === 'string' ? \", \" + value : ''),\n      id: id ? id + \"__input\" : undefined,\n      ref: this.inputRef\n    }, rest, {\n      tabIndex: \"-1\",\n      type: \"text\",\n      placeholder: placeholder,\n      plain: true,\n      readOnly: true,\n      value: inputValue,\n      size: size,\n      onClick: disabled === true ? undefined : this.onOpen\n    }))), React.createElement(Box, {\n      margin: {\n        horizontal: 'small'\n      },\n      flex: false,\n      style: {\n        minWidth: 'auto'\n      }\n    }, React.createElement(SelectIcon, {\n      color: iconColor,\n      size: size\n    })))));\n  };\n\n  return Select;\n}(Component);\n\n_defineProperty(Select, \"defaultProps\", {\n  closeOnChange: true,\n  dropAlign: {\n    top: 'bottom',\n    left: 'left'\n  },\n  messages: {\n    multiple: 'multiple'\n  }\n});\n\nObject.setPrototypeOf(Select.defaultProps, defaultProps);\nvar SelectDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  SelectDoc = require('./doc').doc(Select); // eslint-disable-line global-require\n}\n\nvar SelectWrapper = compose(withTheme, withForwardRef)(SelectDoc || Select);\nexport { SelectWrapper as Select };","map":null,"metadata":{},"sourceType":"module"}