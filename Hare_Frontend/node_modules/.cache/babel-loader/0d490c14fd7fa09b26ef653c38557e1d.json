{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  body { margin: 0; }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}\n\nimport React, { Component } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport MobileDetect from 'mobile-detect';\nimport { colorIsDark } from 'grommet-styles';\nimport { ResponsiveContext, ThemeContext } from '../../contexts';\nimport { deepMerge, getBreakpoint, getDeviceBreakpoint } from '../../utils';\nimport { base as baseTheme } from '../../themes';\nimport { withDocs } from '../hocs';\nimport { StyledGrommet } from './StyledGrommet';\nvar wrapWithHocs = withDocs('Grommet');\nvar FullGlobalStyle = createGlobalStyle(_templateObject());\n\nvar GrommetImpl =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(GrommetImpl, _Component);\n\n  function GrommetImpl() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onResize\", function () {\n      var _this$state = _this.state,\n          theme = _this$state.theme,\n          responsive = _this$state.responsive;\n      var breakpoint = getBreakpoint(window.innerWidth, theme);\n\n      if (breakpoint !== responsive) {\n        _this.setState({\n          responsive: breakpoint\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  GrommetImpl.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var _nextProps$theme = nextProps.theme,\n        theme = _nextProps$theme === void 0 ? {} : _nextProps$theme;\n    var stateTheme = prevState.theme,\n        themeProp = prevState.themeProp;\n    var nextTheme = deepMerge(baseTheme, theme);\n\n    if (!stateTheme || theme !== themeProp) {\n      if (typeof theme.dark === 'undefined') {\n        // calculate if background is dark or not\n        // otherwise respect the property passed in the theme\n        var colors = nextTheme.global.colors;\n        var color = colors.background;\n        nextTheme.dark = color ? colorIsDark(color) : false;\n      }\n\n      return {\n        theme: nextTheme,\n        themeProp: theme\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = GrommetImpl.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    window.addEventListener('resize', this.onResize);\n    this.onResize();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize);\n  };\n\n  _proto.deviceResponsive = function deviceResponsive() {\n    var userAgent = this.props.userAgent;\n    var theme = this.state.theme;\n\n    if (userAgent) {\n      var md = new MobileDetect(userAgent);\n\n      if (md.phone()) {\n        return getDeviceBreakpoint('phone', theme);\n      }\n\n      if (md.tablet()) {\n        return getDeviceBreakpoint('tablet', theme);\n      }\n\n      return getDeviceBreakpoint('computer', theme);\n    }\n\n    return undefined;\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        full = _this$props.full,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"full\"]);\n\n    delete rest.theme;\n    var _this$state2 = this.state,\n        theme = _this$state2.theme,\n        stateResponsive = _this$state2.responsive; // Value from state should be correct once we resize\n    // On first render we try to guess otherwise set the default as a tablet\n\n    var responsive = stateResponsive || this.deviceResponsive() || theme.global.deviceBreakpoints.tablet;\n    return React.createElement(ThemeContext.Provider, {\n      value: theme\n    }, React.createElement(ResponsiveContext.Provider, {\n      value: responsive\n    }, React.createElement(StyledGrommet, _extends({\n      full: full\n    }, rest), children), full && React.createElement(FullGlobalStyle, null)));\n  };\n\n  return GrommetImpl;\n}(Component);\n\n_defineProperty(GrommetImpl, \"displayName\", 'Grommet');\n\nexport var Grommet = wrapWithHocs(GrommetImpl);","map":null,"metadata":{},"sourceType":"module"}